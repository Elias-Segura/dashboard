define(['dart_sdk', 'packages/path_parsing/src/path_segment_type.dart', 'packages/vector_math/vector_math.dart'], (function load__packages__path_parsing__src__path_parsing_dart(dart_sdk, packages__path_parsing__src__path_segment_type$46dart, packages__vector_math__vector_math$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const path_segment_type = packages__path_parsing__src__path_segment_type$46dart.src__path_segment_type;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  var path_parsing = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  var $codeUnitAt = dartx.codeUnitAt;
  var $abs = dartx.abs;
  var $isFinite = dartx.isFinite;
  var $ceil = dartx.ceil;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    SyncIterableOfPathSegmentData: () => (T.SyncIterableOfPathSegmentData = dart.constFn(_js_helper.SyncIterable$(path_parsing.PathSegmentData)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: path_parsing._PathOffset.prototype,
        [dy$]: 0,
        [dx$]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.smoothCubicToRel",
        index: 17
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.cubicToRel",
        index: 7
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.cubicToAbs",
        index: 6
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.moveToRel",
        index: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.smoothCubicToAbs",
        index: 16
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.moveToAbs",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToRel",
        index: 5
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToAbs",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.smoothQuadToRel",
        index: 19
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.smoothQuadToAbs",
        index: 18
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToHorizontalRel",
        index: 13
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToHorizontalAbs",
        index: 12
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToVerticalRel",
        index: 15
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.lineToVerticalAbs",
        index: 14
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.close",
        index: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.quadToRel",
        index: 9
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.quadToAbs",
        index: 8
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.arcToRel",
        index: 11
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.arcToAbs",
        index: 10
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: path_segment_type.SvgPathSegType.prototype,
        [_name]: "SvgPathSegType.unknown",
        index: 0
      });
    }
  }, false);
  var C = Array(21).fill(void 0);
  var I = [
    "package:path_parsing/src/path_parsing.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/path_parsing-0.2.1/lib/src/path_parsing.dart"
  ];
  path_parsing.PathProxy = class PathProxy extends core.Object {};
  (path_parsing.PathProxy.new = function() {
    ;
  }).prototype = path_parsing.PathProxy.prototype;
  dart.addTypeTests(path_parsing.PathProxy);
  dart.addTypeCaches(path_parsing.PathProxy);
  dart.setLibraryUri(path_parsing.PathProxy, I[0]);
  var dx$ = dart.privateName(path_parsing, "_PathOffset.dx");
  var dy$ = dart.privateName(path_parsing, "_PathOffset.dy");
  path_parsing._PathOffset = class _PathOffset extends core.Object {
    get dx() {
      return this[dx$];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$];
    }
    set dy(value) {
      super.dy = value;
    }
    static get zero() {
      return C[0] || CT.C0;
    }
    get direction() {
      return math.atan2(this.dy, this.dx);
    }
    translate(translateX, translateY) {
      if (translateX == null) dart.nullFailed(I[1], 62, 32, "translateX");
      if (translateY == null) dart.nullFailed(I[1], 62, 51, "translateY");
      return new path_parsing._PathOffset.new(dart.notNull(this.dx) + dart.notNull(translateX), dart.notNull(this.dy) + dart.notNull(translateY));
    }
    ['+'](other) {
      if (other == null) dart.nullFailed(I[1], 65, 38, "other");
      return new path_parsing._PathOffset.new(dart.notNull(this.dx) + dart.notNull(other.dx), dart.notNull(this.dy) + dart.notNull(other.dy));
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[1], 67, 38, "other");
      return new path_parsing._PathOffset.new(dart.notNull(this.dx) - dart.notNull(other.dx), dart.notNull(this.dy) - dart.notNull(other.dy));
    }
    ['*'](operand) {
      if (operand == null) dart.nullFailed(I[1], 70, 33, "operand");
      return new path_parsing._PathOffset.new(dart.notNull(this.dx) * dart.notNull(operand), dart.notNull(this.dy) * dart.notNull(operand));
    }
    toString() {
      return "PathOffset{" + dart.str(this.dx) + "," + dart.str(this.dy) + "}";
    }
    _equals(other) {
      if (other == null) return false;
      return path_parsing._PathOffset.is(other) && other.dx == this.dx && other.dy == this.dy;
    }
    get hashCode() {
      return (((17 * 23 ^ dart.hashCode(this.dx)) >>> 0) * 23 ^ dart.hashCode(this.dy)) >>> 0;
    }
  };
  (path_parsing._PathOffset.new = function(dx, dy) {
    if (dx == null) dart.nullFailed(I[1], 52, 26, "dx");
    if (dy == null) dart.nullFailed(I[1], 52, 35, "dy");
    this[dx$] = dx;
    this[dy$] = dy;
    if (!(dx != null)) dart.assertFailed(null, I[1], 53, 16, "dx != null");
    if (!(dy != null)) dart.assertFailed(null, I[1], 54, 16, "dy != null");
    ;
  }).prototype = path_parsing._PathOffset.prototype;
  dart.addTypeTests(path_parsing._PathOffset);
  dart.addTypeCaches(path_parsing._PathOffset);
  dart.setMethodSignature(path_parsing._PathOffset, () => ({
    __proto__: dart.getMethods(path_parsing._PathOffset.__proto__),
    translate: dart.fnType(path_parsing._PathOffset, [core.double, core.double]),
    '+': dart.fnType(path_parsing._PathOffset, [path_parsing._PathOffset]),
    '-': dart.fnType(path_parsing._PathOffset, [path_parsing._PathOffset]),
    '*': dart.fnType(path_parsing._PathOffset, [core.double])
  }));
  dart.setGetterSignature(path_parsing._PathOffset, () => ({
    __proto__: dart.getGetters(path_parsing._PathOffset.__proto__),
    direction: core.double
  }));
  dart.setLibraryUri(path_parsing._PathOffset, I[0]);
  dart.setFieldSignature(path_parsing._PathOffset, () => ({
    __proto__: dart.getFields(path_parsing._PathOffset.__proto__),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(path_parsing._PathOffset, ['toString', '_equals']);
  dart.defineExtensionAccessors(path_parsing._PathOffset, ['hashCode']);
  var _string$ = dart.privateName(path_parsing, "_string");
  var _previousCommand = dart.privateName(path_parsing, "_previousCommand");
  var _idx = dart.privateName(path_parsing, "_idx");
  var _length = dart.privateName(path_parsing, "_length");
  var _skipOptionalSvgSpaces = dart.privateName(path_parsing, "_skipOptionalSvgSpaces");
  var _isHtmlSpace = dart.privateName(path_parsing, "_isHtmlSpace");
  var _skipOptionalSvgSpacesOrDelimiter = dart.privateName(path_parsing, "_skipOptionalSvgSpacesOrDelimiter");
  var _maybeImplicitCommand = dart.privateName(path_parsing, "_maybeImplicitCommand");
  var _isValidRange = dart.privateName(path_parsing, "_isValidRange");
  var _isValidExponent = dart.privateName(path_parsing, "_isValidExponent");
  var _readCodeUnit = dart.privateName(path_parsing, "_readCodeUnit");
  var _parseNumber = dart.privateName(path_parsing, "_parseNumber");
  var _parseArcFlag = dart.privateName(path_parsing, "_parseArcFlag");
  var _name = dart.privateName(path_segment_type, "_name");
  path_parsing.SvgPathStringSource = class SvgPathStringSource extends core.Object {
    [_isHtmlSpace](character) {
      if (character == null) dart.nullFailed(I[1], 104, 25, "character");
      return dart.notNull(character) <= 32 && (character === 32 || character === 10 || character === 9 || character === 13 || character === 12);
    }
    [_skipOptionalSvgSpaces]() {
      while (true) {
        if (dart.notNull(this[_idx]) >= dart.notNull(this[_length])) {
          return -1;
        }
        let c = this[_string$][$codeUnitAt](this[_idx]);
        if (!dart.test(this[_isHtmlSpace](c))) {
          return c;
        }
        this[_idx] = dart.notNull(this[_idx]) + 1;
      }
    }
    [_skipOptionalSvgSpacesOrDelimiter](delimiter = 44) {
      if (delimiter == null) dart.nullFailed(I[1], 144, 12, "delimiter");
      let c = this[_skipOptionalSvgSpaces]();
      if (c == delimiter) {
        this[_idx] = dart.notNull(this[_idx]) + 1;
        this[_skipOptionalSvgSpaces]();
      }
    }
    static _isNumberStart(lookahead) {
      if (lookahead == null) dart.nullFailed(I[1], 152, 34, "lookahead");
      return dart.notNull(lookahead) >= 48 && dart.notNull(lookahead) <= 57 || lookahead === 43 || lookahead === 45 || lookahead === 46;
    }
    [_maybeImplicitCommand](lookahead, nextCommand) {
      if (lookahead == null) dart.nullFailed(I[1], 161, 9, "lookahead");
      if (nextCommand == null) dart.nullFailed(I[1], 162, 20, "nextCommand");
      if (!dart.test(path_parsing.SvgPathStringSource._isNumberStart(lookahead)) || this[_previousCommand] == path_segment_type.SvgPathSegType.close) return nextCommand;
      if (this[_previousCommand] == path_segment_type.SvgPathSegType.moveToAbs) {
        return path_segment_type.SvgPathSegType.lineToAbs;
      }
      if (this[_previousCommand] == path_segment_type.SvgPathSegType.moveToRel) {
        return path_segment_type.SvgPathSegType.lineToRel;
      }
      return this[_previousCommand];
    }
    [_isValidRange](x) {
      if (x == null) dart.nullFailed(I[1], 180, 29, "x");
      return -1.7976931348623157e+308 <= dart.notNull(x) && dart.notNull(x) <= 1.7976931348623157e+308;
    }
    [_isValidExponent](x) {
      if (x == null) dart.nullFailed(I[1], 183, 32, "x");
      return -37 <= dart.notNull(x) && dart.notNull(x) <= 38;
    }
    [_readCodeUnit]() {
      let t0;
      if (dart.notNull(this[_idx]) >= dart.notNull(this[_length])) {
        return -1;
      }
      return this[_string$][$codeUnitAt]((t0 = this[_idx], this[_idx] = dart.notNull(t0) + 1, t0));
    }
    [_parseNumber]() {
      this[_skipOptionalSvgSpaces]();
      let sign = 1;
      let c = this[_readCodeUnit]();
      if (c === 43) {
        c = this[_readCodeUnit]();
      } else if (c === 45) {
        sign = -1;
        c = this[_readCodeUnit]();
      }
      if ((dart.notNull(c) < 48 || dart.notNull(c) > 57) && c !== 46) {
        dart.throw(new core.StateError.new("First character of a number must be one of [0-9+-.]."));
      }
      let integer = 0.0;
      while (48 <= dart.notNull(c) && dart.notNull(c) <= 57) {
        integer = integer * 10 + (dart.notNull(c) - 48);
        c = this[_readCodeUnit]();
      }
      if (!dart.test(this[_isValidRange](integer))) {
        dart.throw(new core.StateError.new("Numeric overflow"));
      }
      let decimal = 0.0;
      if (c === 46) {
        c = this[_readCodeUnit]();
        if (dart.notNull(c) < 48 || dart.notNull(c) > 57) dart.throw(new core.StateError.new("There must be at least one digit following the ."));
        let frac = 1.0;
        while (48 <= dart.notNull(c) && dart.notNull(c) <= 57) {
          frac = frac * 0.1;
          decimal = decimal + (dart.notNull(c) - 48) * frac;
          c = this[_readCodeUnit]();
        }
      }
      let number = integer + decimal;
      number = number * sign;
      if (dart.notNull(this[_idx]) < dart.notNull(this[_length]) && (c === 101 || c === 69) && this[_string$][$codeUnitAt](this[_idx]) !== 120 && this[_string$][$codeUnitAt](this[_idx]) !== 109) {
        c = this[_readCodeUnit]();
        let exponentIsNegative = false;
        if (c === 43) {
          c = this[_readCodeUnit]();
        } else if (c === 45) {
          c = this[_readCodeUnit]();
          exponentIsNegative = true;
        }
        if (dart.notNull(c) < 48 || dart.notNull(c) > 57) dart.throw(new core.StateError.new("Missing exponent"));
        let exponent = 0.0;
        while (dart.notNull(c) >= 48 && dart.notNull(c) <= 57) {
          exponent = exponent * 10.0;
          exponent = exponent + (dart.notNull(c) - 48);
          c = this[_readCodeUnit]();
        }
        if (exponentIsNegative) {
          exponent = -exponent;
        }
        if (!dart.test(this[_isValidExponent](exponent))) {
          dart.throw(new core.StateError.new("Invalid exponent " + dart.str(exponent)));
        }
        if (exponent !== 0) {
          number = number * math.pow(10.0, exponent);
        }
      }
      if (!dart.test(this[_isValidRange](number))) {
        dart.throw(new core.StateError.new("Numeric overflow"));
      }
      if (c !== -1) {
        this[_idx] = dart.notNull(this[_idx]) - 1;
        this[_skipOptionalSvgSpacesOrDelimiter]();
      }
      return number;
    }
    [_parseArcFlag]() {
      let t0;
      if (!dart.test(this.hasMoreData)) {
        dart.throw(new core.StateError.new("Expected more data"));
      }
      let flagChar = this[_string$][$codeUnitAt]((t0 = this[_idx], this[_idx] = dart.notNull(t0) + 1, t0));
      this[_skipOptionalSvgSpacesOrDelimiter]();
      if (flagChar === 48)
        return false;
      else if (flagChar === 49)
        return true;
      else
        dart.throw(new core.StateError.new("Invalid flag value"));
    }
    get hasMoreData() {
      return dart.notNull(this[_idx]) < dart.notNull(this[_length]);
    }
    parseSegments() {
      return new (T.SyncIterableOfPathSegmentData()).new((function* parseSegments() {
        while (dart.test(this.hasMoreData)) {
          yield this.parseSegment();
        }
      }).bind(this));
    }
    parseSegment() {
      if (!dart.test(this.hasMoreData)) dart.assertFailed(null, I[1], 332, 12, "hasMoreData");
      let segment = new path_parsing.PathSegmentData.new();
      let lookahead = this[_string$][$codeUnitAt](this[_idx]);
      let command = path_segment_type.AsciiConstants.mapLetterToSegmentType(lookahead);
      if (this[_previousCommand] == path_segment_type.SvgPathSegType.unknown) {
        if (command != path_segment_type.SvgPathSegType.moveToRel && command != path_segment_type.SvgPathSegType.moveToAbs) {
          dart.throw(new core.StateError.new("Expected to find moveTo command"));
        }
        this[_idx] = dart.notNull(this[_idx]) + 1;
      } else if (command == path_segment_type.SvgPathSegType.unknown) {
        if (!(this[_previousCommand] != path_segment_type.SvgPathSegType.unknown)) dart.assertFailed(null, I[1], 346, 14, "_previousCommand != SvgPathSegType.unknown");
        command = this[_maybeImplicitCommand](lookahead, command);
        if (command == path_segment_type.SvgPathSegType.unknown) {
          dart.throw(new core.StateError.new("Expected a path command"));
        }
      } else {
        this[_idx] = dart.notNull(this[_idx]) + 1;
      }
      segment.command = this[_previousCommand] = command;
      let labelState = segment.command;
      SL0:
        while (true) {
          switch (labelState) {
            case C[2] || CT.C2:
            case C[3] || CT.C3:
            {
              segment.point1 = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              labelState = C[1] || CT.C1;
              continue SL0;
            }
            case C[1] || CT.C1:
            case C[5] || CT.C5:
            {
              segment.point2 = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              labelState = C[4] || CT.C4;
              continue SL0;
            }
            case C[4] || CT.C4:
            case C[6] || CT.C6:
            case C[7] || CT.C7:
            case C[8] || CT.C8:
            case C[9] || CT.C9:
            case C[10] || CT.C10:
            {
              segment.targetPoint = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              break SL0;
            }
            case C[11] || CT.C11:
            case C[12] || CT.C12:
            {
              segment.targetPoint = new path_parsing._PathOffset.new(this[_parseNumber](), segment.targetPoint.dy);
              break SL0;
            }
            case C[13] || CT.C13:
            case C[14] || CT.C14:
            {
              segment.targetPoint = new path_parsing._PathOffset.new(segment.targetPoint.dx, this[_parseNumber]());
              break SL0;
            }
            case C[15] || CT.C15:
            {
              this[_skipOptionalSvgSpaces]();
              break SL0;
            }
            case C[16] || CT.C16:
            case C[17] || CT.C17:
            {
              segment.point1 = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              segment.targetPoint = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              break SL0;
            }
            case C[18] || CT.C18:
            case C[19] || CT.C19:
            {
              segment.point1 = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              segment.arcAngle = this[_parseNumber]();
              segment.arcLarge = this[_parseArcFlag]();
              segment.arcSweep = this[_parseArcFlag]();
              segment.targetPoint = new path_parsing._PathOffset.new(this[_parseNumber](), this[_parseNumber]());
              break SL0;
            }
            case C[20] || CT.C20:
            {
              dart.throw(new core.StateError.new("Unknown segment command"));
              break SL0;
            }
          }
          break;
        }
      return segment;
    }
  };
  (path_parsing.SvgPathStringSource.new = function(_string) {
    if (_string == null) dart.nullFailed(I[1], 90, 28, "_string");
    this[_string$] = _string;
    if (!(_string != null)) dart.assertFailed(null, I[1], 91, 16, "_string != null");
    this[_previousCommand] = path_segment_type.SvgPathSegType.unknown;
    this[_idx] = 0;
    this[_length] = _string.length;
    this[_skipOptionalSvgSpaces]();
  }).prototype = path_parsing.SvgPathStringSource.prototype;
  dart.addTypeTests(path_parsing.SvgPathStringSource);
  dart.addTypeCaches(path_parsing.SvgPathStringSource);
  dart.setMethodSignature(path_parsing.SvgPathStringSource, () => ({
    __proto__: dart.getMethods(path_parsing.SvgPathStringSource.__proto__),
    [_isHtmlSpace]: dart.fnType(core.bool, [core.int]),
    [_skipOptionalSvgSpaces]: dart.fnType(core.int, []),
    [_skipOptionalSvgSpacesOrDelimiter]: dart.fnType(dart.void, [], [core.int]),
    [_maybeImplicitCommand]: dart.fnType(path_segment_type.SvgPathSegType, [core.int, path_segment_type.SvgPathSegType]),
    [_isValidRange]: dart.fnType(core.bool, [core.double]),
    [_isValidExponent]: dart.fnType(core.bool, [core.double]),
    [_readCodeUnit]: dart.fnType(core.int, []),
    [_parseNumber]: dart.fnType(core.double, []),
    [_parseArcFlag]: dart.fnType(core.bool, []),
    parseSegments: dart.fnType(core.Iterable$(path_parsing.PathSegmentData), []),
    parseSegment: dart.fnType(path_parsing.PathSegmentData, [])
  }));
  dart.setGetterSignature(path_parsing.SvgPathStringSource, () => ({
    __proto__: dart.getGetters(path_parsing.SvgPathStringSource.__proto__),
    hasMoreData: core.bool
  }));
  dart.setLibraryUri(path_parsing.SvgPathStringSource, I[0]);
  dart.setFieldSignature(path_parsing.SvgPathStringSource, () => ({
    __proto__: dart.getFields(path_parsing.SvgPathStringSource.__proto__),
    [_string$]: dart.finalFieldType(core.String),
    [_previousCommand]: dart.fieldType(path_segment_type.SvgPathSegType),
    [_idx]: dart.fieldType(core.int),
    [_length]: dart.finalFieldType(core.int)
  }));
  path_parsing.OffsetHelper = class OffsetHelper extends core.Object {
    static reflectedPoint(reflectedIn, pointToReflect) {
      if (reflectedIn == null) dart.nullFailed(I[1], 413, 19, "reflectedIn");
      if (pointToReflect == null) dart.nullFailed(I[1], 413, 44, "pointToReflect");
      return new path_parsing._PathOffset.new(2 * dart.notNull(reflectedIn.dx) - dart.notNull(pointToReflect.dx), 2 * dart.notNull(reflectedIn.dy) - dart.notNull(pointToReflect.dy));
    }
    static blendPoints(p1, p2) {
      if (p1 == null) dart.nullFailed(I[1], 421, 46, "p1");
      if (p2 == null) dart.nullFailed(I[1], 421, 62, "p2");
      return new path_parsing._PathOffset.new((dart.notNull(p1.dx) + 2 * dart.notNull(p2.dx)) * 0.3333333333333333, (dart.notNull(p1.dy) + 2 * dart.notNull(p2.dy)) * 0.3333333333333333);
    }
  };
  (path_parsing.OffsetHelper.new = function() {
    ;
  }).prototype = path_parsing.OffsetHelper.prototype;
  dart.addTypeTests(path_parsing.OffsetHelper);
  dart.addTypeCaches(path_parsing.OffsetHelper);
  dart.setLibraryUri(path_parsing.OffsetHelper, I[0]);
  dart.defineLazy(path_parsing.OffsetHelper, {
    /*path_parsing.OffsetHelper._kOneOverThree*/get _kOneOverThree() {
      return 0.3333333333333333;
    }
  }, false);
  var command = dart.privateName(path_parsing, "PathSegmentData.command");
  var targetPoint = dart.privateName(path_parsing, "PathSegmentData.targetPoint");
  var point1 = dart.privateName(path_parsing, "PathSegmentData.point1");
  var point2 = dart.privateName(path_parsing, "PathSegmentData.point2");
  var arcSweep = dart.privateName(path_parsing, "PathSegmentData.arcSweep");
  var arcLarge = dart.privateName(path_parsing, "PathSegmentData.arcLarge");
  path_parsing.PathSegmentData = class PathSegmentData extends core.Object {
    get command() {
      return this[command];
    }
    set command(value) {
      this[command] = value;
    }
    get targetPoint() {
      return this[targetPoint];
    }
    set targetPoint(value) {
      this[targetPoint] = value;
    }
    get point1() {
      return this[point1];
    }
    set point1(value) {
      this[point1] = value;
    }
    get point2() {
      return this[point2];
    }
    set point2(value) {
      this[point2] = value;
    }
    get arcSweep() {
      return this[arcSweep];
    }
    set arcSweep(value) {
      this[arcSweep] = value;
    }
    get arcLarge() {
      return this[arcLarge];
    }
    set arcLarge(value) {
      this[arcLarge] = value;
    }
    get arcRadii() {
      return this.point1;
    }
    get arcAngle() {
      return this.point2.dx;
    }
    set arcAngle(angle) {
      if (angle == null) dart.nullFailed(I[1], 452, 23, "angle");
      return this.point2 = new path_parsing._PathOffset.new(angle, this.point2.dy);
    }
    get r1() {
      return this.arcRadii.dx;
    }
    get r2() {
      return this.arcRadii.dy;
    }
    get largeArcFlag() {
      return this.arcLarge;
    }
    get sweepFlag() {
      return this.arcSweep;
    }
    get x() {
      return this.targetPoint.dx;
    }
    get y() {
      return this.targetPoint.dy;
    }
    get x1() {
      return this.point1.dx;
    }
    get y1() {
      return this.point1.dy;
    }
    get x2() {
      return this.point2.dx;
    }
    get y2() {
      return this.point2.dy;
    }
    toString() {
      return "PathSegmentData{" + dart.str(this.command) + " " + dart.str(this.targetPoint) + " " + dart.str(this.point1) + " " + dart.str(this.point2) + " " + dart.str(this.arcSweep) + " " + dart.str(this.arcLarge) + "}";
    }
  };
  (path_parsing.PathSegmentData.new = function() {
    this[targetPoint] = path_parsing._PathOffset.zero;
    this[point1] = path_parsing._PathOffset.zero;
    this[point2] = path_parsing._PathOffset.zero;
    this[command] = path_segment_type.SvgPathSegType.unknown;
    this[arcSweep] = false;
    this[arcLarge] = false;
    ;
  }).prototype = path_parsing.PathSegmentData.prototype;
  dart.addTypeTests(path_parsing.PathSegmentData);
  dart.addTypeCaches(path_parsing.PathSegmentData);
  dart.setGetterSignature(path_parsing.PathSegmentData, () => ({
    __proto__: dart.getGetters(path_parsing.PathSegmentData.__proto__),
    arcRadii: path_parsing._PathOffset,
    arcAngle: core.double,
    r1: core.double,
    r2: core.double,
    largeArcFlag: core.bool,
    sweepFlag: core.bool,
    x: core.double,
    y: core.double,
    x1: core.double,
    y1: core.double,
    x2: core.double,
    y2: core.double
  }));
  dart.setSetterSignature(path_parsing.PathSegmentData, () => ({
    __proto__: dart.getSetters(path_parsing.PathSegmentData.__proto__),
    arcAngle: core.double
  }));
  dart.setLibraryUri(path_parsing.PathSegmentData, I[0]);
  dart.setFieldSignature(path_parsing.PathSegmentData, () => ({
    __proto__: dart.getFields(path_parsing.PathSegmentData.__proto__),
    command: dart.fieldType(path_segment_type.SvgPathSegType),
    targetPoint: dart.fieldType(path_parsing._PathOffset),
    point1: dart.fieldType(path_parsing._PathOffset),
    point2: dart.fieldType(path_parsing._PathOffset),
    arcSweep: dart.fieldType(core.bool),
    arcLarge: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(path_parsing.PathSegmentData, ['toString']);
  var _currentPoint = dart.privateName(path_parsing, "_currentPoint");
  var _subPathPoint = dart.privateName(path_parsing, "_subPathPoint");
  var _controlPoint = dart.privateName(path_parsing, "_controlPoint");
  var _lastCommand = dart.privateName(path_parsing, "_lastCommand");
  var _decomposeArcToCubic = dart.privateName(path_parsing, "_decomposeArcToCubic");
  var _mapPoint = dart.privateName(path_parsing, "_mapPoint");
  path_parsing.SvgPathNormalizer = class SvgPathNormalizer extends core.Object {
    emitSegment(segment, path) {
      if (segment == null) dart.nullFailed(I[1], 488, 36, "segment");
      if (path == null) dart.nullFailed(I[1], 488, 55, "path");
      let normSeg = segment;
      if (!(this[_currentPoint] != null)) dart.assertFailed(null, I[1], 490, 12, "_currentPoint != null");
      let labelState = segment.command;
      SL1:
        while (true) {
          switch (labelState) {
            case C[16] || CT.C16:
            {
              normSeg.point1 = normSeg.point1['+'](this[_currentPoint]);
              normSeg.targetPoint = normSeg.targetPoint['+'](this[_currentPoint]);
              break SL1;
            }
            case C[2] || CT.C2:
            {
              normSeg.point1 = normSeg.point1['+'](this[_currentPoint]);
              labelState = C[1] || CT.C1;
              continue SL1;
            }
            case C[1] || CT.C1:
            {
              normSeg.point2 = normSeg.point2['+'](this[_currentPoint]);
              labelState = C[4] || CT.C4;
              continue SL1;
            }
            case C[4] || CT.C4:
            case C[7] || CT.C7:
            case C[11] || CT.C11:
            case C[13] || CT.C13:
            case C[9] || CT.C9:
            case C[18] || CT.C18:
            {
              normSeg.targetPoint = normSeg.targetPoint['+'](this[_currentPoint]);
              break SL1;
            }
            case C[12] || CT.C12:
            {
              normSeg.targetPoint = new path_parsing._PathOffset.new(normSeg.targetPoint.dx, this[_currentPoint].dy);
              break SL1;
            }
            case C[14] || CT.C14:
            {
              normSeg.targetPoint = new path_parsing._PathOffset.new(this[_currentPoint].dx, normSeg.targetPoint.dy);
              break SL1;
            }
            case C[15] || CT.C15:
            {
              normSeg.targetPoint = this[_subPathPoint];
              break SL1;
            }
            default:
            {
              break SL1;
              break SL1;
            }
          }
          break;
        }
      let labelState$ = segment.command;
      SL2:
        while (true) {
          switch (labelState$) {
            case C[4] || CT.C4:
            case C[6] || CT.C6:
            {
              this[_subPathPoint] = normSeg.targetPoint;
              path.moveTo(normSeg.targetPoint.dx, normSeg.targetPoint.dy);
              break SL2;
            }
            case C[7] || CT.C7:
            case C[8] || CT.C8:
            case C[11] || CT.C11:
            case C[12] || CT.C12:
            case C[13] || CT.C13:
            case C[14] || CT.C14:
            {
              path.lineTo(normSeg.targetPoint.dx, normSeg.targetPoint.dy);
              break SL2;
            }
            case C[15] || CT.C15:
            {
              path.close();
              break SL2;
            }
            case C[1] || CT.C1:
            case C[5] || CT.C5:
            {
              if (!dart.test(path_parsing.isCubicCommand(this[_lastCommand]))) {
                normSeg.point1 = this[_currentPoint];
              } else {
                normSeg.point1 = path_parsing.OffsetHelper.reflectedPoint(this[_currentPoint], this[_controlPoint]);
              }
              labelState$ = C[2] || CT.C2;
              continue SL2;
            }
            case C[2] || CT.C2:
            case C[3] || CT.C3:
            {
              this[_controlPoint] = normSeg.point2;
              path.cubicTo(normSeg.point1.dx, normSeg.point1.dy, normSeg.point2.dx, normSeg.point2.dy, normSeg.targetPoint.dx, normSeg.targetPoint.dy);
              break SL2;
            }
            case C[9] || CT.C9:
            case C[10] || CT.C10:
            {
              if (!dart.test(path_parsing.isQuadraticCommand(this[_lastCommand]))) {
                normSeg.point1 = this[_currentPoint];
              } else {
                normSeg.point1 = path_parsing.OffsetHelper.reflectedPoint(this[_currentPoint], this[_controlPoint]);
              }
              labelState$ = C[16] || CT.C16;
              continue SL2;
            }
            case C[16] || CT.C16:
            case C[17] || CT.C17:
            {
              this[_controlPoint] = normSeg.point1;
              normSeg.point1 = path_parsing.OffsetHelper.blendPoints(this[_currentPoint], this[_controlPoint]);
              normSeg.point2 = path_parsing.OffsetHelper.blendPoints(normSeg.targetPoint, this[_controlPoint]);
              path.cubicTo(normSeg.point1.dx, normSeg.point1.dy, normSeg.point2.dx, normSeg.point2.dy, normSeg.targetPoint.dx, normSeg.targetPoint.dy);
              break SL2;
            }
            case C[18] || CT.C18:
            case C[19] || CT.C19:
            {
              if (!dart.test(this[_decomposeArcToCubic](this[_currentPoint], normSeg, path))) {
                path.lineTo(normSeg.targetPoint.dx, normSeg.targetPoint.dy);
              }
              break SL2;
            }
            default:
            {
              dart.throw(new core.StateError.new("Invalid command type in path"));
              break SL2;
            }
          }
          break;
        }
      this[_currentPoint] = normSeg.targetPoint;
      if (!dart.test(path_parsing.isCubicCommand(segment.command)) && !dart.test(path_parsing.isQuadraticCommand(segment.command))) {
        this[_controlPoint] = this[_currentPoint];
      }
      this[_lastCommand] = segment.command;
    }
    [_decomposeArcToCubic](currentPoint, arcSegment, path) {
      if (currentPoint == null) dart.nullFailed(I[1], 639, 17, "currentPoint");
      if (arcSegment == null) dart.nullFailed(I[1], 640, 21, "arcSegment");
      if (path == null) dart.nullFailed(I[1], 641, 15, "path");
      let rx = arcSegment.arcRadii.dx[$abs]();
      let ry = arcSegment.arcRadii.dy[$abs]();
      if (rx === 0 || ry === 0) {
        return false;
      }
      if (dart.equals(arcSegment.targetPoint, currentPoint)) {
        return false;
      }
      let angle = arcSegment.arcAngle;
      let midPointDistance = currentPoint['-'](arcSegment.targetPoint)['*'](0.5);
      let pointTransform = vector_math.Matrix4.identity();
      pointTransform.rotateZ(-dart.notNull(angle));
      let transformedMidPoint = this[_mapPoint](pointTransform, new path_parsing._PathOffset.new(midPointDistance.dx, midPointDistance.dy));
      let squareRx = rx * rx;
      let squareRy = ry * ry;
      let squareX = dart.notNull(transformedMidPoint.dx) * dart.notNull(transformedMidPoint.dx);
      let squareY = dart.notNull(transformedMidPoint.dy) * dart.notNull(transformedMidPoint.dy);
      let radiiScale = squareX / squareRx + squareY / squareRy;
      if (radiiScale > 1.0) {
        rx = rx * math.sqrt(radiiScale);
        ry = ry * math.sqrt(radiiScale);
      }
      pointTransform.setIdentity();
      pointTransform.scale(1.0 / rx, 1.0 / ry);
      pointTransform.rotateZ(-dart.notNull(angle));
      let point1 = this[_mapPoint](pointTransform, currentPoint);
      let point2 = this[_mapPoint](pointTransform, arcSegment.targetPoint);
      let delta = point2['-'](point1);
      let d = dart.notNull(delta.dx) * dart.notNull(delta.dx) + dart.notNull(delta.dy) * dart.notNull(delta.dy);
      let scaleFactorSquared = math.max(core.double, 1.0 / d - 0.25, 0.0);
      let scaleFactor = math.sqrt(scaleFactorSquared);
      if (!scaleFactor[$isFinite]) {
        scaleFactor = 0.0;
      }
      if (arcSegment.arcSweep == arcSegment.arcLarge) {
        scaleFactor = -scaleFactor;
      }
      delta = delta['*'](scaleFactor);
      let centerPoint = point1['+'](point2)['*'](0.5).translate(-dart.notNull(delta.dy), delta.dx);
      let theta1 = point1['-'](centerPoint).direction;
      let theta2 = point2['-'](centerPoint).direction;
      let thetaArc = dart.notNull(theta2) - dart.notNull(theta1);
      if (thetaArc < 0.0 && dart.test(arcSegment.arcSweep)) {
        thetaArc = thetaArc + 6.283185307179586;
      } else if (thetaArc > 0.0 && !dart.test(arcSegment.arcSweep)) {
        thetaArc = thetaArc - 6.283185307179586;
      }
      pointTransform.setIdentity();
      pointTransform.rotateZ(angle);
      pointTransform.scale(rx, ry);
      let segments = (thetaArc / (1.5707963267948966 + 0.001))[$abs]()[$ceil]();
      for (let i = 0; i < segments; i = i + 1) {
        let startTheta = dart.notNull(theta1) + i * thetaArc / segments;
        let endTheta = dart.notNull(theta1) + (i + 1) * thetaArc / segments;
        let t = 8.0 / 6.0 * math.tan(0.25 * (endTheta - startTheta));
        if (!t[$isFinite]) {
          return false;
        }
        let sinStartTheta = math.sin(startTheta);
        let cosStartTheta = math.cos(startTheta);
        let sinEndTheta = math.sin(endTheta);
        let cosEndTheta = math.cos(endTheta);
        point1 = new path_parsing._PathOffset.new(cosStartTheta - t * sinStartTheta, sinStartTheta + t * cosStartTheta).translate(centerPoint.dx, centerPoint.dy);
        let targetPoint = new path_parsing._PathOffset.new(cosEndTheta, sinEndTheta).translate(centerPoint.dx, centerPoint.dy);
        point2 = targetPoint.translate(t * sinEndTheta, -t * cosEndTheta);
        let cubicSegment = new path_parsing.PathSegmentData.new();
        cubicSegment.command = path_segment_type.SvgPathSegType.cubicToAbs;
        cubicSegment.point1 = this[_mapPoint](pointTransform, point1);
        cubicSegment.point2 = this[_mapPoint](pointTransform, point2);
        cubicSegment.targetPoint = this[_mapPoint](pointTransform, targetPoint);
        path.cubicTo(cubicSegment.x1, cubicSegment.y1, cubicSegment.x2, cubicSegment.y2, cubicSegment.x, cubicSegment.y);
      }
      return true;
    }
    [_mapPoint](transform, point) {
      if (transform == null) dart.nullFailed(I[1], 765, 33, "transform");
      if (point == null) dart.nullFailed(I[1], 765, 56, "point");
      return new path_parsing._PathOffset.new(dart.notNull(transform.storage[$_get](0)) * dart.notNull(point.dx) + dart.notNull(transform.storage[$_get](4)) * dart.notNull(point.dy) + dart.notNull(transform.storage[$_get](12)), dart.notNull(transform.storage[$_get](1)) * dart.notNull(point.dx) + dart.notNull(transform.storage[$_get](5)) * dart.notNull(point.dy) + dart.notNull(transform.storage[$_get](13)));
    }
  };
  (path_parsing.SvgPathNormalizer.new = function() {
    this[_currentPoint] = path_parsing._PathOffset.zero;
    this[_subPathPoint] = path_parsing._PathOffset.zero;
    this[_controlPoint] = path_parsing._PathOffset.zero;
    this[_lastCommand] = path_segment_type.SvgPathSegType.unknown;
    ;
  }).prototype = path_parsing.SvgPathNormalizer.prototype;
  dart.addTypeTests(path_parsing.SvgPathNormalizer);
  dart.addTypeCaches(path_parsing.SvgPathNormalizer);
  dart.setMethodSignature(path_parsing.SvgPathNormalizer, () => ({
    __proto__: dart.getMethods(path_parsing.SvgPathNormalizer.__proto__),
    emitSegment: dart.fnType(dart.void, [path_parsing.PathSegmentData, path_parsing.PathProxy]),
    [_decomposeArcToCubic]: dart.fnType(core.bool, [path_parsing._PathOffset, path_parsing.PathSegmentData, path_parsing.PathProxy]),
    [_mapPoint]: dart.fnType(path_parsing._PathOffset, [vector_math.Matrix4, path_parsing._PathOffset])
  }));
  dart.setLibraryUri(path_parsing.SvgPathNormalizer, I[0]);
  dart.setFieldSignature(path_parsing.SvgPathNormalizer, () => ({
    __proto__: dart.getFields(path_parsing.SvgPathNormalizer.__proto__),
    [_currentPoint]: dart.fieldType(path_parsing._PathOffset),
    [_subPathPoint]: dart.fieldType(path_parsing._PathOffset),
    [_controlPoint]: dart.fieldType(path_parsing._PathOffset),
    [_lastCommand]: dart.fieldType(path_segment_type.SvgPathSegType)
  }));
  path_parsing.writeSvgPathDataToPath = function writeSvgPathDataToPath(svg, path) {
    if (path == null) dart.nullFailed(I[1], 21, 52, "path");
    if (svg == null || svg === "") {
      return;
    }
    let parser = new path_parsing.SvgPathStringSource.new(svg);
    let normalizer = new path_parsing.SvgPathNormalizer.new();
    for (let seg of parser.parseSegments()) {
      normalizer.emitSegment(seg, path);
    }
  };
  path_parsing.isCubicCommand = function isCubicCommand(command) {
    if (command == null) dart.nullFailed(I[1], 427, 36, "command");
    return command == path_segment_type.SvgPathSegType.cubicToAbs || command == path_segment_type.SvgPathSegType.cubicToRel || command == path_segment_type.SvgPathSegType.smoothCubicToAbs || command == path_segment_type.SvgPathSegType.smoothCubicToRel;
  };
  path_parsing.isQuadraticCommand = function isQuadraticCommand(command) {
    if (command == null) dart.nullFailed(I[1], 434, 40, "command");
    return command == path_segment_type.SvgPathSegType.quadToAbs || command == path_segment_type.SvgPathSegType.quadToRel || command == path_segment_type.SvgPathSegType.smoothQuadToAbs || command == path_segment_type.SvgPathSegType.smoothQuadToRel;
  };
  dart.defineLazy(path_parsing, {
    /*path_parsing._twoPiFloat*/get _twoPiFloat() {
      return 6.283185307179586;
    },
    /*path_parsing._piOverTwoFloat*/get _piOverTwoFloat() {
      return 1.5707963267948966;
    }
  }, false);
  dart.trackLibraries("packages/path_parsing/src/path_parsing.dart", {
    "package:path_parsing/src/path_parsing.dart": path_parsing
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["path_parsing.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/path_parsing/src/path_parsing.dart.lib.js"}');
  // Exports:
  return {
    src__path_parsing: path_parsing
  };
}));

//# sourceMappingURL=path_parsing.dart.lib.js.map
