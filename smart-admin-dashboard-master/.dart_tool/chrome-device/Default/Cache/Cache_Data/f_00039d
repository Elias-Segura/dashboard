define(['dart_sdk', 'packages/flutter/src/material/colors.dart', 'packages/fl_chart/src/utils/utils.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/fl_chart/src/extensions/paint_extension.dart', 'packages/equatable/src/equatable_mixin.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/widgets/implicit_animations.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/fl_chart/src/chart/base/line.dart', 'packages/flutter/src/rendering/custom_layout.dart', 'packages/fl_chart/src/utils/list_wrapper.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/colors.dart', 'packages/fl_chart/src/extensions/color_extension.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/fl_chart/src/extensions/path_extension.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/box_border.dart'], (function load__packages__fl_chart__src__chart__scatter_chart__scatter_chart_painter_dart(dart_sdk, packages__flutter__src__material__colors$46dart, packages__fl_chart__src__utils__utils$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__fl_chart__src__extensions__paint_extension$46dart, packages__equatable__src__equatable_mixin$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__widgets__implicit_animations$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__strut_style$46dart, packages__fl_chart__src__chart__base__line$46dart, packages__flutter__src__rendering__custom_layout$46dart, packages__fl_chart__src__utils__list_wrapper$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__colors$46dart, packages__fl_chart__src__extensions__color_extension$46dart, packages__flutter__src__painting__alignment$46dart, packages__fl_chart__src__extensions__path_extension$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__box_border$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const colors$ = packages__flutter__src__material__colors$46dart.src__material__colors;
  const utils = packages__fl_chart__src__utils__utils$46dart.src__utils__utils;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const paint_extension = packages__fl_chart__src__extensions__paint_extension$46dart.src__extensions__paint_extension;
  const equatable_mixin = packages__equatable__src__equatable_mixin$46dart.src__equatable_mixin;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const implicit_animations = packages__flutter__src__widgets__implicit_animations$46dart.src__widgets__implicit_animations;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const line = packages__fl_chart__src__chart__base__line$46dart.src__chart__base__line;
  const custom_layout = packages__flutter__src__rendering__custom_layout$46dart.src__rendering__custom_layout;
  const list_wrapper = packages__fl_chart__src__utils__list_wrapper$46dart.src__utils__list_wrapper;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const color_extension = packages__fl_chart__src__extensions__color_extension$46dart.src__extensions__color_extension;
  const alignment$ = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const path_extension = packages__fl_chart__src__extensions__path_extension$46dart.src__extensions__path_extension;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  var scatter_chart_painter = Object.create(dart.library);
  var scatter_chart_renderer = Object.create(dart.library);
  var scatter_chart = Object.create(dart.library);
  var radar_chart_painter = Object.create(dart.library);
  var radar_chart_renderer = Object.create(dart.library);
  var radar_chart = Object.create(dart.library);
  var pie_chart_data = Object.create(dart.library);
  var pie_chart_painter = Object.create(dart.library);
  var pie_chart_renderer = Object.create(dart.library);
  var pie_chart = Object.create(dart.library);
  var bar_chart_extensions = Object.create(dart.library);
  var scatter_chart_helper = Object.create(dart.library);
  var scatter_chart_data = Object.create(dart.library);
  var radar_extension = Object.create(dart.library);
  var radar_chart_data = Object.create(dart.library);
  var lerp = Object.create(dart.library);
  var line_chart_renderer = Object.create(dart.library);
  var line_chart = Object.create(dart.library);
  var line_chart_data = Object.create(dart.library);
  var line_chart_helper = Object.create(dart.library);
  var canvas_extension = Object.create(dart.library);
  var line_chart_painter = Object.create(dart.library);
  var axis_chart_painter = Object.create(dart.library);
  var axis_chart_data = Object.create(dart.library);
  var bar_chart_helper = Object.create(dart.library);
  var bar_chart_data = Object.create(dart.library);
  var bar_chart_painter = Object.create(dart.library);
  var base_chart_data = Object.create(dart.library);
  var canvas_wrapper = Object.create(dart.library);
  var base_chart_painter = Object.create(dart.library);
  var bar_chart_renderer = Object.create(dart.library);
  var bar_chart = Object.create(dart.library);
  var fl_chart = Object.create(dart.library);
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $_get = dartx._get;
  var $abs = dartx.abs;
  var $truncate = dartx.truncate;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $sublist = dartx.sublist;
  var $asMap = dartx.asMap;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $forEach = dartx.forEach;
  var $first = dartx.first;
  var $_set = dartx._set;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $toString = dartx.toString;
  var $isFinite = dartx.isFinite;
  var $modulo = dartx['%'];
  var $keys = dartx.keys;
  var $elementAt = dartx.elementAt;
  var $containsKey = dartx.containsKey;
  var $toInt = dartx.toInt;
  var $every = dartx.every;
  var $isNaN = dartx.isNaN;
  var $toDouble = dartx.toDouble;
  var $isInfinite = dartx.isInfinite;
  var $round = dartx.round;
  var $indexOf = dartx.indexOf;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $last = dartx.last;
  var $removeLast = dartx.removeLast;
  var $reversed = dartx.reversed;
  var $addAll = dartx.addAll;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    PaintHolderOfScatterChartData: () => (T.PaintHolderOfScatterChartData = dart.constFn(base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfObjectN: () => (T.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T.ObjectN())))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    LongPressStartDetailsTovoid: () => (T.LongPressStartDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressStartDetails])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    dynamicToScatterChartDataTween: () => (T.dynamicToScatterChartDataTween = dart.constFn(dart.fnType(scatter_chart_data.ScatterChartDataTween, [dart.dynamic])))(),
    PaintHolderOfRadarChartData: () => (T.PaintHolderOfRadarChartData = dart.constFn(base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    intAnddoubleTovoid: () => (T.intAnddoubleTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.double])))(),
    intAndOffsetTovoid: () => (T.intAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [core.int, ui.Offset])))(),
    intAndRadarDataSetsPositionTovoid: () => (T.intAndRadarDataSetsPositionTovoid = dart.constFn(dart.fnType(dart.void, [core.int, radar_chart_painter.RadarDataSetsPosition])))(),
    ListOfRadarDataSetsPosition: () => (T.ListOfRadarDataSetsPosition = dart.constFn(core.List$(radar_chart_painter.RadarDataSetsPosition)))(),
    JSArrayOfOffset: () => (T.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    ListOfOffset: () => (T.ListOfOffset = dart.constFn(core.List$(ui.Offset)))(),
    dynamicToRadarChartDataTween: () => (T.dynamicToRadarChartDataTween = dart.constFn(dart.fnType(radar_chart_data.RadarChartDataTween, [dart.dynamic])))(),
    PieChartSectionDataTobool: () => (T.PieChartSectionDataTobool = dart.constFn(dart.fnType(core.bool, [pie_chart_data.PieChartSectionData])))(),
    PieChartSectionDataTodouble: () => (T.PieChartSectionDataTodouble = dart.constFn(dart.fnType(core.double, [pie_chart_data.PieChartSectionData])))(),
    doubleAnddoubleTodouble: () => (T.doubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double])))(),
    PaintHolderOfPieChartData: () => (T.PaintHolderOfPieChartData = dart.constFn(base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)))(),
    intAndPieChartSectionDataTovoid: () => (T.intAndPieChartSectionDataTovoid = dart.constFn(dart.fnType(dart.void, [core.int, pie_chart_data.PieChartSectionData])))(),
    doubleToOffset: () => (T.doubleToOffset = dart.constFn(dart.fnType(ui.Offset, [core.double])))(),
    PieChartSectionDataAndPieChartSectionDataToPieChartSectionData: () => (T.PieChartSectionDataAndPieChartSectionDataToPieChartSectionData = dart.constFn(dart.fnType(pie_chart_data.PieChartSectionData, [pie_chart_data.PieChartSectionData, pie_chart_data.PieChartSectionData])))(),
    IdentityMapOfint$Offset: () => (T.IdentityMapOfint$Offset = dart.constFn(_js_helper.IdentityMap$(core.int, ui.Offset)))(),
    PieChartSectionDataToWidget: () => (T.PieChartSectionDataToWidget = dart.constFn(dart.fnType(framework.Widget, [pie_chart_data.PieChartSectionData])))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    PieTouchResponseTovoid: () => (T.PieTouchResponseTovoid = dart.constFn(dart.fnType(dart.void, [pie_chart_data.PieTouchResponse])))(),
    dynamicToPieChartDataTween: () => (T.dynamicToPieChartDataTween = dart.constFn(dart.fnType(pie_chart_data.PieChartDataTween, [dart.dynamic])))(),
    intAndColorTovoid: () => (T.intAndColorTovoid = dart.constFn(dart.fnType(dart.void, [core.int, ui.Color])))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    VoidToListOfdouble: () => (T.VoidToListOfdouble = dart.constFn(dart.fnType(T.ListOfdouble(), [])))(),
    ListWrapperOfScatterSpot: () => (T.ListWrapperOfScatterSpot = dart.constFn(list_wrapper.ListWrapper$(scatter_chart_data.ScatterSpot)))(),
    LinkedMapOfListWrapperOfScatterSpot$ScatterChartMinMaxAxisValues: () => (T.LinkedMapOfListWrapperOfScatterSpot$ScatterChartMinMaxAxisValues = dart.constFn(_js_helper.LinkedMap$(T.ListWrapperOfScatterSpot(), scatter_chart_helper.ScatterChartMinMaxAxisValues)))(),
    ScatterTooltipItemN: () => (T.ScatterTooltipItemN = dart.constFn(dart.nullable(scatter_chart_data.ScatterTooltipItem)))(),
    ScatterSpotToScatterTooltipItemN: () => (T.ScatterSpotToScatterTooltipItemN = dart.constFn(dart.fnType(T.ScatterTooltipItemN(), [scatter_chart_data.ScatterSpot])))(),
    RadarDataSetTobool: () => (T.RadarDataSetTobool = dart.constFn(dart.fnType(core.bool, [radar_chart_data.RadarDataSet])))(),
    ColorAndColorAnddoubleToColor: () => (T.ColorAndColorAnddoubleToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color, ui.Color, core.double])))(),
    doubleAnddoubleAnddoubleTodouble: () => (T.doubleAnddoubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double, core.double])))(),
    intAndintAnddoubleToint: () => (T.intAndintAnddoubleToint = dart.constFn(dart.fnType(core.int, [core.int, core.int, core.double])))(),
    FlSpotAndFlSpotAnddoubleToFlSpot: () => (T.FlSpotAndFlSpotAnddoubleToFlSpot = dart.constFn(dart.fnType(axis_chart_data.FlSpot, [axis_chart_data.FlSpot, axis_chart_data.FlSpot, core.double])))(),
    HorizontalLineAndHorizontalLineAnddoubleToHorizontalLine: () => (T.HorizontalLineAndHorizontalLineAnddoubleToHorizontalLine = dart.constFn(dart.fnType(line_chart_data.HorizontalLine, [line_chart_data.HorizontalLine, line_chart_data.HorizontalLine, core.double])))(),
    VerticalLineAndVerticalLineAnddoubleToVerticalLine: () => (T.VerticalLineAndVerticalLineAnddoubleToVerticalLine = dart.constFn(dart.fnType(line_chart_data.VerticalLine, [line_chart_data.VerticalLine, line_chart_data.VerticalLine, core.double])))(),
    HorizontalRangeAnnotationAndHorizontalRangeAnnotationAnddoubleToHorizontalRangeAnnotation: () => (T.HorizontalRangeAnnotationAndHorizontalRangeAnnotationAnddoubleToHorizontalRangeAnnotation = dart.constFn(dart.fnType(axis_chart_data.HorizontalRangeAnnotation, [axis_chart_data.HorizontalRangeAnnotation, axis_chart_data.HorizontalRangeAnnotation, core.double])))(),
    VerticalRangeAnnotationAndVerticalRangeAnnotationAnddoubleToVerticalRangeAnnotation: () => (T.VerticalRangeAnnotationAndVerticalRangeAnnotationAnddoubleToVerticalRangeAnnotation = dart.constFn(dart.fnType(axis_chart_data.VerticalRangeAnnotation, [axis_chart_data.VerticalRangeAnnotation, axis_chart_data.VerticalRangeAnnotation, core.double])))(),
    LineChartBarDataAndLineChartBarDataAnddoubleToLineChartBarData: () => (T.LineChartBarDataAndLineChartBarDataAnddoubleToLineChartBarData = dart.constFn(dart.fnType(line_chart_data.LineChartBarData, [line_chart_data.LineChartBarData, line_chart_data.LineChartBarData, core.double])))(),
    BetweenBarsDataAndBetweenBarsDataAnddoubleToBetweenBarsData: () => (T.BetweenBarsDataAndBetweenBarsDataAnddoubleToBetweenBarsData = dart.constFn(dart.fnType(line_chart_data.BetweenBarsData, [line_chart_data.BetweenBarsData, line_chart_data.BetweenBarsData, core.double])))(),
    BarChartGroupDataAndBarChartGroupDataAnddoubleToBarChartGroupData: () => (T.BarChartGroupDataAndBarChartGroupDataAnddoubleToBarChartGroupData = dart.constFn(dart.fnType(bar_chart_data.BarChartGroupData, [bar_chart_data.BarChartGroupData, bar_chart_data.BarChartGroupData, core.double])))(),
    BarChartRodDataAndBarChartRodDataAnddoubleToBarChartRodData: () => (T.BarChartRodDataAndBarChartRodDataAnddoubleToBarChartRodData = dart.constFn(dart.fnType(bar_chart_data.BarChartRodData, [bar_chart_data.BarChartRodData, bar_chart_data.BarChartRodData, core.double])))(),
    PieChartSectionDataAndPieChartSectionDataAnddoubleToPieChartSectionData: () => (T.PieChartSectionDataAndPieChartSectionDataAnddoubleToPieChartSectionData = dart.constFn(dart.fnType(pie_chart_data.PieChartSectionData, [pie_chart_data.PieChartSectionData, pie_chart_data.PieChartSectionData, core.double])))(),
    ScatterSpotAndScatterSpotAnddoubleToScatterSpot: () => (T.ScatterSpotAndScatterSpotAnddoubleToScatterSpot = dart.constFn(dart.fnType(scatter_chart_data.ScatterSpot, [scatter_chart_data.ScatterSpot, scatter_chart_data.ScatterSpot, core.double])))(),
    BarChartRodStackItemAndBarChartRodStackItemAnddoubleToBarChartRodStackItem: () => (T.BarChartRodStackItemAndBarChartRodStackItemAnddoubleToBarChartRodStackItem = dart.constFn(dart.fnType(bar_chart_data.BarChartRodStackItem, [bar_chart_data.BarChartRodStackItem, bar_chart_data.BarChartRodStackItem, core.double])))(),
    RadarDataSetAndRadarDataSetAnddoubleToRadarDataSet: () => (T.RadarDataSetAndRadarDataSetAnddoubleToRadarDataSet = dart.constFn(dart.fnType(radar_chart_data.RadarDataSet, [radar_chart_data.RadarDataSet, radar_chart_data.RadarDataSet, core.double])))(),
    RadarEntryAndRadarEntryAnddoubleToRadarEntry: () => (T.RadarEntryAndRadarEntryAnddoubleToRadarEntry = dart.constFn(dart.fnType(radar_chart_data.RadarEntry, [radar_chart_data.RadarEntry, radar_chart_data.RadarEntry, core.double])))(),
    PaintHolderOfLineChartData: () => (T.PaintHolderOfLineChartData = dart.constFn(base_chart_painter.PaintHolder$(line_chart_data.LineChartData)))(),
    JSArrayOfShowingTooltipIndicators: () => (T.JSArrayOfShowingTooltipIndicators = dart.constFn(_interceptors.JSArray$(line_chart_data.ShowingTooltipIndicators)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    IdentityMapOfint$ListOfint: () => (T.IdentityMapOfint$ListOfint = dart.constFn(_js_helper.IdentityMap$(core.int, T.ListOfint())))(),
    LineChartBarDataToLineChartBarData: () => (T.LineChartBarDataToLineChartBarData = dart.constFn(dart.fnType(line_chart_data.LineChartBarData, [line_chart_data.LineChartBarData])))(),
    ListOfLineBarSpot: () => (T.ListOfLineBarSpot = dart.constFn(core.List$(line_chart_data.LineBarSpot)))(),
    LineBarSpotAndLineBarSpotToint: () => (T.LineBarSpotAndLineBarSpotToint = dart.constFn(dart.fnType(core.int, [line_chart_data.LineBarSpot, line_chart_data.LineBarSpot])))(),
    dynamicToLineChartDataTween: () => (T.dynamicToLineChartDataTween = dart.constFn(dart.fnType(line_chart_data.LineChartDataTween, [dart.dynamic])))(),
    JSArrayOfColor: () => (T.JSArrayOfColor = dart.constFn(_interceptors.JSArray$(ui.Color)))(),
    FlSpotTobool: () => (T.FlSpotTobool = dart.constFn(dart.fnType(core.bool, [axis_chart_data.FlSpot])))(),
    FlSpotAndLineChartBarDataTobool: () => (T.FlSpotAndLineChartBarDataTobool = dart.constFn(dart.fnType(core.bool, [axis_chart_data.FlSpot, line_chart_data.LineChartBarData])))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter: () => (T.FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter = dart.constFn(dart.fnType(line_chart_data.FlDotPainter, [axis_chart_data.FlSpot, core.double, line_chart_data.LineChartBarData, core.int], {size: T.doubleN()}, {})))(),
    HorizontalLineToString: () => (T.HorizontalLineToString = dart.constFn(dart.fnType(core.String, [line_chart_data.HorizontalLine])))(),
    VerticalLineToString: () => (T.VerticalLineToString = dart.constFn(dart.fnType(core.String, [line_chart_data.VerticalLine])))(),
    ListOfTouchedSpotIndicatorData: () => (T.ListOfTouchedSpotIndicatorData = dart.constFn(core.List$(line_chart_data.TouchedSpotIndicatorData)))(),
    LineChartBarDataAndListOfintToListOfTouchedSpotIndicatorData: () => (T.LineChartBarDataAndListOfintToListOfTouchedSpotIndicatorData = dart.constFn(dart.fnType(T.ListOfTouchedSpotIndicatorData(), [line_chart_data.LineChartBarData, T.ListOfint()])))(),
    LineChartBarDataAndintTodouble: () => (T.LineChartBarDataAndintTodouble = dart.constFn(dart.fnType(core.double, [line_chart_data.LineChartBarData, core.int])))(),
    ListOfLineTooltipItem: () => (T.ListOfLineTooltipItem = dart.constFn(core.List$(line_chart_data.LineTooltipItem)))(),
    ListOfLineBarSpotToListOfLineTooltipItem: () => (T.ListOfLineBarSpotToListOfLineTooltipItem = dart.constFn(dart.fnType(T.ListOfLineTooltipItem(), [T.ListOfLineBarSpot()])))(),
    FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter$1: () => (T.FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter$1 = dart.constFn(dart.fnType(line_chart_data.FlDotPainter, [axis_chart_data.FlSpot, core.double, line_chart_data.LineChartBarData, core.int])))(),
    intToTouchedSpotIndicatorData: () => (T.intToTouchedSpotIndicatorData = dart.constFn(dart.fnType(line_chart_data.TouchedSpotIndicatorData, [core.int])))(),
    LineBarSpotToLineTooltipItem: () => (T.LineBarSpotToLineTooltipItem = dart.constFn(dart.fnType(line_chart_data.LineTooltipItem, [line_chart_data.LineBarSpot])))(),
    ListWrapperOfLineChartBarData: () => (T.ListWrapperOfLineChartBarData = dart.constFn(list_wrapper.ListWrapper$(line_chart_data.LineChartBarData)))(),
    LinkedMapOfListWrapperOfLineChartBarData$LineChartMinMaxAxisValues: () => (T.LinkedMapOfListWrapperOfLineChartBarData$LineChartMinMaxAxisValues = dart.constFn(_js_helper.LinkedMap$(T.ListWrapperOfLineChartBarData(), line_chart_helper.LineChartMinMaxAxisValues)))(),
    ListNOfint: () => (T.ListNOfint = dart.constFn(dart.nullable(T.ListOfint())))(),
    OffsetAndOffsetAndPaint__Tovoid: () => (T.OffsetAndOffsetAndPaint__Tovoid = dart.constFn(dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint, T.ListNOfint()])))(),
    JSArrayOfFlSpot: () => (T.JSArrayOfFlSpot = dart.constFn(_interceptors.JSArray$(axis_chart_data.FlSpot)))(),
    ListOfFlSpot: () => (T.ListOfFlSpot = dart.constFn(core.List$(axis_chart_data.FlSpot)))(),
    JSArrayOfListOfFlSpot: () => (T.JSArrayOfListOfFlSpot = dart.constFn(_interceptors.JSArray$(T.ListOfFlSpot())))(),
    VoidToFlDotPainter: () => (T.VoidToFlDotPainter = dart.constFn(dart.fnType(line_chart_data.FlDotPainter, [])))(),
    FlDotPainterTodynamic: () => (T.FlDotPainterTodynamic = dart.constFn(dart.fnType(dart.dynamic, [line_chart_data.FlDotPainter])))(),
    JSArrayOfTextPainter: () => (T.JSArrayOfTextPainter = dart.constFn(_interceptors.JSArray$(text_painter.TextPainter)))(),
    JSArrayOfLineBarSpot: () => (T.JSArrayOfLineBarSpot = dart.constFn(_interceptors.JSArray$(line_chart_data.LineBarSpot)))(),
    doubleToString: () => (T.doubleToString = dart.constFn(dart.fnType(core.String, [core.double])))(),
    doubleToTextStyle: () => (T.doubleToTextStyle = dart.constFn(dart.fnType(text_style.TextStyle, [core.double])))(),
    doubleAnddoubleAndSideTitles__Tobool: () => (T.doubleAnddoubleAndSideTitles__Tobool = dart.constFn(dart.fnType(core.bool, [core.double, core.double, axis_chart_data.SideTitles, core.double, core.double])))(),
    doubleToFlLine: () => (T.doubleToFlLine = dart.constFn(dart.fnType(axis_chart_data.FlLine, [core.double])))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))(),
    ListWrapperOfBarChartGroupData: () => (T.ListWrapperOfBarChartGroupData = dart.constFn(list_wrapper.ListWrapper$(bar_chart_data.BarChartGroupData)))(),
    LinkedMapOfListWrapperOfBarChartGroupData$BarChartMinMaxAxisValues: () => (T.LinkedMapOfListWrapperOfBarChartGroupData$BarChartMinMaxAxisValues = dart.constFn(_js_helper.LinkedMap$(T.ListWrapperOfBarChartGroupData(), bar_chart_helper.BarChartMinMaxAxisValues)))(),
    JSArrayOfBarChartGroupData: () => (T.JSArrayOfBarChartGroupData = dart.constFn(_interceptors.JSArray$(bar_chart_data.BarChartGroupData)))(),
    BarChartRodDataTodouble: () => (T.BarChartRodDataTodouble = dart.constFn(dart.fnType(core.double, [bar_chart_data.BarChartRodData])))(),
    BarTooltipItemN: () => (T.BarTooltipItemN = dart.constFn(dart.nullable(bar_chart_data.BarTooltipItem)))(),
    BarChartGroupDataAndintAndBarChartRodData__ToBarTooltipItemN: () => (T.BarChartGroupDataAndintAndBarChartRodData__ToBarTooltipItemN = dart.constFn(dart.fnType(T.BarTooltipItemN(), [bar_chart_data.BarChartGroupData, core.int, bar_chart_data.BarChartRodData, core.int])))(),
    PaintHolderOfBarChartData: () => (T.PaintHolderOfBarChartData = dart.constFn(base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)))(),
    intAndBarChartGroupDataTovoid: () => (T.intAndBarChartGroupDataTovoid = dart.constFn(dart.fnType(dart.void, [core.int, bar_chart_data.BarChartGroupData])))(),
    BarChartGroupDataTodouble: () => (T.BarChartGroupDataTodouble = dart.constFn(dart.fnType(core.double, [bar_chart_data.BarChartGroupData])))(),
    JSArrayOf_GroupBarsPosition: () => (T.JSArrayOf_GroupBarsPosition = dart.constFn(_interceptors.JSArray$(bar_chart_painter._GroupBarsPosition)))(),
    intAndBarChartRodDataTovoid: () => (T.intAndBarChartRodDataTovoid = dart.constFn(dart.fnType(dart.void, [core.int, bar_chart_data.BarChartRodData])))(),
    dynamicToBarChartDataTween: () => (T.dynamicToBarChartDataTween = dart.constFn(dart.fnType(bar_chart_data.BarChartDataTween, [dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], scatter_chart_data.ScatterSpot);
    },
    get C1() {
      return C[1] = dart.constList([], core.int);
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 150000
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 9,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "targetData",
        [_Location_column]: 9,
        [_Location_line]: 46,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "touchCallback",
        [_Location_column]: 9,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], widget_inspector._Location);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart.dart"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], widget_inspector._Location);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 42,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart.dart"
      });
    },
    get C13() {
      return C[13] = dart.constList([], radar_chart_data.RadarDataSet);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.solid",
        index: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[15] || CT.C15,
        [BorderSide_width]: 2,
        [BorderSide_color]: C[16] || CT.C16
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 12,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[16] || CT.C16,
        [TextStyle_inherit]: true
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 10,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[16] || CT.C16,
        [TextStyle_inherit]: true
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 42,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart.dart"
      });
    },
    get C21() {
      return C[21] = dart.constList([], pie_chart_data.PieChartSectionData);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 6
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[23] || CT.C23,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[24] || CT.C24,
        [TextStyle_inherit]: true
      });
    },
    get C26() {
      return C[26] = dart.constList([], widget_inspector._Location);
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 38,
        [_Location_line]: 201,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart_data.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 9,
        [_Location_line]: 56,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "targetData",
        [_Location_column]: 9,
        [_Location_line]: 57,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "touchCallback",
        [_Location_column]: 9,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.constList([C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], widget_inspector._Location);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[29] || CT.C29,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 55,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 54,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 53,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 16
      });
    },
    get C38() {
      return C[38] = dart.fn(scatter_chart_data.defaultScatterTooltipItem, T.ScatterSpotToScatterTooltipItemN());
    },
    get C39() {
      return C[39] = dart.constList([], radar_chart_data.RadarEntry);
    },
    get C40() {
      return C[40] = dart.fn(lerp.lerpColor, T.ColorAndColorAnddoubleToColor());
    },
    get C41() {
      return C[41] = dart.fn(lerp._lerpNonNullDouble, T.doubleAnddoubleAnddoubleTodouble());
    },
    get C42() {
      return C[42] = dart.fn(lerp.lerpInt, T.intAndintAnddoubleToint());
    },
    get C43() {
      return C[43] = dart.fn(axis_chart_data.FlSpot.lerp, T.FlSpotAndFlSpotAnddoubleToFlSpot());
    },
    get C44() {
      return C[44] = dart.fn(line_chart_data.HorizontalLine.lerp, T.HorizontalLineAndHorizontalLineAnddoubleToHorizontalLine());
    },
    get C45() {
      return C[45] = dart.fn(line_chart_data.VerticalLine.lerp, T.VerticalLineAndVerticalLineAnddoubleToVerticalLine());
    },
    get C46() {
      return C[46] = dart.fn(axis_chart_data.HorizontalRangeAnnotation.lerp, T.HorizontalRangeAnnotationAndHorizontalRangeAnnotationAnddoubleToHorizontalRangeAnnotation());
    },
    get C47() {
      return C[47] = dart.fn(axis_chart_data.VerticalRangeAnnotation.lerp, T.VerticalRangeAnnotationAndVerticalRangeAnnotationAnddoubleToVerticalRangeAnnotation());
    },
    get C48() {
      return C[48] = dart.fn(line_chart_data.LineChartBarData.lerp, T.LineChartBarDataAndLineChartBarDataAnddoubleToLineChartBarData());
    },
    get C49() {
      return C[49] = dart.fn(line_chart_data.BetweenBarsData.lerp, T.BetweenBarsDataAndBetweenBarsDataAnddoubleToBetweenBarsData());
    },
    get C50() {
      return C[50] = dart.fn(bar_chart_data.BarChartGroupData.lerp, T.BarChartGroupDataAndBarChartGroupDataAnddoubleToBarChartGroupData());
    },
    get C51() {
      return C[51] = dart.fn(bar_chart_data.BarChartRodData.lerp, T.BarChartRodDataAndBarChartRodDataAnddoubleToBarChartRodData());
    },
    get C52() {
      return C[52] = dart.fn(pie_chart_data.PieChartSectionData.lerp, T.PieChartSectionDataAndPieChartSectionDataAnddoubleToPieChartSectionData());
    },
    get C53() {
      return C[53] = dart.fn(scatter_chart_data.ScatterSpot.lerp, T.ScatterSpotAndScatterSpotAnddoubleToScatterSpot());
    },
    get C54() {
      return C[54] = dart.fn(bar_chart_data.BarChartRodStackItem.lerp, T.BarChartRodStackItemAndBarChartRodStackItemAnddoubleToBarChartRodStackItem());
    },
    get C55() {
      return C[55] = dart.fn(radar_chart_data.RadarDataSet.lerp, T.RadarDataSetAndRadarDataSetAnddoubleToRadarDataSet());
    },
    get C56() {
      return C[56] = dart.fn(radar_chart_data.RadarEntry.lerp, T.RadarEntryAndRadarEntryAnddoubleToRadarEntry());
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 9,
        [_Location_line]: 48,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "targetData",
        [_Location_column]: 9,
        [_Location_line]: 49,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "touchCallback",
        [_Location_column]: 9,
        [_Location_line]: 50,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.constList([C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61], widget_inspector._Location);
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[58] || CT.C58,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 47,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 46,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65], widget_inspector._Location);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 45,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart.dart"
      });
    },
    get C66() {
      return C[66] = dart.constList([], line_chart_data.LineChartBarData);
    },
    get C67() {
      return C[67] = dart.constList([], line_chart_data.BetweenBarsData);
    },
    get C68() {
      return C[68] = dart.constList([], line_chart_data.ShowingTooltipIndicators);
    },
    get C69() {
      return C[69] = dart.constList([], axis_chart_data.FlSpot);
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294937216.0
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294922834.0
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294907716.0
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292149248.0
      });
    },
    get C72() {
      return C[72] = dart.constMap(core.int, ui.Color, [100, C[73] || CT.C73, 200, C[74] || CT.C74, 400, C[75] || CT.C75, 700, C[76] || CT.C76]);
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: colors$.MaterialAccentColor.prototype,
        [Color_value]: 4294922834.0,
        [ColorSwatch__swatch]: C[72] || CT.C72
      });
    },
    get C70() {
      return C[70] = dart.constList([C[71] || CT.C71], ui.Color);
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 1
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: ui.Shadow.prototype,
        [Shadow_blurRadius]: 0,
        [Shadow_offset]: C[77] || CT.C77,
        [Shadow_color]: C[27] || CT.C27
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293718001.0
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291811548.0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289773253.0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287669422.0
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286091420.0
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284513675.0
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283723386.0
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282735204.0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281812815.0
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280693304.0
      });
    },
    get C82() {
      return C[82] = dart.constMap(core.int, ui.Color, [50, C[83] || CT.C83, 100, C[84] || CT.C84, 200, C[85] || CT.C85, 300, C[86] || CT.C86, 400, C[87] || CT.C87, 500, C[88] || CT.C88, 600, C[89] || CT.C89, 700, C[90] || CT.C90, 800, C[91] || CT.C91, 900, C[92] || CT.C92]);
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: colors$.MaterialColor.prototype,
        [Color_value]: 4284513675.0,
        [ColorSwatch__swatch]: C[82] || CT.C82
      });
    },
    get C80() {
      return C[80] = dart.constList([C[81] || CT.C81], ui.Color);
    },
    get C93() {
      return C[93] = dart.fn(line_chart_data.showAllSpotsBelowLine, T.FlSpotTobool());
    },
    get C94() {
      return C[94] = dart.fn(line_chart_data.showAllDots, T.FlSpotAndLineChartBarDataTobool());
    },
    get C95() {
      return C[95] = dart.fn(line_chart_data._defaultGetDotPainter, T.FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter());
    },
    get C96() {
      return C[96] = dart.fn(line_chart_data.HorizontalLineLabel.defaultLineLabelResolver, T.HorizontalLineToString());
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 6,
        [EdgeInsets_right]: 6,
        [EdgeInsets_top]: 6,
        [EdgeInsets_left]: 6
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[23] || CT.C23,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[16] || CT.C16,
        [TextStyle_inherit]: true
      });
    },
    get C99() {
      return C[99] = dart.fn(line_chart_data.VerticalLineLabel.defaultLineLabelResolver, T.VerticalLineToString());
    },
    get C100() {
      return C[100] = dart.constList([], line_chart_data.HorizontalLine);
    },
    get C101() {
      return C[101] = dart.constList([], line_chart_data.VerticalLine);
    },
    get C102() {
      return C[102] = dart.fn(line_chart_data.defaultTouchedIndicators, T.LineChartBarDataAndListOfintToListOfTouchedSpotIndicatorData());
    },
    get C103() {
      return C[103] = dart.fn(line_chart_data.defaultGetTouchLineStart, T.LineChartBarDataAndintTodouble());
    },
    get C104() {
      return C[104] = dart.fn(line_chart_data.defaultGetTouchLineEnd, T.LineChartBarDataAndintTodouble());
    },
    get C105() {
      return C[105] = dart.fn(line_chart_data.defaultLineTooltipItem, T.ListOfLineBarSpotToListOfLineTooltipItem());
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.center",
        index: 2
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.ltr",
        index: 1
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 11,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[16] || CT.C16,
        [TextStyle_inherit]: true
      });
    },
    get C109() {
      return C[109] = dart.fn(base_chart_data.defaultGetTitle, T.doubleToString());
    },
    get C110() {
      return C[110] = dart.fn(base_chart_data.defaultGetTitleTextStyle, T.doubleToTextStyle());
    },
    get C111() {
      return C[111] = dart.fn(axis_chart_data.defaultCheckToShowTitle, T.doubleAnddoubleAndSideTitles__Tobool());
    },
    get C112() {
      return C[112] = dart.fn(axis_chart_data.defaultGridLine, T.doubleToFlLine());
    },
    get C113() {
      return C[113] = dart.fn(axis_chart_data.showAllGrids, T.doubleTobool());
    },
    get C114() {
      return C[114] = dart.constList([], axis_chart_data.HorizontalRangeAnnotation);
    },
    get C115() {
      return C[115] = dart.constList([], axis_chart_data.VerticalRangeAnnotation);
    },
    get C116() {
      return C[116] = dart.constList([], bar_chart_data.BarChartGroupData);
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.start",
        index: 0
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.end",
        index: 1
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.center",
        index: 2
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.spaceEvenly",
        index: 3
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.spaceAround",
        index: 4
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$0]: "BarChartAlignment.spaceBetween",
        index: 5
      });
    },
    get C123() {
      return C[123] = dart.constList([C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119, C[120] || CT.C120, C[121] || CT.C121, C[122] || CT.C122], bar_chart_data.BarChartAlignment);
    },
    get C124() {
      return C[124] = dart.constList([], bar_chart_data.BarChartRodData);
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0.5
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0.5
      });
    },
    get C127() {
      return C[127] = dart.constList([], bar_chart_data.BarChartRodStackItem);
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 4,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: bar_chart_data.TooltipDirection.prototype,
        [_name$0]: "TooltipDirection.auto",
        index: 0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: bar_chart_data.TooltipDirection.prototype,
        [_name$0]: "TooltipDirection.top",
        index: 1
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: bar_chart_data.TooltipDirection.prototype,
        [_name$0]: "TooltipDirection.bottom",
        index: 2
      });
    },
    get C132() {
      return C[132] = dart.constList([C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131], bar_chart_data.TooltipDirection);
    },
    get C133() {
      return C[133] = dart.fn(bar_chart_data.defaultBarTooltipItem, T.BarChartGroupDataAndintAndBarChartRodData__ToBarTooltipItemN());
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$]: "ClipOp.intersect",
        index: 1
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 9,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "targetData",
        [_Location_column]: 9,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "touchCallback",
        [_Location_column]: 9,
        [_Location_line]: 46,
        [_Location_file]: null
      });
    },
    get C136() {
      return C[136] = dart.constList([C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139], widget_inspector._Location);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[136] || CT.C136,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 43,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart.dart"
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C141() {
      return C[141] = dart.constList([C[142] || CT.C142, C[143] || CT.C143], widget_inspector._Location);
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[141] || CT.C141,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 41,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart.dart"
      });
    }
  }, false);
  var C = Array(144).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/base/axis_chart/axis_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/base/base_chart/base_chart_painter.dart",
    "package:fl_chart/src/chart/base/base_chart/base_chart_painter.dart",
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart_data.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/base/axis_chart/axis_chart_data.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/base/base_chart/base_chart_data.dart",
    "package:fl_chart/src/chart/base/base_chart/base_chart_data.dart",
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_data.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_data.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart_renderer.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_renderer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart_data.dart",
    "package:fl_chart/src/chart/radar_chart/radar_chart_data.dart",
    "package:fl_chart/src/chart/radar_chart/radar_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart_renderer.dart",
    "package:fl_chart/src/chart/radar_chart/radar_chart_renderer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_chart.dart",
    "package:fl_chart/src/chart/radar_chart/radar_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart_data.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart_data.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart_painter.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart_renderer.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart_renderer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/pie_chart/pie_chart.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart_extensions.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/scatter_chart/scatter_chart_helper.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_helper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/radar_chart/radar_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/utils/lerp.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart_renderer.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_renderer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart.dart",
    "package:fl_chart/src/chart/line_chart/line_chart.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart_data.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_data.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart_helper.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_helper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/extensions/canvas_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/line_chart/line_chart_painter.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart_helper.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_helper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart_data.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_data.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart_painter.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_painter.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/utils/canvas_wrapper.dart",
    "package:fl_chart/src/utils/canvas_wrapper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart_renderer.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_renderer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.36.1/lib/src/chart/bar_chart/bar_chart.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart.dart"
  ];
  var __ScatterChartPainter__spotsPaint = dart.privateName(scatter_chart_painter, "_#ScatterChartPainter#_spotsPaint");
  var __ScatterChartPainter__bgTouchTooltipPaint = dart.privateName(scatter_chart_painter, "_#ScatterChartPainter#_bgTouchTooltipPaint");
  var _spotsPaint = dart.privateName(scatter_chart_painter, "_spotsPaint");
  var _bgTouchTooltipPaint = dart.privateName(scatter_chart_painter, "_bgTouchTooltipPaint");
  var _drawTitles = dart.privateName(scatter_chart_painter, "_drawTitles");
  var _drawSpots = dart.privateName(scatter_chart_painter, "_drawSpots");
  var _drawTouchTooltip = dart.privateName(scatter_chart_painter, "_drawTouchTooltip");
  var __AxisChartPainter__gridPaint = dart.privateName(axis_chart_painter, "_#AxisChartPainter#_gridPaint");
  var __AxisChartPainter__backgroundPaint = dart.privateName(axis_chart_painter, "_#AxisChartPainter#_backgroundPaint");
  var __AxisChartPainter__rangeAnnotationPaint = dart.privateName(axis_chart_painter, "_#AxisChartPainter#_rangeAnnotationPaint");
  var _gridPaint = dart.privateName(axis_chart_painter, "_gridPaint");
  var _backgroundPaint = dart.privateName(axis_chart_painter, "_backgroundPaint");
  var _rangeAnnotationPaint = dart.privateName(axis_chart_painter, "_rangeAnnotationPaint");
  var _drawBackground = dart.privateName(axis_chart_painter, "_drawBackground");
  var _drawRangeAnnotation = dart.privateName(axis_chart_painter, "_drawRangeAnnotation");
  var _drawGrid = dart.privateName(axis_chart_painter, "_drawGrid");
  var __BaseChartPainter__borderPaint = dart.privateName(base_chart_painter, "_#BaseChartPainter#_borderPaint");
  var _borderPaint = dart.privateName(base_chart_painter, "_borderPaint");
  var _drawViewBorder = dart.privateName(base_chart_painter, "_drawViewBorder");
  const _is_BaseChartPainter_default = Symbol('_is_BaseChartPainter_default');
  base_chart_painter.BaseChartPainter$ = dart.generic(D => {
    var PaintHolderOfD = () => (PaintHolderOfD = dart.constFn(base_chart_painter.PaintHolder$(D)))();
    class BaseChartPainter extends core.Object {
      get [_borderPaint]() {
        let t5;
        t5 = this[__BaseChartPainter__borderPaint];
        return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_borderPaint")) : t5;
      }
      set [_borderPaint](t5) {
        if (t5 == null) dart.nullFailed(I[2], 10, 14, "null");
        this[__BaseChartPainter__borderPaint] = t5;
      }
      paint(canvasWrapper, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[2], 18, 28, "canvasWrapper");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 18, 58, "holder");
        this[_drawViewBorder](canvasWrapper, holder.data.borderData, holder);
      }
      [_drawViewBorder](canvasWrapper, borderData, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[2], 23, 19, "canvasWrapper");
        if (borderData == null) dart.nullFailed(I[2], 24, 18, "borderData");
        if (holder == null) dart.nullFailed(I[2], 25, 20, "holder");
        if (!dart.test(borderData.show)) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
        let topLeft = new ui.Offset.new(this.getLeftOffsetDrawSize(holder), this.getTopOffsetDrawSize(holder));
        let topRight = new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width), this.getTopOffsetDrawSize(holder));
        let bottomLeft = new ui.Offset.new(this.getLeftOffsetDrawSize(holder), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height));
        let bottomRight = new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height));
        let topBorder = borderData.border.top;
        if (topBorder.width !== 0.0) {
          this[_borderPaint].color = topBorder.color;
          this[_borderPaint].strokeWidth = topBorder.width;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_borderPaint]);
          canvasWrapper.drawLine(topLeft, topRight, this[_borderPaint]);
        }
        let rightBorder = borderData.border.right;
        if (rightBorder.width !== 0.0) {
          this[_borderPaint].color = rightBorder.color;
          this[_borderPaint].strokeWidth = rightBorder.width;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_borderPaint]);
          canvasWrapper.drawLine(topRight, bottomRight, this[_borderPaint]);
        }
        let bottomBorder = borderData.border.bottom;
        if (bottomBorder.width !== 0.0) {
          this[_borderPaint].color = bottomBorder.color;
          this[_borderPaint].strokeWidth = bottomBorder.width;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_borderPaint]);
          canvasWrapper.drawLine(bottomRight, bottomLeft, this[_borderPaint]);
        }
        let leftBorder = borderData.border.left;
        if (leftBorder.width !== 0.0) {
          this[_borderPaint].color = leftBorder.color;
          this[_borderPaint].strokeWidth = leftBorder.width;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_borderPaint]);
          canvasWrapper.drawLine(bottomLeft, topLeft, this[_borderPaint]);
        }
      }
      getChartUsableDrawSize(viewSize, holder) {
        if (viewSize == null) dart.nullFailed(I[2], 84, 36, "viewSize");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 84, 61, "holder");
        let usableWidth = dart.notNull(viewSize.width) - dart.notNull(this.getExtraNeededHorizontalSpace(holder));
        let usableHeight = dart.notNull(viewSize.height) - dart.notNull(this.getExtraNeededVerticalSpace(holder));
        return new ui.Size.new(usableWidth, usableHeight);
      }
      getExtraNeededHorizontalSpace(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 92, 55, "holder");
        return 0.0;
      }
      getExtraNeededVerticalSpace(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 96, 53, "holder");
        return 0.0;
      }
      getLeftOffsetDrawSize(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 101, 47, "holder");
        return 0.0;
      }
      getTopOffsetDrawSize(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[2], 106, 46, "holder");
        return 0.0;
      }
    }
    (BaseChartPainter.new = function() {
      let t5;
      this[__BaseChartPainter__borderPaint] = null;
      this[_borderPaint] = (t5 = ui.Paint.new(), (() => {
        t5.style = ui.PaintingStyle.stroke;
        return t5;
      })());
    }).prototype = BaseChartPainter.prototype;
    dart.addTypeTests(BaseChartPainter);
    BaseChartPainter.prototype[_is_BaseChartPainter_default] = true;
    dart.addTypeCaches(BaseChartPainter);
    dart.setMethodSignature(BaseChartPainter, () => ({
      __proto__: dart.getMethods(BaseChartPainter.__proto__),
      paint: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, dart.nullable(core.Object)]),
      [_drawViewBorder]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_data.FlBorderData, base_chart_painter.PaintHolder$(D)]),
      getChartUsableDrawSize: dart.fnType(ui.Size, [ui.Size, dart.nullable(core.Object)]),
      getExtraNeededHorizontalSpace: dart.fnType(core.double, [dart.nullable(core.Object)]),
      getExtraNeededVerticalSpace: dart.fnType(core.double, [dart.nullable(core.Object)]),
      getLeftOffsetDrawSize: dart.fnType(core.double, [dart.nullable(core.Object)]),
      getTopOffsetDrawSize: dart.fnType(core.double, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BaseChartPainter, () => ({
      __proto__: dart.getGetters(BaseChartPainter.__proto__),
      [_borderPaint]: ui.Paint
    }));
    dart.setSetterSignature(BaseChartPainter, () => ({
      __proto__: dart.getSetters(BaseChartPainter.__proto__),
      [_borderPaint]: ui.Paint
    }));
    dart.setLibraryUri(BaseChartPainter, I[3]);
    dart.setFieldSignature(BaseChartPainter, () => ({
      __proto__: dart.getFields(BaseChartPainter.__proto__),
      [__BaseChartPainter__borderPaint]: dart.fieldType(dart.nullable(ui.Paint))
    }));
    return BaseChartPainter;
  });
  base_chart_painter.BaseChartPainter = base_chart_painter.BaseChartPainter$();
  dart.addTypeTests(base_chart_painter.BaseChartPainter, _is_BaseChartPainter_default);
  const _is_AxisChartPainter_default = Symbol('_is_AxisChartPainter_default');
  axis_chart_painter.AxisChartPainter$ = dart.generic(D => {
    var PaintHolderOfD = () => (PaintHolderOfD = dart.constFn(base_chart_painter.PaintHolder$(D)))();
    class AxisChartPainter extends base_chart_painter.BaseChartPainter$(D) {
      get [_gridPaint]() {
        let t2;
        t2 = this[__AxisChartPainter__gridPaint];
        return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_gridPaint")) : t2;
      }
      set [_gridPaint](t2) {
        if (t2 == null) dart.nullFailed(I[1], 20, 14, "null");
        this[__AxisChartPainter__gridPaint] = t2;
      }
      get [_backgroundPaint]() {
        let t3;
        t3 = this[__AxisChartPainter__backgroundPaint];
        return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_backgroundPaint")) : t3;
      }
      set [_backgroundPaint](t3) {
        if (t3 == null) dart.nullFailed(I[1], 20, 26, "null");
        this[__AxisChartPainter__backgroundPaint] = t3;
      }
      get [_rangeAnnotationPaint]() {
        let t4;
        t4 = this[__AxisChartPainter__rangeAnnotationPaint];
        return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_rangeAnnotationPaint")) : t4;
      }
      set [_rangeAnnotationPaint](t4) {
        if (t4 == null) dart.nullFailed(I[1], 23, 14, "null");
        this[__AxisChartPainter__rangeAnnotationPaint] = t4;
      }
      paint(canvasWrapper, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[1], 35, 28, "canvasWrapper");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 35, 58, "holder");
        super.paint(canvasWrapper, holder);
        this[_drawBackground](canvasWrapper, holder);
        this[_drawRangeAnnotation](canvasWrapper, holder);
        this[_drawGrid](canvasWrapper, holder);
      }
      drawAxisTitles(canvasWrapper, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[1], 46, 37, "canvasWrapper");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 46, 67, "holder");
        let data = holder.data;
        if (!dart.test(data.axisTitleData.show)) {
          return;
        }
        let viewSize = this.getChartUsableDrawSize(canvasWrapper.size, holder);
        let axisTitles = data.axisTitleData;
        let leftTitle = axisTitles.leftTitle;
        if (dart.test(leftTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: leftTitle.textStyle, text: leftTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: leftTitle.textAlign, textDirection: leftTitle.textDirection, textScaleFactor: holder.textScale});
          tp.layout({minWidth: viewSize.height});
          canvasWrapper.save();
          canvasWrapper.rotate(-3.141592653589793 * 0.5);
          canvasWrapper.drawText(tp, new ui.Offset.new(-dart.notNull(viewSize.height) - dart.notNull(this.getTopOffsetDrawSize(holder)), dart.notNull(leftTitle.reservedSize) - dart.notNull(tp.height)));
          canvasWrapper.restore();
        }
        let topTitle = axisTitles.topTitle;
        if (dart.test(topTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: topTitle.textStyle, text: topTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: topTitle.textAlign, textDirection: topTitle.textDirection, textScaleFactor: holder.textScale});
          tp.layout({minWidth: viewSize.width});
          canvasWrapper.drawText(tp, new ui.Offset.new(this.getLeftOffsetDrawSize(holder), dart.notNull(topTitle.reservedSize) - dart.notNull(tp.height)));
        }
        let rightTitle = axisTitles.rightTitle;
        if (dart.test(rightTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: rightTitle.textStyle, text: rightTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: rightTitle.textAlign, textDirection: rightTitle.textDirection, textScaleFactor: holder.textScale});
          tp.layout({minWidth: viewSize.height});
          canvasWrapper.save();
          canvasWrapper.rotate(-3.141592653589793 * 0.5);
          canvasWrapper.drawText(tp, new ui.Offset.new(-dart.notNull(viewSize.height) - dart.notNull(this.getTopOffsetDrawSize(holder)), dart.notNull(viewSize.width) + dart.notNull(this.getExtraNeededHorizontalSpace(holder)) - dart.notNull(rightTitle.reservedSize)));
          canvasWrapper.restore();
        }
        let bottomTitle = axisTitles.bottomTitle;
        if (dart.test(bottomTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: bottomTitle.textStyle, text: bottomTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: bottomTitle.textAlign, textDirection: bottomTitle.textDirection, textScaleFactor: holder.textScale});
          tp.layout({minWidth: viewSize.width});
          canvasWrapper.drawText(tp, new ui.Offset.new(this.getLeftOffsetDrawSize(holder), dart.notNull(this.getExtraNeededVerticalSpace(holder)) - dart.notNull(bottomTitle.reservedSize) + dart.notNull(viewSize.height)));
        }
      }
      getExtraNeededHorizontalSpace(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 129, 55, "holder");
        let data = holder.data;
        let sum = super.getExtraNeededHorizontalSpace(holder);
        if (dart.test(data.axisTitleData.show)) {
          let leftSide = data.axisTitleData.leftTitle;
          if (dart.test(leftSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
          }
          let rightSide = data.axisTitleData.rightTitle;
          if (dart.test(rightSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
          }
        }
        return sum;
      }
      getExtraNeededVerticalSpace(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 153, 53, "holder");
        let data = holder.data;
        let sum = super.getExtraNeededVerticalSpace(holder);
        if (dart.test(data.axisTitleData.show)) {
          let topSide = data.axisTitleData.topTitle;
          if (dart.test(topSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
          }
          let bottomSide = data.axisTitleData.bottomTitle;
          if (dart.test(bottomSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
          }
        }
        return sum;
      }
      getLeftOffsetDrawSize(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 177, 47, "holder");
        let data = holder.data;
        let sum = super.getLeftOffsetDrawSize(holder);
        let leftAxisTitle = data.axisTitleData.leftTitle;
        if (dart.test(data.axisTitleData.show) && dart.test(leftAxisTitle.showTitle)) {
          sum = dart.notNull(sum) + (dart.notNull(leftAxisTitle.reservedSize) + dart.notNull(leftAxisTitle.margin));
        }
        return sum;
      }
      getTopOffsetDrawSize(holder) {
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 194, 46, "holder");
        let data = holder.data;
        let sum = super.getTopOffsetDrawSize(holder);
        let topAxisTitle = data.axisTitleData.topTitle;
        if (dart.test(data.axisTitleData.show) && dart.test(topAxisTitle.showTitle)) {
          sum = dart.notNull(sum) + (dart.notNull(topAxisTitle.reservedSize) + dart.notNull(topAxisTitle.margin));
        }
        return sum;
      }
      [_drawGrid](canvasWrapper, holder) {
        let t5, t6, t5$, t6$, t5$0, t5$1, t6$0, t5$2, t6$1, t5$3;
        if (canvasWrapper == null) dart.nullFailed(I[1], 206, 32, "canvasWrapper");
        if (holder == null) dart.nullFailed(I[1], 206, 62, "holder");
        let data = holder.data;
        if (!dart.test(data.gridData.show)) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let usableViewSize = this.getChartUsableDrawSize(viewSize, holder);
        if (dart.test(data.gridData.drawVerticalLine)) {
          let verticalInterval = (t5 = data.gridData.verticalInterval, t5 == null ? utils.getEfficientInterval(viewSize.width, data.horizontalDiff) : t5);
          let verticalSeek = dart.notNull(data.minX) + dart.notNull(verticalInterval);
          let delta = dart.notNull(data.maxX) - dart.notNull(data.minX);
          let count = (delta / dart.notNull(verticalInterval))[$truncate]();
          let lastPosition = count * verticalSeek;
          let lastPositionOverlapsWithBorder = lastPosition === data.maxX;
          let end = lastPositionOverlapsWithBorder ? dart.notNull(data.maxX) - dart.notNull(verticalInterval) : data.maxX;
          while (verticalSeek <= dart.notNull(end)) {
            if (dart.test((t5$ = data.gridData, t6 = verticalSeek, t5$.checkToShowVerticalLine(t6)))) {
              let flLineStyle = (t5$0 = data.gridData, t6$ = verticalSeek, t5$0.getDrawingVerticalLine(t6$));
              this[_gridPaint].color = flLineStyle.color;
              this[_gridPaint].strokeWidth = flLineStyle.strokeWidth;
              paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_gridPaint]);
              let bothX = this.getPixelX(verticalSeek, usableViewSize, holder);
              let x1 = bothX;
              let y1 = 0 + dart.notNull(this.getTopOffsetDrawSize(holder));
              let x2 = bothX;
              let y2 = dart.notNull(usableViewSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
              canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, new ui.Offset.new(x1, y1), new ui.Offset.new(x2, y2), this[_gridPaint], flLineStyle.dashArray);
            }
            verticalSeek = verticalSeek + dart.notNull(verticalInterval);
          }
        }
        if (dart.test(data.gridData.drawHorizontalLine)) {
          let horizontalInterval = (t5$1 = data.gridData.horizontalInterval, t5$1 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t5$1);
          let horizontalSeek = dart.notNull(data.minY) + dart.notNull(horizontalInterval);
          let delta = dart.notNull(data.maxY) - dart.notNull(data.minY);
          let count = (delta / dart.notNull(horizontalInterval))[$truncate]();
          let lastPosition = count * horizontalSeek;
          let lastPositionOverlapsWithBorder = lastPosition === data.maxY;
          let end = lastPositionOverlapsWithBorder ? dart.notNull(data.maxY) - dart.notNull(horizontalInterval) : data.maxY;
          while (horizontalSeek <= dart.notNull(end)) {
            if (dart.test((t5$2 = data.gridData, t6$0 = horizontalSeek, t5$2.checkToShowHorizontalLine(t6$0)))) {
              let flLine = (t5$3 = data.gridData, t6$1 = horizontalSeek, t5$3.getDrawingHorizontalLine(t6$1));
              this[_gridPaint].color = flLine.color;
              this[_gridPaint].strokeWidth = flLine.strokeWidth;
              paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_gridPaint]);
              let bothY = this.getPixelY(horizontalSeek, usableViewSize, holder);
              let x1 = 0 + dart.notNull(this.getLeftOffsetDrawSize(holder));
              let y1 = bothY;
              let x2 = dart.notNull(usableViewSize.width) + dart.notNull(this.getLeftOffsetDrawSize(holder));
              let y2 = bothY;
              canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, new ui.Offset.new(x1, y1), new ui.Offset.new(x2, y2), this[_gridPaint], flLine.dashArray);
            }
            horizontalSeek = horizontalSeek + dart.notNull(horizontalInterval);
          }
        }
      }
      [_drawBackground](canvasWrapper, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[1], 279, 38, "canvasWrapper");
        if (holder == null) dart.nullFailed(I[1], 279, 68, "holder");
        let data = holder.data;
        if (data.backgroundColor.opacity === 0.0) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let usableViewSize = this.getChartUsableDrawSize(viewSize, holder);
        this[_backgroundPaint].color = data.backgroundColor;
        canvasWrapper.drawRect(new ui.Rect.fromLTWH(this.getLeftOffsetDrawSize(holder), this.getTopOffsetDrawSize(holder), usableViewSize.width, usableViewSize.height), this[_backgroundPaint]);
      }
      [_drawRangeAnnotation](canvasWrapper, holder) {
        if (canvasWrapper == null) dart.nullFailed(I[1], 299, 43, "canvasWrapper");
        if (holder == null) dart.nullFailed(I[1], 299, 73, "holder");
        let data = holder.data;
        let viewSize = canvasWrapper.size;
        let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
        if (dart.test(data.rangeAnnotations.verticalRangeAnnotations[$isNotEmpty])) {
          for (let annotation of data.rangeAnnotations.verticalRangeAnnotations) {
            let topChartPadding = this.getTopOffsetDrawSize(holder);
            let from = new ui.Offset.new(this.getPixelX(annotation.x1, chartUsableSize, holder), topChartPadding);
            let bottomChartPadding = dart.notNull(this.getExtraNeededVerticalSpace(holder)) - dart.notNull(this.getTopOffsetDrawSize(holder));
            let to = new ui.Offset.new(this.getPixelX(annotation.x2, chartUsableSize, holder), dart.notNull(viewSize.height) - bottomChartPadding);
            let rect = new ui.Rect.fromPoints(from, to);
            this[_rangeAnnotationPaint].color = annotation.color;
            canvasWrapper.drawRect(rect, this[_rangeAnnotationPaint]);
          }
        }
        if (dart.test(data.rangeAnnotations.horizontalRangeAnnotations[$isNotEmpty])) {
          for (let annotation of data.rangeAnnotations.horizontalRangeAnnotations) {
            let leftChartPadding = this.getLeftOffsetDrawSize(holder);
            let from = new ui.Offset.new(leftChartPadding, this.getPixelY(annotation.y1, chartUsableSize, holder));
            let rightChartPadding = dart.notNull(this.getExtraNeededHorizontalSpace(holder)) - dart.notNull(this.getLeftOffsetDrawSize(holder));
            let to = new ui.Offset.new(dart.notNull(viewSize.width) - rightChartPadding, this.getPixelY(annotation.y2, chartUsableSize, holder));
            let rect = new ui.Rect.fromPoints(from, to);
            this[_rangeAnnotationPaint].color = annotation.color;
            canvasWrapper.drawRect(rect, this[_rangeAnnotationPaint]);
          }
        }
      }
      getPixelX(spotX, chartUsableSize, holder) {
        if (spotX == null) dart.nullFailed(I[1], 348, 27, "spotX");
        if (chartUsableSize == null) dart.nullFailed(I[1], 348, 39, "chartUsableSize");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 348, 71, "holder");
        let data = holder.data;
        let deltaX = dart.notNull(data.maxX) - dart.notNull(data.minX);
        if (deltaX === 0.0) {
          return this.getLeftOffsetDrawSize(holder);
        }
        return (dart.notNull(spotX) - dart.notNull(data.minX)) / deltaX * dart.notNull(chartUsableSize.width) + dart.notNull(this.getLeftOffsetDrawSize(holder));
      }
      getPixelY(spotY, chartUsableSize, holder) {
        if (spotY == null) dart.nullFailed(I[1], 359, 27, "spotY");
        if (chartUsableSize == null) dart.nullFailed(I[1], 359, 39, "chartUsableSize");
        PaintHolderOfD().as(holder);
        if (holder == null) dart.nullFailed(I[1], 359, 71, "holder");
        let data = holder.data;
        let deltaY = dart.notNull(data.maxY) - dart.notNull(data.minY);
        if (deltaY === 0.0) {
          return dart.notNull(chartUsableSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
        }
        let y = (dart.notNull(spotY) - dart.notNull(data.minY)) / deltaY * dart.notNull(chartUsableSize.height);
        y = dart.notNull(chartUsableSize.height) - y;
        return y + dart.notNull(this.getTopOffsetDrawSize(holder));
      }
    }
    (AxisChartPainter.new = function() {
      let t2, t2$, t2$0;
      this[__AxisChartPainter__gridPaint] = null;
      this[__AxisChartPainter__backgroundPaint] = null;
      this[__AxisChartPainter__rangeAnnotationPaint] = null;
      AxisChartPainter.__proto__.new.call(this);
      this[_gridPaint] = (t2 = ui.Paint.new(), (() => {
        t2.style = ui.PaintingStyle.stroke;
        return t2;
      })());
      this[_backgroundPaint] = (t2$ = ui.Paint.new(), (() => {
        t2$.style = ui.PaintingStyle.fill;
        return t2$;
      })());
      this[_rangeAnnotationPaint] = (t2$0 = ui.Paint.new(), (() => {
        t2$0.style = ui.PaintingStyle.fill;
        return t2$0;
      })());
    }).prototype = AxisChartPainter.prototype;
    dart.addTypeTests(AxisChartPainter);
    AxisChartPainter.prototype[_is_AxisChartPainter_default] = true;
    dart.addTypeCaches(AxisChartPainter);
    dart.setMethodSignature(AxisChartPainter, () => ({
      __proto__: dart.getMethods(AxisChartPainter.__proto__),
      drawAxisTitles: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, dart.nullable(core.Object)]),
      [_drawGrid]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(D)]),
      [_drawBackground]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(D)]),
      [_drawRangeAnnotation]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(D)]),
      getPixelX: dart.fnType(core.double, [core.double, ui.Size, dart.nullable(core.Object)]),
      getPixelY: dart.fnType(core.double, [core.double, ui.Size, dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(AxisChartPainter, () => ({
      __proto__: dart.getGetters(AxisChartPainter.__proto__),
      [_gridPaint]: ui.Paint,
      [_backgroundPaint]: ui.Paint,
      [_rangeAnnotationPaint]: ui.Paint
    }));
    dart.setSetterSignature(AxisChartPainter, () => ({
      __proto__: dart.getSetters(AxisChartPainter.__proto__),
      [_gridPaint]: ui.Paint,
      [_backgroundPaint]: ui.Paint,
      [_rangeAnnotationPaint]: ui.Paint
    }));
    dart.setLibraryUri(AxisChartPainter, I[4]);
    dart.setFieldSignature(AxisChartPainter, () => ({
      __proto__: dart.getFields(AxisChartPainter.__proto__),
      [__AxisChartPainter__gridPaint]: dart.fieldType(dart.nullable(ui.Paint)),
      [__AxisChartPainter__backgroundPaint]: dart.fieldType(dart.nullable(ui.Paint)),
      [__AxisChartPainter__rangeAnnotationPaint]: dart.fieldType(dart.nullable(ui.Paint))
    }));
    return AxisChartPainter;
  });
  axis_chart_painter.AxisChartPainter = axis_chart_painter.AxisChartPainter$();
  dart.addTypeTests(axis_chart_painter.AxisChartPainter, _is_AxisChartPainter_default);
  var scatterSpots$ = dart.privateName(scatter_chart_data, "ScatterChartData.scatterSpots");
  var titlesData$ = dart.privateName(scatter_chart_data, "ScatterChartData.titlesData");
  var scatterTouchData$ = dart.privateName(scatter_chart_data, "ScatterChartData.scatterTouchData");
  var showingTooltipIndicators$ = dart.privateName(scatter_chart_data, "ScatterChartData.showingTooltipIndicators");
  var gridData$ = dart.privateName(axis_chart_data, "AxisChartData.gridData");
  var axisTitleData$ = dart.privateName(axis_chart_data, "AxisChartData.axisTitleData");
  var rangeAnnotations$ = dart.privateName(axis_chart_data, "AxisChartData.rangeAnnotations");
  var minX$ = dart.privateName(axis_chart_data, "AxisChartData.minX");
  var maxX$ = dart.privateName(axis_chart_data, "AxisChartData.maxX");
  var minY$ = dart.privateName(axis_chart_data, "AxisChartData.minY");
  var maxY$ = dart.privateName(axis_chart_data, "AxisChartData.maxY");
  var clipData$ = dart.privateName(axis_chart_data, "AxisChartData.clipData");
  var backgroundColor$ = dart.privateName(axis_chart_data, "AxisChartData.backgroundColor");
  var borderData$ = dart.privateName(base_chart_data, "BaseChartData.borderData");
  var touchData$ = dart.privateName(base_chart_data, "BaseChartData.touchData");
  const Object_EquatableMixin$36 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36.new = function() {
  }).prototype = Object_EquatableMixin$36.prototype;
  dart.applyMixin(Object_EquatableMixin$36, equatable_mixin.EquatableMixin);
  base_chart_data.BaseChartData = class BaseChartData extends Object_EquatableMixin$36 {
    get borderData() {
      return this[borderData$];
    }
    set borderData(value) {
      this[borderData$] = value;
    }
    get touchData() {
      return this[touchData$];
    }
    set touchData(value) {
      this[touchData$] = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.borderData, this.touchData]);
    }
  };
  (base_chart_data.BaseChartData.new = function(opts) {
    let t6;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let touchData = opts && 'touchData' in opts ? opts.touchData : null;
    if (touchData == null) dart.nullFailed(I[7], 22, 26, "touchData");
    this[borderData$] = (t6 = borderData, t6 == null ? new base_chart_data.FlBorderData.new() : t6);
    this[touchData$] = touchData;
    ;
  }).prototype = base_chart_data.BaseChartData.prototype;
  dart.addTypeTests(base_chart_data.BaseChartData);
  dart.addTypeCaches(base_chart_data.BaseChartData);
  dart.setGetterSignature(base_chart_data.BaseChartData, () => ({
    __proto__: dart.getGetters(base_chart_data.BaseChartData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(base_chart_data.BaseChartData, I[8]);
  dart.setFieldSignature(base_chart_data.BaseChartData, () => ({
    __proto__: dart.getFields(base_chart_data.BaseChartData.__proto__),
    borderData: dart.fieldType(base_chart_data.FlBorderData),
    touchData: dart.fieldType(base_chart_data.FlTouchData)
  }));
  const BaseChartData_EquatableMixin$36 = class BaseChartData_EquatableMixin extends base_chart_data.BaseChartData {};
  (BaseChartData_EquatableMixin$36.new = function(opts) {
    BaseChartData_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = BaseChartData_EquatableMixin$36.prototype;
  dart.applyMixin(BaseChartData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  axis_chart_data.AxisChartData = class AxisChartData extends BaseChartData_EquatableMixin$36 {
    get gridData() {
      return this[gridData$];
    }
    set gridData(value) {
      super.gridData = value;
    }
    get axisTitleData() {
      return this[axisTitleData$];
    }
    set axisTitleData(value) {
      super.axisTitleData = value;
    }
    get rangeAnnotations() {
      return this[rangeAnnotations$];
    }
    set rangeAnnotations(value) {
      super.rangeAnnotations = value;
    }
    get minX() {
      return this[minX$];
    }
    set minX(value) {
      this[minX$] = value;
    }
    get maxX() {
      return this[maxX$];
    }
    set maxX(value) {
      this[maxX$] = value;
    }
    get minY() {
      return this[minY$];
    }
    set minY(value) {
      this[minY$] = value;
    }
    get maxY() {
      return this[maxY$];
    }
    set maxY(value) {
      this[maxY$] = value;
    }
    get clipData() {
      return this[clipData$];
    }
    set clipData(value) {
      this[clipData$] = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      this[backgroundColor$] = value;
    }
    get verticalDiff() {
      return dart.notNull(this.maxY) - dart.notNull(this.minY);
    }
    get horizontalDiff() {
      return dart.notNull(this.maxX) - dart.notNull(this.minX);
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.gridData, this.axisTitleData, this.rangeAnnotations, this.minX, this.maxX, this.minY, this.maxY, this.clipData, this.backgroundColor, this.borderData, this.touchData]);
    }
  };
  (axis_chart_data.AxisChartData.new = function(opts) {
    let t6, t6$, t6$0, t6$1;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    if (axisTitleData == null) dart.nullFailed(I[6], 39, 30, "axisTitleData");
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    if (minX == null) dart.nullFailed(I[6], 41, 21, "minX");
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    if (maxX == null) dart.nullFailed(I[6], 42, 21, "maxX");
    let minY = opts && 'minY' in opts ? opts.minY : null;
    if (minY == null) dart.nullFailed(I[6], 43, 21, "minY");
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    if (maxY == null) dart.nullFailed(I[6], 44, 21, "maxY");
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let touchData = opts && 'touchData' in opts ? opts.touchData : null;
    if (touchData == null) dart.nullFailed(I[6], 48, 26, "touchData");
    this[gridData$] = (t6 = gridData, t6 == null ? new axis_chart_data.FlGridData.new() : t6);
    this[axisTitleData$] = axisTitleData;
    this[rangeAnnotations$] = (t6$ = rangeAnnotations, t6$ == null ? new axis_chart_data.RangeAnnotations.new() : t6$);
    this[minX$] = minX;
    this[maxX$] = maxX;
    this[minY$] = minY;
    this[maxY$] = maxY;
    this[clipData$] = (t6$0 = clipData, t6$0 == null ? new base_chart_data.FlClipData.none() : t6$0);
    this[backgroundColor$] = (t6$1 = backgroundColor, t6$1 == null ? colors$.Colors.transparent : t6$1);
    axis_chart_data.AxisChartData.__proto__.new.call(this, {borderData: borderData, touchData: touchData});
    ;
  }).prototype = axis_chart_data.AxisChartData.prototype;
  dart.addTypeTests(axis_chart_data.AxisChartData);
  dart.addTypeCaches(axis_chart_data.AxisChartData);
  dart.setGetterSignature(axis_chart_data.AxisChartData, () => ({
    __proto__: dart.getGetters(axis_chart_data.AxisChartData.__proto__),
    verticalDiff: core.double,
    horizontalDiff: core.double
  }));
  dart.setLibraryUri(axis_chart_data.AxisChartData, I[9]);
  dart.setFieldSignature(axis_chart_data.AxisChartData, () => ({
    __proto__: dart.getFields(axis_chart_data.AxisChartData.__proto__),
    gridData: dart.finalFieldType(axis_chart_data.FlGridData),
    axisTitleData: dart.finalFieldType(axis_chart_data.FlAxisTitleData),
    rangeAnnotations: dart.finalFieldType(axis_chart_data.RangeAnnotations),
    minX: dart.fieldType(core.double),
    maxX: dart.fieldType(core.double),
    minY: dart.fieldType(core.double),
    maxY: dart.fieldType(core.double),
    clipData: dart.fieldType(base_chart_data.FlClipData),
    backgroundColor: dart.fieldType(ui.Color)
  }));
  const AxisChartData_EquatableMixin$36 = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36.new = function(opts) {
    AxisChartData_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterChartData = class ScatterChartData extends AxisChartData_EquatableMixin$36 {
    get scatterSpots() {
      return this[scatterSpots$];
    }
    set scatterSpots(value) {
      super.scatterSpots = value;
    }
    get titlesData() {
      return this[titlesData$];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get scatterTouchData() {
      return this[scatterTouchData$];
    }
    set scatterTouchData(value) {
      super.scatterTouchData = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[5], 74, 39, "a");
      if (b == null) dart.nullFailed(I[5], 74, 56, "b");
      if (t == null) dart.nullFailed(I[5], 74, 66, "t");
      if (scatter_chart_data.ScatterChartData.is(a) && scatter_chart_data.ScatterChartData.is(b)) {
        return new scatter_chart_data.ScatterChartData.new({scatterSpots: lerp.lerpScatterSpotList(a.scatterSpots, b.scatterSpots, t), titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), scatterTouchData: b.scatterTouchData, showingTooltipIndicators: lerp.lerpIntList(a.showingTooltipIndicators, b.showingTooltipIndicators, t), gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), minX: ui.lerpDouble(a.minX, b.minX, t), maxX: ui.lerpDouble(a.maxX, b.maxX, t), minY: ui.lerpDouble(a.minY, b.minY, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), clipData: b.clipData, backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    copyWith(opts) {
      let t6, t6$, t6$0, t6$1, t6$2, t6$3, t6$4, t6$5, t6$6, t6$7, t6$8, t6$9, t6$10;
      let scatterSpots = opts && 'scatterSpots' in opts ? opts.scatterSpots : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let scatterTouchData = opts && 'scatterTouchData' in opts ? opts.scatterTouchData : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let clipData = opts && 'clipData' in opts ? opts.clipData : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new scatter_chart_data.ScatterChartData.new({scatterSpots: (t6 = scatterSpots, t6 == null ? this.scatterSpots : t6), titlesData: (t6$ = titlesData, t6$ == null ? this.titlesData : t6$), scatterTouchData: (t6$0 = scatterTouchData, t6$0 == null ? this.scatterTouchData : t6$0), showingTooltipIndicators: (t6$1 = showingTooltipIndicators, t6$1 == null ? this.showingTooltipIndicators : t6$1), gridData: (t6$2 = gridData, t6$2 == null ? this.gridData : t6$2), borderData: (t6$3 = borderData, t6$3 == null ? this.borderData : t6$3), axisTitleData: (t6$4 = axisTitleData, t6$4 == null ? this.axisTitleData : t6$4), minX: (t6$5 = minX, t6$5 == null ? this.minX : t6$5), maxX: (t6$6 = maxX, t6$6 == null ? this.maxX : t6$6), minY: (t6$7 = minY, t6$7 == null ? this.minY : t6$7), maxY: (t6$8 = maxY, t6$8 == null ? this.maxY : t6$8), clipData: (t6$9 = clipData, t6$9 == null ? this.clipData : t6$9), backgroundColor: (t6$10 = backgroundColor, t6$10 == null ? this.backgroundColor : t6$10)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.scatterSpots, this.titlesData, this.scatterTouchData, this.showingTooltipIndicators, this.gridData, this.touchData, this.borderData, this.axisTitleData, this.clipData, this.backgroundColor, this.minX, this.maxX, this.minY, this.maxY, this.rangeAnnotations]);
    }
  };
  (scatter_chart_data.ScatterChartData.new = function(opts) {
    let t6, t6$, t6$0, t6$1, t6$2, t6$3, t6$4, t6$5, t7, t6$6, t7$, t6$7, t7$0, t6$8, t7$1, t6$9;
    let scatterSpots = opts && 'scatterSpots' in opts ? opts.scatterSpots : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let scatterTouchData = opts && 'scatterTouchData' in opts ? opts.scatterTouchData : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[scatterSpots$] = (t6 = scatterSpots, t6 == null ? C[0] || CT.C0 : t6);
    this[titlesData$] = (t6$ = titlesData, t6$ == null ? new axis_chart_data.FlTitlesData.new() : t6$);
    this[scatterTouchData$] = (t6$0 = scatterTouchData, t6$0 == null ? new scatter_chart_data.ScatterTouchData.new() : t6$0);
    this[showingTooltipIndicators$] = (t6$1 = showingTooltipIndicators, t6$1 == null ? C[1] || CT.C1 : t6$1);
    scatter_chart_data.ScatterChartData.__proto__.new.call(this, {gridData: (t6$2 = gridData, t6$2 == null ? new axis_chart_data.FlGridData.new() : t6$2), touchData: (t6$3 = scatterTouchData, t6$3 == null ? new scatter_chart_data.ScatterTouchData.new() : t6$3), borderData: borderData, axisTitleData: (t6$4 = axisTitleData, t6$4 == null ? new axis_chart_data.FlAxisTitleData.new() : t6$4), clipData: (t6$5 = clipData, t6$5 == null ? new base_chart_data.FlClipData.none() : t6$5), backgroundColor: backgroundColor, minX: (t6$6 = minX, t6$6 == null ? scatter_chart_helper.ScatterChartHelper.calculateMaxAxisValues((t7 = scatterSpots, t7 == null ? C[0] || CT.C0 : t7)).minX : t6$6), maxX: (t6$7 = maxX, t6$7 == null ? scatter_chart_helper.ScatterChartHelper.calculateMaxAxisValues((t7$ = scatterSpots, t7$ == null ? C[0] || CT.C0 : t7$)).maxX : t6$7), minY: (t6$8 = minY, t6$8 == null ? scatter_chart_helper.ScatterChartHelper.calculateMaxAxisValues((t7$0 = scatterSpots, t7$0 == null ? C[0] || CT.C0 : t7$0)).minY : t6$8), maxY: (t6$9 = maxY, t6$9 == null ? scatter_chart_helper.ScatterChartHelper.calculateMaxAxisValues((t7$1 = scatterSpots, t7$1 == null ? C[0] || CT.C0 : t7$1)).maxY : t6$9)});
    ;
  }).prototype = scatter_chart_data.ScatterChartData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterChartData);
  dart.addTypeCaches(scatter_chart_data.ScatterChartData);
  dart.setMethodSignature(scatter_chart_data.ScatterChartData, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterChartData.__proto__),
    lerp: dart.fnType(scatter_chart_data.ScatterChartData, [base_chart_data.BaseChartData, base_chart_data.BaseChartData, core.double]),
    copyWith: dart.fnType(scatter_chart_data.ScatterChartData, [], {axisTitleData: dart.nullable(axis_chart_data.FlAxisTitleData), backgroundColor: dart.nullable(ui.Color), borderData: dart.nullable(base_chart_data.FlBorderData), clipData: dart.nullable(base_chart_data.FlClipData), gridData: dart.nullable(axis_chart_data.FlGridData), maxX: dart.nullable(core.double), maxY: dart.nullable(core.double), minX: dart.nullable(core.double), minY: dart.nullable(core.double), scatterSpots: dart.nullable(core.List$(scatter_chart_data.ScatterSpot)), scatterTouchData: dart.nullable(scatter_chart_data.ScatterTouchData), showingTooltipIndicators: dart.nullable(core.List$(core.int)), titlesData: dart.nullable(axis_chart_data.FlTitlesData)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterChartData, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterChartData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterChartData.__proto__),
    scatterSpots: dart.finalFieldType(core.List$(scatter_chart_data.ScatterSpot)),
    titlesData: dart.finalFieldType(axis_chart_data.FlTitlesData),
    scatterTouchData: dart.finalFieldType(scatter_chart_data.ScatterTouchData),
    showingTooltipIndicators: dart.finalFieldType(core.List$(core.int))
  }));
  scatter_chart_painter.ScatterChartPainter = class ScatterChartPainter extends axis_chart_painter.AxisChartPainter$(scatter_chart_data.ScatterChartData) {
    get [_spotsPaint]() {
      let t0;
      t0 = this[__ScatterChartPainter__spotsPaint];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_spotsPaint")) : t0;
    }
    set [_spotsPaint](t0) {
      if (t0 == null) dart.nullFailed(I[0], 14, 14, "null");
      this[__ScatterChartPainter__spotsPaint] = t0;
    }
    get [_bgTouchTooltipPaint]() {
      let t1;
      t1 = this[__ScatterChartPainter__bgTouchTooltipPaint];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_bgTouchTooltipPaint")) : t1;
    }
    set [_bgTouchTooltipPaint](t1) {
      if (t1 == null) dart.nullFailed(I[0], 14, 27, "null");
      this[__ScatterChartPainter__bgTouchTooltipPaint] = t1;
    }
    paint(canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[0], 34, 28, "canvasWrapper");
      T.PaintHolderOfScatterChartData().as(holder);
      if (holder == null) dart.nullFailed(I[0], 34, 73, "holder");
      super.paint(canvasWrapper, holder);
      let targetData = holder.targetData;
      this.drawAxisTitles(canvasWrapper, holder);
      this[_drawTitles](canvasWrapper, holder);
      this[_drawSpots](canvasWrapper, holder);
      for (let i = 0; i < dart.notNull(targetData.scatterSpots[$length]); i = i + 1) {
        if (!dart.test(targetData.showingTooltipIndicators[$contains](i))) {
          continue;
        }
        let scatterSpot = targetData.scatterSpots[$_get](i);
        this[_drawTouchTooltip](canvasWrapper, targetData.scatterTouchData.touchTooltipData, scatterSpot, holder);
      }
    }
    [_drawTitles](canvasWrapper, holder) {
      let t2, t7, t6, t5, t4, t3, t2$, t3$, t2$0, t3$0, t2$1, t2$2, t7$, t6$, t5$, t4$, t3$1, t2$3, t3$2, t2$4, t3$3, t2$5, t2$6, t7$0, t6$0, t5$0, t4$0, t3$4, t2$7, t3$5, t2$8, t3$6, t2$9, t2$10, t7$1, t6$1, t5$1, t4$1, t3$7, t2$11, t3$8, t2$12, t3$9, t2$13;
      if (canvasWrapper == null) dart.nullFailed(I[0], 56, 34, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[0], 56, 79, "holder");
      let data = holder.data;
      let targetData = holder.targetData;
      if (!dart.test(targetData.titlesData.show)) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size, holder);
      let leftTitles = targetData.titlesData.leftTitles;
      let leftInterval = (t2 = leftTitles.interval, t2 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t2);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t2$ = leftTitles, t3 = data.minY, t4 = data.maxY, t5 = leftTitles, t6 = leftInterval, t7 = verticalSeek, t2$.checkToShowTitle(t3, t4, t5, t6, t7)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, viewSize, holder);
            let text = (t2$0 = leftTitles, t3$ = verticalSeek, t2$0.getTitles(t3$));
            let span = new text_span.TextSpan.new({style: (t2$1 = leftTitles, t3$0 = verticalSeek, t2$1.getTextStyles(t3$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: leftTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = targetData.titlesData.topTitles;
      let topInterval = (t2$2 = topTitles.interval, t2$2 == null ? utils.getEfficientInterval(viewSize.width, data.horizontalDiff) : t2$2);
      if (dart.test(topTitles.showTitles)) {
        let horizontalSeek = data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(data.maxX)) {
          if (dart.test((t2$3 = topTitles, t3$1 = data.minX, t4$ = data.maxX, t5$ = topTitles, t6$ = topInterval, t7$ = horizontalSeek, t2$3.checkToShowTitle(t3$1, t4$, t5$, t6$, t7$)))) {
            let x = this.getPixelX(horizontalSeek, viewSize, holder);
            let y = this.getTopOffsetDrawSize(holder);
            let text = (t2$4 = topTitles, t3$2 = horizontalSeek, t2$4.getTitles(t3$2));
            let span = new text_span.TextSpan.new({style: (t2$5 = topTitles, t3$3 = horizontalSeek, t2$5.getTextStyles(t3$3)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: topTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = dart.notNull(y) - (dart.notNull(topTitles.margin) + dart.notNull(tp.height));
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) - dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(topInterval) && data.maxX != horizontalSeek) {
            horizontalSeek = data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(topInterval);
          }
        }
      }
      let rightTitles = targetData.titlesData.rightTitles;
      let rightInterval = (t2$6 = rightTitles.interval, t2$6 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t2$6);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t2$7 = rightTitles, t3$4 = data.minY, t4$0 = data.maxY, t5$0 = rightTitles, t6$0 = rightInterval, t7$0 = verticalSeek, t2$7.checkToShowTitle(t3$4, t4$0, t5$0, t6$0, t7$0)))) {
            let x = dart.notNull(viewSize.width) + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, viewSize, holder);
            let text = (t2$8 = rightTitles, t3$5 = verticalSeek, t2$8.getTitles(t3$5));
            let span = new text_span.TextSpan.new({style: (t2$9 = rightTitles, t3$6 = verticalSeek, t2$9.getTextStyles(t3$6)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: rightTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = targetData.titlesData.bottomTitles;
      let bottomInterval = (t2$10 = bottomTitles.interval, t2$10 == null ? utils.getEfficientInterval(viewSize.width, data.horizontalDiff) : t2$10);
      if (dart.test(bottomTitles.showTitles)) {
        let horizontalSeek = data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(data.maxX)) {
          if (dart.test((t2$11 = bottomTitles, t3$7 = data.minX, t4$1 = data.maxX, t5$1 = bottomTitles, t6$1 = bottomInterval, t7$1 = horizontalSeek, t2$11.checkToShowTitle(t3$7, t4$1, t5$1, t6$1, t7$1)))) {
            let x = this.getPixelX(horizontalSeek, viewSize, holder);
            let y = dart.notNull(viewSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
            let text = (t2$12 = bottomTitles, t3$8 = horizontalSeek, t2$12.getTitles(t3$8));
            let span = new text_span.TextSpan.new({style: (t2$13 = bottomTitles, t3$9 = horizontalSeek, t2$13.getTextStyles(t3$9)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: bottomTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = y + dart.notNull(bottomTitles.margin);
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(bottomInterval) && data.maxX != horizontalSeek) {
            horizontalSeek = data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(bottomInterval);
          }
        }
      }
    }
    [_drawSpots](canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[0], 224, 33, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[0], 224, 78, "holder");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
      for (let scatterSpot of data.scatterSpots) {
        if (!dart.test(scatterSpot.show)) {
          continue;
        }
        let pixelX = this.getPixelX(scatterSpot.x, chartUsableSize, holder);
        let pixelY = this.getPixelY(scatterSpot.y, chartUsableSize, holder);
        this[_spotsPaint].color = scatterSpot.color;
        canvasWrapper.drawCircle(new ui.Offset.new(pixelX, pixelY), scatterSpot.radius, this[_spotsPaint]);
      }
    }
    [_drawTouchTooltip](canvasWrapper, tooltipData, showOnSpot, holder) {
      let t3, t2;
      if (canvasWrapper == null) dart.nullFailed(I[0], 245, 40, "canvasWrapper");
      if (tooltipData == null) dart.nullFailed(I[0], 245, 79, "tooltipData");
      if (showOnSpot == null) dart.nullFailed(I[0], 246, 19, "showOnSpot");
      if (holder == null) dart.nullFailed(I[0], 246, 61, "holder");
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
      let tooltipItem = (t2 = tooltipData, t3 = showOnSpot, t2.getTooltipItems(t3));
      if (tooltipItem == null) {
        return;
      }
      let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text, children: tooltipItem.children});
      let drawingTextPainter = new text_painter.TextPainter.new({text: span, textAlign: tooltipItem.textAlign, textDirection: tooltipItem.textDirection, textScaleFactor: holder.textScale});
      drawingTextPainter.layout({maxWidth: tooltipData.maxContentWidth});
      let width = drawingTextPainter.width;
      let height = drawingTextPainter.height;
      let mostTopOffset = new ui.Offset.new(this.getPixelX(showOnSpot.x, chartUsableSize, holder), this.getPixelY(showOnSpot.y, chartUsableSize, holder));
      let tooltipWidth = dart.notNull(width) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = dart.notNull(height) + dart.notNull(tooltipData.tooltipPadding.vertical);
      let rect = new ui.Rect.fromLTWH(dart.notNull(mostTopOffset.dx) - tooltipWidth / 2, dart.notNull(mostTopOffset.dy) - tooltipHeight - dart.notNull(tooltipItem.bottomMargin), tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint]);
      let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(drawingTextPainter.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(tooltipData.tooltipPadding.top));
      canvasWrapper.drawText(drawingTextPainter, drawOffset);
    }
    getExtraNeededHorizontalSpace(holder) {
      T.PaintHolderOfScatterChartData().as(holder);
      if (holder == null) dart.nullFailed(I[0], 351, 70, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededHorizontalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let leftSide = data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace(holder) {
      T.PaintHolderOfScatterChartData().as(holder);
      if (holder == null) dart.nullFailed(I[0], 374, 68, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededVerticalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let topSide = data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
        let bottomSide = data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize(holder) {
      T.PaintHolderOfScatterChartData().as(holder);
      if (holder == null) dart.nullFailed(I[0], 395, 62, "holder");
      let data = holder.data;
      let sum = super.getLeftOffsetDrawSize(holder);
      let leftTitles = data.titlesData.leftTitles;
      if (dart.test(data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize(holder) {
      T.PaintHolderOfScatterChartData().as(holder);
      if (holder == null) dart.nullFailed(I[0], 410, 61, "holder");
      let data = holder.data;
      let sum = super.getTopOffsetDrawSize(holder);
      let topTitles = data.titlesData.topTitles;
      if (dart.test(data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, size, holder) {
      if (touchInput == null) dart.nullFailed(I[0], 430, 18, "touchInput");
      if (size == null) dart.nullFailed(I[0], 431, 10, "size");
      if (holder == null) dart.nullFailed(I[0], 432, 35, "holder");
      let data = holder.data;
      let chartViewSize = this.getChartUsableDrawSize(size, holder);
      for (let i = 0; i < dart.notNull(data.scatterSpots[$length]); i = i + 1) {
        let spot = data.scatterSpots[$_get](i);
        let spotPixelX = this.getPixelX(spot.x, chartViewSize, holder);
        let spotPixelY = this.getPixelY(spot.y, chartViewSize, holder);
        if ((dart.notNull(touchInput.localPosition.dx) - dart.notNull(spotPixelX))[$abs]() <= dart.notNull(spot.radius) / 2 + dart.notNull(data.scatterTouchData.touchSpotThreshold) && (dart.notNull(touchInput.localPosition.dy) - dart.notNull(spotPixelY))[$abs]() <= dart.notNull(spot.radius) / 2 + dart.notNull(data.scatterTouchData.touchSpotThreshold)) {
          return new scatter_chart_data.ScatterTouchedSpot.new(spot, i);
        }
      }
      return null;
    }
  };
  (scatter_chart_painter.ScatterChartPainter.new = function() {
    let t0, t0$;
    this[__ScatterChartPainter__spotsPaint] = null;
    this[__ScatterChartPainter__bgTouchTooltipPaint] = null;
    scatter_chart_painter.ScatterChartPainter.__proto__.new.call(this);
    this[_spotsPaint] = (t0 = ui.Paint.new(), (() => {
      t0.style = ui.PaintingStyle.fill;
      return t0;
    })());
    this[_bgTouchTooltipPaint] = (t0$ = ui.Paint.new(), (() => {
      t0$.style = ui.PaintingStyle.fill;
      t0$.color = colors$.Colors.white;
      return t0$;
    })());
  }).prototype = scatter_chart_painter.ScatterChartPainter.prototype;
  dart.addTypeTests(scatter_chart_painter.ScatterChartPainter);
  dart.addTypeCaches(scatter_chart_painter.ScatterChartPainter);
  dart.setMethodSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getMethods(scatter_chart_painter.ScatterChartPainter.__proto__),
    [_drawTitles]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)]),
    [_drawSpots]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)]),
    [_drawTouchTooltip]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, scatter_chart_data.ScatterTouchTooltipData, scatter_chart_data.ScatterSpot, base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)]),
    handleTouch: dart.fnType(dart.nullable(scatter_chart_data.ScatterTouchedSpot), [events.PointerEvent, ui.Size, base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)])
  }));
  dart.setGetterSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getGetters(scatter_chart_painter.ScatterChartPainter.__proto__),
    [_spotsPaint]: ui.Paint,
    [_bgTouchTooltipPaint]: ui.Paint
  }));
  dart.setSetterSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getSetters(scatter_chart_painter.ScatterChartPainter.__proto__),
    [_spotsPaint]: ui.Paint,
    [_bgTouchTooltipPaint]: ui.Paint
  }));
  dart.setLibraryUri(scatter_chart_painter.ScatterChartPainter, I[11]);
  dart.setFieldSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getFields(scatter_chart_painter.ScatterChartPainter.__proto__),
    [__ScatterChartPainter__spotsPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__ScatterChartPainter__bgTouchTooltipPaint]: dart.fieldType(dart.nullable(ui.Paint))
  }));
  var data$ = dart.privateName(scatter_chart_renderer, "ScatterChartLeaf.data");
  var targetData$ = dart.privateName(scatter_chart_renderer, "ScatterChartLeaf.targetData");
  var touchCallback$ = dart.privateName(scatter_chart_renderer, "ScatterChartLeaf.touchCallback");
  scatter_chart_renderer.ScatterChartLeaf = class ScatterChartLeaf extends framework.LeafRenderObjectWidget {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get targetData() {
      return this[targetData$];
    }
    set targetData(value) {
      super.targetData = value;
    }
    get touchCallback() {
      return this[touchCallback$];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[12], 22, 54, "context");
      return new scatter_chart_renderer.RenderScatterChart.new(this.data, this.targetData, media_query.MediaQuery.of(context).textScaleFactor, this.touchCallback);
    }
    updateRenderObject(context, renderObject) {
      let t6;
      if (context == null) dart.nullFailed(I[12], 26, 40, "context");
      scatter_chart_renderer.RenderScatterChart.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[12], 26, 68, "renderObject");
      t6 = renderObject;
      (() => {
        t6.data = this.data;
        t6.targetData = this.targetData;
        t6.textScale = media_query.MediaQuery.of(context).textScaleFactor;
        t6.touchCallback = this.touchCallback;
        return t6;
      })();
    }
  };
  (scatter_chart_renderer.ScatterChartLeaf.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[12], 14, 32, "data");
    let targetData = opts && 'targetData' in opts ? opts.targetData : null;
    if (targetData == null) dart.nullFailed(I[12], 14, 52, "targetData");
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$] = data;
    this[targetData$] = targetData;
    this[touchCallback$] = touchCallback;
    scatter_chart_renderer.ScatterChartLeaf.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scatter_chart_renderer.ScatterChartLeaf.prototype;
  dart.addTypeTests(scatter_chart_renderer.ScatterChartLeaf);
  dart.addTypeCaches(scatter_chart_renderer.ScatterChartLeaf);
  dart.setMethodSignature(scatter_chart_renderer.ScatterChartLeaf, () => ({
    __proto__: dart.getMethods(scatter_chart_renderer.ScatterChartLeaf.__proto__),
    createRenderObject: dart.fnType(scatter_chart_renderer.RenderScatterChart, [framework.BuildContext])
  }));
  dart.setLibraryUri(scatter_chart_renderer.ScatterChartLeaf, I[13]);
  dart.setFieldSignature(scatter_chart_renderer.ScatterChartLeaf, () => ({
    __proto__: dart.getFields(scatter_chart_renderer.ScatterChartLeaf.__proto__),
    data: dart.finalFieldType(scatter_chart_data.ScatterChartData),
    targetData: dart.finalFieldType(scatter_chart_data.ScatterChartData),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [scatter_chart_data.ScatterTouchResponse])))
  }));
  var _painter = dart.privateName(scatter_chart_renderer, "_painter");
  var _lastTouchedSpot = dart.privateName(scatter_chart_renderer, "_lastTouchedSpot");
  var _data = dart.privateName(scatter_chart_renderer, "_data");
  var _targetData = dart.privateName(scatter_chart_renderer, "_targetData");
  var _textScale = dart.privateName(scatter_chart_renderer, "_textScale");
  var _touchCallback = dart.privateName(scatter_chart_renderer, "_touchCallback");
  scatter_chart_renderer.RenderScatterChart = class RenderScatterChart extends box.RenderBox {
    get data() {
      return this[_data];
    }
    set data(value) {
      if (value == null) dart.nullFailed(I[12], 46, 29, "value");
      if (dart.equals(this[_data], value)) return;
      this[_data] = value;
      this.markNeedsPaint();
    }
    get targetData() {
      return this[_targetData];
    }
    set targetData(value) {
      if (value == null) dart.nullFailed(I[12], 54, 35, "value");
      if (dart.equals(this[_targetData], value)) return;
      this[_targetData] = value;
      this.markNeedsPaint();
    }
    get textScale() {
      return this[_textScale];
    }
    set textScale(value) {
      if (value == null) dart.nullFailed(I[12], 62, 24, "value");
      if (this[_textScale] == value) return;
      this[_textScale] = value;
      this.markNeedsPaint();
    }
    set touchCallback(value) {
      this[_touchCallback] = value;
    }
    get paintHolder() {
      return new (T.PaintHolderOfScatterChartData()).new(this.data, this.targetData, this.textScale);
    }
    performLayout() {
      this.size = this.computeDryLayout(this.constraints);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[12], 87, 40, "constraints");
      return new ui.Size.new(constraints.maxWidth, constraints.maxHeight);
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[12], 92, 30, "context");
      if (offset == null) dart.nullFailed(I[12], 92, 46, "offset");
      let canvas = context.canvas;
      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      this[_painter].paint(new canvas_wrapper.CanvasWrapper.new(canvas, this.size), this.paintHolder);
      canvas.restore();
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[12], 101, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      let t6, t6$;
      if (event == null) dart.nullFailed(I[12], 104, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[12], 104, 66, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[12], 105, 12, "debugHandleEvent(event, entry)");
      if (this[_touchCallback] == null) {
        return;
      }
      let response = new scatter_chart_data.ScatterTouchResponse.new(event, null, false);
      let touchedSpot = this[_painter].handleTouch(event, this.size, this.paintHolder);
      if (touchedSpot == null) {
        t6 = this[_touchCallback];
        t6 == null ? null : t6(response);
        return;
      }
      response = response.copyWith({touchedSpot: touchedSpot});
      if (events.PointerDownEvent.is(event)) {
        this[_lastTouchedSpot] = touchedSpot;
      } else if (events.PointerUpEvent.is(event)) {
        if (this[_lastTouchedSpot] != null && dart.equals(this[_lastTouchedSpot], touchedSpot)) {
          response = response.copyWith({clickHappened: true});
        }
        this[_lastTouchedSpot] = null;
      }
      t6$ = this[_touchCallback];
      t6$ == null ? null : t6$(response);
    }
  };
  (scatter_chart_renderer.RenderScatterChart.new = function(data, targetData, textScale, touchCallback) {
    if (data == null) dart.nullFailed(I[12], 37, 39, "data");
    if (targetData == null) dart.nullFailed(I[12], 37, 62, "targetData");
    if (textScale == null) dart.nullFailed(I[12], 37, 81, "textScale");
    this[_painter] = new scatter_chart_painter.ScatterChartPainter.new();
    this[_lastTouchedSpot] = null;
    this[_data] = data;
    this[_targetData] = targetData;
    this[_textScale] = textScale;
    this[_touchCallback] = touchCallback;
    scatter_chart_renderer.RenderScatterChart.__proto__.new.call(this);
    ;
  }).prototype = scatter_chart_renderer.RenderScatterChart.prototype;
  dart.addTypeTests(scatter_chart_renderer.RenderScatterChart);
  dart.addTypeCaches(scatter_chart_renderer.RenderScatterChart);
  dart.setGetterSignature(scatter_chart_renderer.RenderScatterChart, () => ({
    __proto__: dart.getGetters(scatter_chart_renderer.RenderScatterChart.__proto__),
    data: scatter_chart_data.ScatterChartData,
    targetData: scatter_chart_data.ScatterChartData,
    textScale: core.double,
    paintHolder: base_chart_painter.PaintHolder$(scatter_chart_data.ScatterChartData)
  }));
  dart.setSetterSignature(scatter_chart_renderer.RenderScatterChart, () => ({
    __proto__: dart.getSetters(scatter_chart_renderer.RenderScatterChart.__proto__),
    data: scatter_chart_data.ScatterChartData,
    targetData: scatter_chart_data.ScatterChartData,
    textScale: core.double,
    touchCallback: dart.nullable(dart.fnType(dart.void, [scatter_chart_data.ScatterTouchResponse]))
  }));
  dart.setLibraryUri(scatter_chart_renderer.RenderScatterChart, I[13]);
  dart.setFieldSignature(scatter_chart_renderer.RenderScatterChart, () => ({
    __proto__: dart.getFields(scatter_chart_renderer.RenderScatterChart.__proto__),
    [_data]: dart.fieldType(scatter_chart_data.ScatterChartData),
    [_targetData]: dart.fieldType(scatter_chart_data.ScatterChartData),
    [_textScale]: dart.fieldType(core.double),
    [_touchCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [scatter_chart_data.ScatterTouchResponse]))),
    [_painter]: dart.finalFieldType(scatter_chart_painter.ScatterChartPainter),
    [_lastTouchedSpot]: dart.fieldType(dart.nullable(scatter_chart_data.ScatterTouchedSpot))
  }));
  var data$0 = dart.privateName(scatter_chart, "ScatterChart.data");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  scatter_chart.ScatterChart = class ScatterChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new scatter_chart._ScatterChartState.new();
    }
  };
  (scatter_chart.ScatterChart.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[14], 18, 10, "data");
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    if (swapAnimationDuration == null) dart.nullFailed(I[14], 19, 14, "swapAnimationDuration");
    let swapAnimationCurve = opts && 'swapAnimationCurve' in opts ? opts.swapAnimationCurve : C[3] || CT.C3;
    if (swapAnimationCurve == null) dart.nullFailed(I[14], 20, 11, "swapAnimationCurve");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$0] = data;
    scatter_chart.ScatterChart.__proto__.new.call(this, {duration: swapAnimationDuration, curve: swapAnimationCurve, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scatter_chart.ScatterChart.prototype;
  dart.addTypeTests(scatter_chart.ScatterChart);
  dart.addTypeCaches(scatter_chart.ScatterChart);
  dart.setMethodSignature(scatter_chart.ScatterChart, () => ({
    __proto__: dart.getMethods(scatter_chart.ScatterChart.__proto__),
    createState: dart.fnType(scatter_chart._ScatterChartState, [])
  }));
  dart.setLibraryUri(scatter_chart.ScatterChart, I[15]);
  dart.setFieldSignature(scatter_chart.ScatterChart, () => ({
    __proto__: dart.getFields(scatter_chart.ScatterChart.__proto__),
    data: dart.finalFieldType(scatter_chart_data.ScatterChartData)
  }));
  var _scatterChartDataTween = dart.privateName(scatter_chart, "_scatterChartDataTween");
  var _getData = dart.privateName(scatter_chart, "_getData");
  var _withTouchedIndicators = dart.privateName(scatter_chart, "_withTouchedIndicators");
  var _handleBuiltInTouch = dart.privateName(scatter_chart, "_handleBuiltInTouch");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  scatter_chart._ScatterChartState = class _ScatterChartState extends implicit_animations.AnimatedWidgetBaseState$(scatter_chart.ScatterChart) {
    build(context) {
      if (context == null) dart.nullFailed(I[14], 36, 29, "context");
      let showingData = this[_getData]();
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(details => {
          if (details == null) dart.nullFailed(I[14], 43, 26, "details");
        }, T.LongPressStartDetailsTovoid()), child: new scatter_chart_renderer.ScatterChartLeaf.new({data: this[_withTouchedIndicators](dart.nullCheck(this[_scatterChartDataTween]).evaluate(this.animation)), targetData: this[_withTouchedIndicators](showingData), touchCallback: dart.bind(this, _handleBuiltInTouch), $creationLocationd_0dea112b090073317d4: C[4] || CT.C4}), $creationLocationd_0dea112b090073317d4: C[9] || CT.C9});
    }
    [_withTouchedIndicators](scatterChartData) {
      if (scatterChartData == null) dart.nullFailed(I[14], 52, 60, "scatterChartData");
      if (!dart.test(scatterChartData.scatterTouchData.enabled) || !dart.test(scatterChartData.scatterTouchData.handleBuiltInTouches)) {
        return scatterChartData;
      }
      return scatterChartData.copyWith({showingTooltipIndicators: this.touchedSpots});
    }
    [_getData]() {
      let scatterTouchData = this.widget.data.scatterTouchData;
      if (dart.test(scatterTouchData.enabled) && dart.test(scatterTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({scatterTouchData: this.widget.data.scatterTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch](touchResponse) {
      let t6;
      if (touchResponse == null) dart.nullFailed(I[14], 73, 49, "touchResponse");
      t6 = this.widget.data.scatterTouchData.touchCallback;
      t6 == null ? null : t6(touchResponse);
      let desiredTouch = events.PointerDownEvent.is(touchResponse.touchInput) || events.PointerMoveEvent.is(touchResponse.touchInput) || events.PointerHoverEvent.is(touchResponse.touchInput);
      if (desiredTouch && touchResponse.touchedSpot != null) {
        this.setState(dart.fn(() => {
          this.touchedSpots = T.JSArrayOfint().of([dart.nullCheck(touchResponse.touchedSpot).spotIndex]);
        }, T.VoidTovoid()));
      } else {
        this.setState(dart.fn(() => {
          this.touchedSpots = T.JSArrayOfint().of([]);
        }, T.VoidTovoid()));
      }
    }
    forEachTween(visitor) {
      if (visitor == null) dart.nullFailed(I[14], 91, 21, "visitor");
      this[_scatterChartDataTween] = scatter_chart_data.ScatterChartDataTween.as(visitor(this[_scatterChartDataTween], this[_getData](), dart.fn(value => new scatter_chart_data.ScatterChartDataTween.new({begin: scatter_chart_data.ScatterChartData.as(value), end: this.widget.data}), T.dynamicToScatterChartDataTween())));
    }
  };
  (scatter_chart._ScatterChartState.new = function() {
    this[_scatterChartDataTween] = null;
    this.touchedSpots = T.JSArrayOfint().of([]);
    scatter_chart._ScatterChartState.__proto__.new.call(this);
    ;
  }).prototype = scatter_chart._ScatterChartState.prototype;
  dart.addTypeTests(scatter_chart._ScatterChartState);
  dart.addTypeCaches(scatter_chart._ScatterChartState);
  dart.setMethodSignature(scatter_chart._ScatterChartState, () => ({
    __proto__: dart.getMethods(scatter_chart._ScatterChartState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_withTouchedIndicators]: dart.fnType(scatter_chart_data.ScatterChartData, [scatter_chart_data.ScatterChartData]),
    [_getData]: dart.fnType(scatter_chart_data.ScatterChartData, []),
    [_handleBuiltInTouch]: dart.fnType(dart.void, [scatter_chart_data.ScatterTouchResponse]),
    forEachTween: dart.fnType(dart.void, [dart.fnType(dart.nullable(tween.Tween), [dart.nullable(tween.Tween), dart.dynamic, dart.fnType(tween.Tween, [dart.dynamic])])])
  }));
  dart.setLibraryUri(scatter_chart._ScatterChartState, I[15]);
  dart.setFieldSignature(scatter_chart._ScatterChartState, () => ({
    __proto__: dart.getFields(scatter_chart._ScatterChartState.__proto__),
    [_scatterChartDataTween]: dart.fieldType(dart.nullable(scatter_chart_data.ScatterChartDataTween)),
    touchedSpots: dart.fieldType(core.List$(core.int))
  }));
  var dataSetsPosition = dart.privateName(radar_chart_painter, "RadarChartPainter.dataSetsPosition");
  var __RadarChartPainter__borderPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_borderPaint");
  var __RadarChartPainter__backgroundPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_backgroundPaint");
  var __RadarChartPainter__gridPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_gridPaint");
  var __RadarChartPainter__tickPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_tickPaint");
  var __RadarChartPainter__graphPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_graphPaint");
  var __RadarChartPainter__graphBorderPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_graphBorderPaint");
  var __RadarChartPainter__graphPointPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_graphPointPaint");
  var __RadarChartPainter__ticksTextPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_ticksTextPaint");
  var __RadarChartPainter__titleTextPaint = dart.privateName(radar_chart_painter, "_#RadarChartPainter#_titleTextPaint");
  var _backgroundPaint$ = dart.privateName(radar_chart_painter, "_backgroundPaint");
  var _borderPaint$ = dart.privateName(radar_chart_painter, "_borderPaint");
  var _gridPaint$ = dart.privateName(radar_chart_painter, "_gridPaint");
  var _tickPaint = dart.privateName(radar_chart_painter, "_tickPaint");
  var _graphPaint = dart.privateName(radar_chart_painter, "_graphPaint");
  var _graphBorderPaint = dart.privateName(radar_chart_painter, "_graphBorderPaint");
  var _graphPointPaint = dart.privateName(radar_chart_painter, "_graphPointPaint");
  var _ticksTextPaint = dart.privateName(radar_chart_painter, "_ticksTextPaint");
  var _titleTextPaint = dart.privateName(radar_chart_painter, "_titleTextPaint");
  var _calculateDataSetsPosition = dart.privateName(radar_chart_painter, "_calculateDataSetsPosition");
  var _drawGrids = dart.privateName(radar_chart_painter, "_drawGrids");
  var _drawTicks = dart.privateName(radar_chart_painter, "_drawTicks");
  var _drawTitles$ = dart.privateName(radar_chart_painter, "_drawTitles");
  var _drawDataSets = dart.privateName(radar_chart_painter, "_drawDataSets");
  var _radarCenterX = dart.privateName(radar_chart_painter, "_radarCenterX");
  var _radarCenterY = dart.privateName(radar_chart_painter, "_radarCenterY");
  var _radarRadius = dart.privateName(radar_chart_painter, "_radarRadius");
  var _getNearestTouchSpot = dart.privateName(radar_chart_painter, "_getNearestTouchSpot");
  var dataSets$ = dart.privateName(radar_chart_data, "RadarChartData.dataSets");
  var radarBackgroundColor$ = dart.privateName(radar_chart_data, "RadarChartData.radarBackgroundColor");
  var radarBorderData$ = dart.privateName(radar_chart_data, "RadarChartData.radarBorderData");
  var getTitle$ = dart.privateName(radar_chart_data, "RadarChartData.getTitle");
  var titleTextStyle$ = dart.privateName(radar_chart_data, "RadarChartData.titleTextStyle");
  var titlePositionPercentageOffset$ = dart.privateName(radar_chart_data, "RadarChartData.titlePositionPercentageOffset");
  var tickCount$ = dart.privateName(radar_chart_data, "RadarChartData.tickCount");
  var ticksTextStyle$ = dart.privateName(radar_chart_data, "RadarChartData.ticksTextStyle");
  var tickBorderData$ = dart.privateName(radar_chart_data, "RadarChartData.tickBorderData");
  var gridBorderData$ = dart.privateName(radar_chart_data, "RadarChartData.gridBorderData");
  var radarTouchData$ = dart.privateName(radar_chart_data, "RadarChartData.radarTouchData");
  var _name = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  const BaseChartData_EquatableMixin$36$ = class BaseChartData_EquatableMixin extends base_chart_data.BaseChartData {};
  (BaseChartData_EquatableMixin$36$.new = function(opts) {
    BaseChartData_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = BaseChartData_EquatableMixin$36$.prototype;
  dart.applyMixin(BaseChartData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  radar_chart_data.RadarChartData = class RadarChartData extends BaseChartData_EquatableMixin$36$ {
    get dataSets() {
      return this[dataSets$];
    }
    set dataSets(value) {
      super.dataSets = value;
    }
    get radarBackgroundColor() {
      return this[radarBackgroundColor$];
    }
    set radarBackgroundColor(value) {
      super.radarBackgroundColor = value;
    }
    get radarBorderData() {
      return this[radarBorderData$];
    }
    set radarBorderData(value) {
      super.radarBorderData = value;
    }
    get getTitle() {
      return this[getTitle$];
    }
    set getTitle(value) {
      super.getTitle = value;
    }
    get titleTextStyle() {
      return this[titleTextStyle$];
    }
    set titleTextStyle(value) {
      super.titleTextStyle = value;
    }
    get titlePositionPercentageOffset() {
      return this[titlePositionPercentageOffset$];
    }
    set titlePositionPercentageOffset(value) {
      super.titlePositionPercentageOffset = value;
    }
    get tickCount() {
      return this[tickCount$];
    }
    set tickCount(value) {
      super.tickCount = value;
    }
    get ticksTextStyle() {
      return this[ticksTextStyle$];
    }
    set ticksTextStyle(value) {
      super.ticksTextStyle = value;
    }
    get tickBorderData() {
      return this[tickBorderData$];
    }
    set tickBorderData(value) {
      super.tickBorderData = value;
    }
    get gridBorderData() {
      return this[gridBorderData$];
    }
    set gridBorderData(value) {
      super.gridBorderData = value;
    }
    get radarTouchData() {
      return this[radarTouchData$];
    }
    set radarTouchData(value) {
      super.radarTouchData = value;
    }
    get titleCount() {
      return this.dataSets[$_get](0).dataEntries[$length];
    }
    get maxEntry() {
      let maximum = this.dataSets[$first].dataEntries[$first];
      for (let dataSet of this.dataSets) {
        for (let entry of dataSet.dataEntries) {
          if (dart.notNull(entry.value) > dart.notNull(maximum.value)) maximum = entry;
        }
      }
      return maximum;
    }
    get minEntry() {
      let minimum = this.dataSets[$first].dataEntries[$first];
      for (let dataSet of this.dataSets) {
        for (let entry of dataSet.dataEntries) {
          if (dart.notNull(entry.value) < dart.notNull(minimum.value)) minimum = entry;
        }
      }
      return minimum;
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8, t15$9;
      let dataSets = opts && 'dataSets' in opts ? opts.dataSets : null;
      let radarBackgroundColor = opts && 'radarBackgroundColor' in opts ? opts.radarBackgroundColor : null;
      let radarBorderData = opts && 'radarBorderData' in opts ? opts.radarBorderData : null;
      let getTitle = opts && 'getTitle' in opts ? opts.getTitle : null;
      let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
      let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
      let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
      let ticksTextStyle = opts && 'ticksTextStyle' in opts ? opts.ticksTextStyle : null;
      let tickBorderData = opts && 'tickBorderData' in opts ? opts.tickBorderData : null;
      let gridBorderData = opts && 'gridBorderData' in opts ? opts.gridBorderData : null;
      let radarTouchData = opts && 'radarTouchData' in opts ? opts.radarTouchData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      return new radar_chart_data.RadarChartData.new({dataSets: (t15 = dataSets, t15 == null ? this.dataSets : t15), radarBackgroundColor: (t15$ = radarBackgroundColor, t15$ == null ? this.radarBackgroundColor : t15$), radarBorderData: (t15$0 = radarBorderData, t15$0 == null ? this.radarBorderData : t15$0), getTitle: (t15$1 = getTitle, t15$1 == null ? this.getTitle : t15$1), titleTextStyle: (t15$2 = titleTextStyle, t15$2 == null ? this.titleTextStyle : t15$2), titlePositionPercentageOffset: (t15$3 = titlePositionPercentageOffset, t15$3 == null ? this.titlePositionPercentageOffset : t15$3), tickCount: (t15$4 = tickCount, t15$4 == null ? this.tickCount : t15$4), ticksTextStyle: (t15$5 = ticksTextStyle, t15$5 == null ? this.ticksTextStyle : t15$5), tickBorderData: (t15$6 = tickBorderData, t15$6 == null ? this.tickBorderData : t15$6), gridBorderData: (t15$7 = gridBorderData, t15$7 == null ? this.gridBorderData : t15$7), radarTouchData: (t15$8 = radarTouchData, t15$8 == null ? this.radarTouchData : t15$8), borderData: (t15$9 = borderData, t15$9 == null ? this.borderData : t15$9)});
    }
    lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[17], 185, 37, "a");
      if (b == null) dart.nullFailed(I[17], 185, 54, "b");
      if (t == null) dart.nullFailed(I[17], 185, 64, "t");
      if (radar_chart_data.RadarChartData.is(a) && radar_chart_data.RadarChartData.is(b)) {
        return new radar_chart_data.RadarChartData.new({dataSets: lerp.lerpRadarDataSetList(a.dataSets, b.dataSets, t), radarBackgroundColor: ui.Color.lerp(a.radarBackgroundColor, b.radarBackgroundColor, t), getTitle: b.getTitle, titleTextStyle: text_style.TextStyle.lerp(a.titleTextStyle, b.titleTextStyle, t), titlePositionPercentageOffset: ui.lerpDouble(a.titlePositionPercentageOffset, b.titlePositionPercentageOffset, t), tickCount: lerp.lerpInt(a.tickCount, b.tickCount, t), ticksTextStyle: text_style.TextStyle.lerp(a.ticksTextStyle, b.ticksTextStyle, t), gridBorderData: borders.BorderSide.lerp(a.gridBorderData, b.gridBorderData, t), radarBorderData: borders.BorderSide.lerp(a.radarBorderData, b.radarBorderData, t), tickBorderData: borders.BorderSide.lerp(a.tickBorderData, b.tickBorderData, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), radarTouchData: b.radarTouchData});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.borderData, this.touchData, this.dataSets, this.radarBackgroundColor, this.radarBorderData, this.getTitle, this.titleTextStyle, this.titlePositionPercentageOffset, this.tickCount, this.ticksTextStyle, this.tickBorderData, this.gridBorderData, this.radarTouchData]);
    }
  };
  (radar_chart_data.RadarChartData.new = function(opts) {
    let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8;
    let dataSets = opts && 'dataSets' in opts ? opts.dataSets : null;
    let radarBackgroundColor = opts && 'radarBackgroundColor' in opts ? opts.radarBackgroundColor : null;
    let radarBorderData = opts && 'radarBorderData' in opts ? opts.radarBorderData : null;
    let getTitle = opts && 'getTitle' in opts ? opts.getTitle : null;
    let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
    let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
    let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
    let ticksTextStyle = opts && 'ticksTextStyle' in opts ? opts.ticksTextStyle : null;
    let tickBorderData = opts && 'tickBorderData' in opts ? opts.tickBorderData : null;
    let gridBorderData = opts && 'gridBorderData' in opts ? opts.gridBorderData : null;
    let radarTouchData = opts && 'radarTouchData' in opts ? opts.radarTouchData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    if (!(dataSets != null && dart.test(radar_extension['DashedPath|get#hasEqualDataEntriesLength'](dataSets)))) dart.assertFailed(null, I[17], 131, 16, "dataSets != null && dataSets.hasEqualDataEntriesLength");
    if (!(tickCount == null || dart.notNull(tickCount) >= 1)) dart.assertFailed("RadarChart need's at least 1 tick", I[17], 132, 16, "tickCount == null || tickCount >= 1");
    if (!(titlePositionPercentageOffset == null || dart.notNull(titlePositionPercentageOffset) >= 0 && dart.notNull(titlePositionPercentageOffset) <= 1)) dart.assertFailed("titlePositionPercentageOffset must be something between 0 and 1 ", I[17], 134, 11, "titlePositionPercentageOffset == null ||\n              titlePositionPercentageOffset >= 0 && titlePositionPercentageOffset <= 1");
    this[dataSets$] = (t15 = dataSets, t15 == null ? C[13] || CT.C13 : t15);
    this[radarBackgroundColor$] = (t15$ = radarBackgroundColor, t15$ == null ? colors$.Colors.transparent : t15$);
    this[radarBorderData$] = (t15$0 = radarBorderData, t15$0 == null ? C[14] || CT.C14 : t15$0);
    this[radarTouchData$] = (t15$1 = radarTouchData, t15$1 == null ? new radar_chart_data.RadarTouchData.new() : t15$1);
    this[getTitle$] = getTitle;
    this[titleTextStyle$] = (t15$2 = titleTextStyle, t15$2 == null ? C[17] || CT.C17 : t15$2);
    this[titlePositionPercentageOffset$] = (t15$3 = titlePositionPercentageOffset, t15$3 == null ? 0.2 : t15$3);
    this[tickCount$] = (t15$4 = tickCount, t15$4 == null ? 1 : t15$4);
    this[ticksTextStyle$] = (t15$5 = ticksTextStyle, t15$5 == null ? C[18] || CT.C18 : t15$5);
    this[tickBorderData$] = (t15$6 = tickBorderData, t15$6 == null ? C[14] || CT.C14 : t15$6);
    this[gridBorderData$] = (t15$7 = gridBorderData, t15$7 == null ? C[14] || CT.C14 : t15$7);
    radar_chart_data.RadarChartData.__proto__.new.call(this, {borderData: borderData, touchData: (t15$8 = radarTouchData, t15$8 == null ? new radar_chart_data.RadarTouchData.new() : t15$8)});
    ;
  }).prototype = radar_chart_data.RadarChartData.prototype;
  dart.addTypeTests(radar_chart_data.RadarChartData);
  dart.addTypeCaches(radar_chart_data.RadarChartData);
  dart.setMethodSignature(radar_chart_data.RadarChartData, () => ({
    __proto__: dart.getMethods(radar_chart_data.RadarChartData.__proto__),
    copyWith: dart.fnType(radar_chart_data.RadarChartData, [], {borderData: dart.nullable(base_chart_data.FlBorderData), dataSets: dart.nullable(core.List$(radar_chart_data.RadarDataSet)), getTitle: dart.nullable(dart.fnType(core.String, [core.int])), gridBorderData: dart.nullable(borders.BorderSide), radarBackgroundColor: dart.nullable(ui.Color), radarBorderData: dart.nullable(borders.BorderSide), radarTouchData: dart.nullable(radar_chart_data.RadarTouchData), tickBorderData: dart.nullable(borders.BorderSide), tickCount: dart.nullable(core.int), ticksTextStyle: dart.nullable(text_style.TextStyle), titlePositionPercentageOffset: dart.nullable(core.double), titleTextStyle: dart.nullable(text_style.TextStyle)}, {}),
    lerp: dart.fnType(radar_chart_data.RadarChartData, [base_chart_data.BaseChartData, base_chart_data.BaseChartData, core.double])
  }));
  dart.setGetterSignature(radar_chart_data.RadarChartData, () => ({
    __proto__: dart.getGetters(radar_chart_data.RadarChartData.__proto__),
    titleCount: core.int,
    maxEntry: radar_chart_data.RadarEntry,
    minEntry: radar_chart_data.RadarEntry
  }));
  dart.setLibraryUri(radar_chart_data.RadarChartData, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarChartData, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarChartData.__proto__),
    dataSets: dart.finalFieldType(core.List$(radar_chart_data.RadarDataSet)),
    radarBackgroundColor: dart.finalFieldType(ui.Color),
    radarBorderData: dart.finalFieldType(borders.BorderSide),
    getTitle: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [core.int]))),
    titleTextStyle: dart.finalFieldType(text_style.TextStyle),
    titlePositionPercentageOffset: dart.finalFieldType(core.double),
    tickCount: dart.finalFieldType(core.int),
    ticksTextStyle: dart.finalFieldType(text_style.TextStyle),
    tickBorderData: dart.finalFieldType(borders.BorderSide),
    gridBorderData: dart.finalFieldType(borders.BorderSide),
    radarTouchData: dart.finalFieldType(radar_chart_data.RadarTouchData)
  }));
  radar_chart_painter.RadarChartPainter = class RadarChartPainter extends base_chart_painter.BaseChartPainter$(radar_chart_data.RadarChartData) {
    get dataSetsPosition() {
      return this[dataSetsPosition];
    }
    set dataSetsPosition(value) {
      this[dataSetsPosition] = value;
    }
    get [_borderPaint$]() {
      let t6;
      t6 = this[__RadarChartPainter__borderPaint];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_borderPaint")) : t6;
    }
    set [_borderPaint$](t6) {
      if (t6 == null) dart.nullFailed(I[16], 13, 14, "null");
      this[__RadarChartPainter__borderPaint] = t6;
    }
    get [_backgroundPaint$]() {
      let t7;
      t7 = this[__RadarChartPainter__backgroundPaint];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("_backgroundPaint")) : t7;
    }
    set [_backgroundPaint$](t7) {
      if (t7 == null) dart.nullFailed(I[16], 13, 28, "null");
      this[__RadarChartPainter__backgroundPaint] = t7;
    }
    get [_gridPaint$]() {
      let t8;
      t8 = this[__RadarChartPainter__gridPaint];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_gridPaint")) : t8;
    }
    set [_gridPaint$](t8) {
      if (t8 == null) dart.nullFailed(I[16], 13, 46, "null");
      this[__RadarChartPainter__gridPaint] = t8;
    }
    get [_tickPaint]() {
      let t9;
      t9 = this[__RadarChartPainter__tickPaint];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_tickPaint")) : t9;
    }
    set [_tickPaint](t9) {
      if (t9 == null) dart.nullFailed(I[16], 13, 58, "null");
      this[__RadarChartPainter__tickPaint] = t9;
    }
    get [_graphPaint]() {
      let t10;
      t10 = this[__RadarChartPainter__graphPaint];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_graphPaint")) : t10;
    }
    set [_graphPaint](t10) {
      if (t10 == null) dart.nullFailed(I[16], 14, 14, "null");
      this[__RadarChartPainter__graphPaint] = t10;
    }
    get [_graphBorderPaint]() {
      let t11;
      t11 = this[__RadarChartPainter__graphBorderPaint];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_graphBorderPaint")) : t11;
    }
    set [_graphBorderPaint](t11) {
      if (t11 == null) dart.nullFailed(I[16], 14, 27, "null");
      this[__RadarChartPainter__graphBorderPaint] = t11;
    }
    get [_graphPointPaint]() {
      let t12;
      t12 = this[__RadarChartPainter__graphPointPaint];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_graphPointPaint")) : t12;
    }
    set [_graphPointPaint](t12) {
      if (t12 == null) dart.nullFailed(I[16], 14, 46, "null");
      this[__RadarChartPainter__graphPointPaint] = t12;
    }
    get [_ticksTextPaint]() {
      let t13;
      t13 = this[__RadarChartPainter__ticksTextPaint];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_ticksTextPaint")) : t13;
    }
    set [_ticksTextPaint](t13) {
      if (t13 == null) dart.nullFailed(I[16], 15, 20, "null");
      this[__RadarChartPainter__ticksTextPaint] = t13;
    }
    get [_titleTextPaint]() {
      let t14;
      t14 = this[__RadarChartPainter__titleTextPaint];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_titleTextPaint")) : t14;
    }
    set [_titleTextPaint](t14) {
      if (t14 == null) dart.nullFailed(I[16], 15, 37, "null");
      this[__RadarChartPainter__titleTextPaint] = t14;
    }
    paint(canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[16], 47, 28, "canvasWrapper");
      T.PaintHolderOfRadarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[16], 47, 71, "holder");
      super.paint(canvasWrapper, holder);
      let data = holder.data;
      if (dart.test(data.dataSets[$isEmpty])) {
        return;
      }
      this.dataSetsPosition = this[_calculateDataSetsPosition](canvasWrapper.size, holder);
      this[_drawGrids](canvasWrapper, holder);
      this[_drawTicks](canvasWrapper, holder);
      this[_drawTitles$](canvasWrapper, holder);
      this[_drawDataSets](canvasWrapper, holder);
    }
    [_drawTicks](canvasWrapper, holder) {
      let t15, t15$;
      if (canvasWrapper == null) dart.nullFailed(I[16], 63, 33, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[16], 63, 76, "holder");
      let data = holder.data;
      let size = canvasWrapper.size;
      let centerX = this[_radarCenterX](size);
      let centerY = this[_radarCenterY](size);
      let centerOffset = new ui.Offset.new(centerX, centerY);
      let radius = this[_radarRadius](size);
      this[_backgroundPaint$].color = data.radarBackgroundColor;
      canvasWrapper.drawCircle(centerOffset, radius, this[_backgroundPaint$]);
      t15 = this[_borderPaint$];
      (() => {
        t15.color = data.radarBorderData.color;
        t15.strokeWidth = data.radarBorderData.width;
        return t15;
      })();
      canvasWrapper.drawCircle(centerOffset, radius, this[_borderPaint$]);
      let dataSetMaxValue = data.maxEntry.value;
      let dataSetMinValue = data.minEntry.value;
      let tickSpace = (dart.notNull(dataSetMaxValue) - dart.notNull(dataSetMinValue)) / dart.notNull(data.tickCount);
      let ticks = T.JSArrayOfdouble().of([]);
      for (let tick = dataSetMinValue; dart.notNull(tick) <= dart.notNull(dataSetMaxValue); tick = dart.notNull(tick) + tickSpace) {
        ticks[$add](tick);
      }
      let tickDistance = dart.notNull(radius) / dart.notNull(ticks[$length]);
      t15$ = this[_tickPaint];
      (() => {
        t15$.color = data.tickBorderData.color;
        t15$.strokeWidth = data.tickBorderData.width;
        return t15$;
      })();
      ticks[$sublist](0, dart.notNull(ticks[$length]) - 1)[$asMap]()[$forEach](dart.fn((index, tick) => {
        let t15;
        if (index == null) dart.nullFailed(I[16], 104, 8, "index");
        if (tick == null) dart.nullFailed(I[16], 104, 15, "tick");
        let tickRadius = tickDistance * (dart.notNull(index) + 1);
        canvasWrapper.drawCircle(centerOffset, tickRadius, this[_tickPaint]);
        t15 = this[_ticksTextPaint];
        (() => {
          t15.text = new text_span.TextSpan.new({text: tick[$toStringAsFixed](1), style: data.ticksTextStyle});
          t15.textDirection = ui.TextDirection.ltr;
          return t15;
        })();
        this[_ticksTextPaint].layout({minWidth: 0.0, maxWidth: size.width});
        canvasWrapper.drawText(this[_ticksTextPaint], new ui.Offset.new(dart.notNull(centerX) + 5, dart.notNull(centerY) - tickRadius - dart.notNull(this[_ticksTextPaint].height)));
      }, T.intAnddoubleTovoid()));
    }
    [_drawGrids](canvasWrapper, holder) {
      let t15;
      if (canvasWrapper == null) dart.nullFailed(I[16], 123, 33, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[16], 123, 76, "holder");
      let data = holder.data;
      let size = canvasWrapper.size;
      let centerX = this[_radarCenterX](size);
      let centerY = this[_radarCenterY](size);
      let centerOffset = new ui.Offset.new(centerX, centerY);
      let radius = this[_radarRadius](size);
      let angle = 2 * 3.141592653589793 / dart.notNull(data.titleCount);
      for (let index = 0; index < dart.notNull(data.titleCount); index = index + 1) {
        let endX = dart.notNull(centerX) + dart.notNull(radius) * math.cos(angle * index - 3.141592653589793 / 2);
        let endY = dart.notNull(centerY) + dart.notNull(radius) * math.sin(angle * index - 3.141592653589793 / 2);
        let gridOffset = new ui.Offset.new(endX, endY);
        t15 = this[_gridPaint$];
        (() => {
          t15.color = data.gridBorderData.color;
          t15.strokeWidth = data.gridBorderData.width;
          return t15;
        })();
        canvasWrapper.drawLine(centerOffset, gridOffset, this[_gridPaint$]);
      }
    }
    [_drawTitles$](canvasWrapper, holder) {
      let t15;
      if (canvasWrapper == null) dart.nullFailed(I[16], 150, 34, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[16], 150, 77, "holder");
      let data = holder.data;
      if (data.getTitle == null) return;
      let size = canvasWrapper.size;
      let centerX = this[_radarCenterX](size);
      let centerY = this[_radarCenterY](size);
      let radius = this[_radarRadius](size);
      let angle = 2 * 3.141592653589793 / dart.notNull(data.titleCount);
      let style = data.titleTextStyle;
      t15 = this[_titleTextPaint];
      (() => {
        t15.textAlign = ui.TextAlign.center;
        t15.textDirection = ui.TextDirection.ltr;
        t15.textScaleFactor = holder.textScale;
        return t15;
      })();
      for (let index = 0; index < dart.notNull(data.titleCount); index = index + 1) {
        let title = dart.nullCheck(data.getTitle)(index);
        let xAngle = math.cos(angle * index - 3.141592653589793 / 2);
        let yAngle = math.sin(angle * index - 3.141592653589793 / 2);
        let span = new text_span.TextSpan.new({text: title, style: style});
        this[_titleTextPaint].text = span;
        this[_titleTextPaint].layout();
        canvasWrapper.save();
        let titlePositionPercentageOffset = data.titlePositionPercentageOffset;
        let threshold = 1.0 + dart.notNull(titlePositionPercentageOffset);
        let featureOffset = new ui.Offset.new(dart.notNull(centerX) + threshold * dart.notNull(radius) * xAngle, dart.notNull(centerY) + threshold * dart.notNull(radius) * yAngle);
        canvasWrapper.translate(featureOffset.dx, featureOffset.dy);
        canvasWrapper.rotate(angle * index);
        canvasWrapper.drawText(this[_titleTextPaint], ui.Offset.zero['-'](new ui.Offset.new(dart.notNull(this[_titleTextPaint].width) / 2, dart.notNull(this[_titleTextPaint].height) / 2)));
        canvasWrapper.restore();
      }
    }
    [_drawDataSets](canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[16], 197, 36, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[16], 197, 79, "holder");
      let data = holder.data;
      dart.nullCheck(this.dataSetsPosition)[$asMap]()[$forEach](dart.fn((index, dataSetOffset) => {
        let t15, t15$, t15$0;
        if (index == null) dart.nullFailed(I[16], 200, 40, "index");
        if (dataSetOffset == null) dart.nullFailed(I[16], 200, 47, "dataSetOffset");
        let graph = data.dataSets[$_get](index);
        t15 = this[_graphPaint];
        (() => {
          t15.color = graph.fillColor.withOpacity(dart.notNull(graph.fillColor.opacity) - 0.2);
          t15.style = ui.PaintingStyle.fill;
          return t15;
        })();
        t15$ = this[_graphBorderPaint];
        (() => {
          t15$.color = graph.borderColor;
          t15$.style = ui.PaintingStyle.stroke;
          t15$.strokeWidth = graph.borderWidth;
          return t15$;
        })();
        t15$0 = this[_graphPointPaint];
        (() => {
          t15$0.color = this[_graphBorderPaint].color;
          t15$0.style = ui.PaintingStyle.fill;
          return t15$0;
        })();
        let path = ui.Path.new();
        let firstOffset = new ui.Offset.new(dataSetOffset.entriesOffset[$first].dx, dataSetOffset.entriesOffset[$first].dy);
        path.moveTo(firstOffset.dx, firstOffset.dy);
        canvasWrapper.drawCircle(firstOffset, graph.entryRadius, this[_graphPointPaint]);
        dataSetOffset.entriesOffset[$asMap]()[$forEach](dart.fn((index, pointOffset) => {
          if (index == null) dart.nullFailed(I[16], 229, 52, "index");
          if (pointOffset == null) dart.nullFailed(I[16], 229, 59, "pointOffset");
          if (index === 0) return;
          path.lineTo(pointOffset.dx, pointOffset.dy);
          canvasWrapper.drawCircle(pointOffset, graph.entryRadius, this[_graphPointPaint]);
        }, T.intAndOffsetTovoid()));
        path.close();
        canvasWrapper.drawPath(path, this[_graphPaint]);
        canvasWrapper.drawPath(path, this[_graphBorderPaint]);
      }, T.intAndRadarDataSetsPositionTovoid()));
    }
    handleTouch(touchInput, size, holder) {
      if (touchInput == null) dart.nullFailed(I[16], 248, 20, "touchInput");
      if (size == null) dart.nullFailed(I[16], 248, 37, "size");
      if (holder == null) dart.nullFailed(I[16], 248, 71, "holder");
      return this[_getNearestTouchSpot](size, touchInput.localPosition, this.dataSetsPosition, holder);
    }
    [_radarCenterY](size) {
      if (size == null) dart.nullFailed(I[16], 252, 29, "size");
      return dart.notNull(size.height) / 2.0;
    }
    [_radarCenterX](size) {
      if (size == null) dart.nullFailed(I[16], 254, 29, "size");
      return dart.notNull(size.width) / 2.0;
    }
    [_radarRadius](size) {
      if (size == null) dart.nullFailed(I[16], 256, 28, "size");
      return math.min(core.double, this[_radarCenterX](size), this[_radarCenterY](size)) * 0.8;
    }
    [_getNearestTouchSpot](viewSize, touchedPoint, radarDataSetsPosition, holder) {
      if (viewSize == null) dart.nullFailed(I[16], 259, 10, "viewSize");
      if (touchedPoint == null) dart.nullFailed(I[16], 260, 12, "touchedPoint");
      if (holder == null) dart.nullFailed(I[16], 262, 33, "holder");
      let targetData = holder.targetData;
      radarDataSetsPosition == null ? radarDataSetsPosition = this[_calculateDataSetsPosition](viewSize, holder) : null;
      for (let i = 0; i < dart.notNull(radarDataSetsPosition[$length]); i = i + 1) {
        let dataSetPosition = radarDataSetsPosition[$_get](i);
        for (let j = 0; j < dart.notNull(dataSetPosition.entriesOffset[$length]); j = j + 1) {
          let entryOffset = dataSetPosition.entriesOffset[$_get](j);
          if ((dart.notNull(touchedPoint.dx) - dart.notNull(entryOffset.dx))[$abs]() <= dart.notNull(targetData.radarTouchData.touchSpotThreshold) && (dart.notNull(touchedPoint.dy) - dart.notNull(entryOffset.dy))[$abs]() <= dart.notNull(targetData.radarTouchData.touchSpotThreshold)) {
            return new radar_chart_data.RadarTouchedSpot.new(targetData.dataSets[$_get](i), i, targetData.dataSets[$_get](i).dataEntries[$_get](j), j, new axis_chart_data.FlSpot.new(entryOffset.dx, entryOffset.dy), entryOffset);
          }
        }
      }
      return null;
    }
    [_calculateDataSetsPosition](viewSize, holder) {
      if (viewSize == null) dart.nullFailed(I[16], 290, 10, "viewSize");
      if (holder == null) dart.nullFailed(I[16], 291, 33, "holder");
      let data = holder.data;
      let centerX = this[_radarCenterX](viewSize);
      let centerY = this[_radarCenterY](viewSize);
      let radius = this[_radarRadius](viewSize);
      let scale = dart.notNull(radius) / dart.notNull(data.maxEntry.value);
      let angle = 2 * 3.141592653589793 / dart.notNull(data.titleCount);
      let dataSetsPosition = T.ListOfRadarDataSetsPosition().filled(data.dataSets[$length], new radar_chart_painter.RadarDataSetsPosition.new(T.JSArrayOfOffset().of([])));
      for (let i = 0; i < dart.notNull(data.dataSets[$length]); i = i + 1) {
        let dataSet = data.dataSets[$_get](i);
        let entriesOffset = T.ListOfOffset().filled(dataSet.dataEntries[$length], ui.Offset.zero);
        for (let j = 0; j < dart.notNull(dataSet.dataEntries[$length]); j = j + 1) {
          let point = dataSet.dataEntries[$_get](j);
          let xAngle = math.cos(angle * j - 3.141592653589793 / 2);
          let yAngle = math.sin(angle * j - 3.141592653589793 / 2);
          let scaledPoint = scale * dart.notNull(point.value);
          let entryOffset = new ui.Offset.new(dart.notNull(centerX) + scaledPoint * xAngle, dart.notNull(centerY) + scaledPoint * yAngle);
          entriesOffset[$_set](j, entryOffset);
        }
        dataSetsPosition[$_set](i, new radar_chart_painter.RadarDataSetsPosition.new(entriesOffset));
      }
      return dataSetsPosition;
    }
  };
  (radar_chart_painter.RadarChartPainter.new = function() {
    let t6, t6$, t6$0, t6$1;
    this[__RadarChartPainter__borderPaint] = null;
    this[__RadarChartPainter__backgroundPaint] = null;
    this[__RadarChartPainter__gridPaint] = null;
    this[__RadarChartPainter__tickPaint] = null;
    this[__RadarChartPainter__graphPaint] = null;
    this[__RadarChartPainter__graphBorderPaint] = null;
    this[__RadarChartPainter__graphPointPaint] = null;
    this[__RadarChartPainter__ticksTextPaint] = null;
    this[__RadarChartPainter__titleTextPaint] = null;
    this[dataSetsPosition] = null;
    radar_chart_painter.RadarChartPainter.__proto__.new.call(this);
    this[_backgroundPaint$] = (t6 = ui.Paint.new(), (() => {
      t6.style = ui.PaintingStyle.fill;
      t6.isAntiAlias = true;
      return t6;
    })());
    this[_borderPaint$] = (t6$ = ui.Paint.new(), (() => {
      t6$.style = ui.PaintingStyle.stroke;
      return t6$;
    })());
    this[_gridPaint$] = (t6$0 = ui.Paint.new(), (() => {
      t6$0.style = ui.PaintingStyle.stroke;
      return t6$0;
    })());
    this[_tickPaint] = (t6$1 = ui.Paint.new(), (() => {
      t6$1.style = ui.PaintingStyle.stroke;
      return t6$1;
    })());
    this[_graphPaint] = ui.Paint.new();
    this[_graphBorderPaint] = ui.Paint.new();
    this[_graphPointPaint] = ui.Paint.new();
    this[_ticksTextPaint] = new text_painter.TextPainter.new();
    this[_titleTextPaint] = new text_painter.TextPainter.new();
  }).prototype = radar_chart_painter.RadarChartPainter.prototype;
  dart.addTypeTests(radar_chart_painter.RadarChartPainter);
  dart.addTypeCaches(radar_chart_painter.RadarChartPainter);
  dart.setMethodSignature(radar_chart_painter.RadarChartPainter, () => ({
    __proto__: dart.getMethods(radar_chart_painter.RadarChartPainter.__proto__),
    [_drawTicks]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    [_drawGrids]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    [_drawTitles$]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    [_drawDataSets]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    handleTouch: dart.fnType(dart.nullable(radar_chart_data.RadarTouchedSpot), [events.PointerEvent, ui.Size, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    [_radarCenterY]: dart.fnType(core.double, [ui.Size]),
    [_radarCenterX]: dart.fnType(core.double, [ui.Size]),
    [_radarRadius]: dart.fnType(core.double, [ui.Size]),
    [_getNearestTouchSpot]: dart.fnType(dart.nullable(radar_chart_data.RadarTouchedSpot), [ui.Size, ui.Offset, dart.nullable(core.List$(radar_chart_painter.RadarDataSetsPosition)), base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)]),
    [_calculateDataSetsPosition]: dart.fnType(core.List$(radar_chart_painter.RadarDataSetsPosition), [ui.Size, base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)])
  }));
  dart.setGetterSignature(radar_chart_painter.RadarChartPainter, () => ({
    __proto__: dart.getGetters(radar_chart_painter.RadarChartPainter.__proto__),
    [_borderPaint$]: ui.Paint,
    [_backgroundPaint$]: ui.Paint,
    [_gridPaint$]: ui.Paint,
    [_tickPaint]: ui.Paint,
    [_graphPaint]: ui.Paint,
    [_graphBorderPaint]: ui.Paint,
    [_graphPointPaint]: ui.Paint,
    [_ticksTextPaint]: text_painter.TextPainter,
    [_titleTextPaint]: text_painter.TextPainter
  }));
  dart.setSetterSignature(radar_chart_painter.RadarChartPainter, () => ({
    __proto__: dart.getSetters(radar_chart_painter.RadarChartPainter.__proto__),
    [_borderPaint$]: ui.Paint,
    [_backgroundPaint$]: ui.Paint,
    [_gridPaint$]: ui.Paint,
    [_tickPaint]: ui.Paint,
    [_graphPaint]: ui.Paint,
    [_graphBorderPaint]: ui.Paint,
    [_graphPointPaint]: ui.Paint,
    [_ticksTextPaint]: text_painter.TextPainter,
    [_titleTextPaint]: text_painter.TextPainter
  }));
  dart.setLibraryUri(radar_chart_painter.RadarChartPainter, I[19]);
  dart.setFieldSignature(radar_chart_painter.RadarChartPainter, () => ({
    __proto__: dart.getFields(radar_chart_painter.RadarChartPainter.__proto__),
    [__RadarChartPainter__borderPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__backgroundPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__gridPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__tickPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__graphPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__graphBorderPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__graphPointPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__RadarChartPainter__ticksTextPaint]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    [__RadarChartPainter__titleTextPaint]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    dataSetsPosition: dart.fieldType(dart.nullable(core.List$(radar_chart_painter.RadarDataSetsPosition)))
  }));
  var entriesOffset$ = dart.privateName(radar_chart_painter, "RadarDataSetsPosition.entriesOffset");
  radar_chart_painter.RadarDataSetsPosition = class RadarDataSetsPosition extends core.Object {
    get entriesOffset() {
      return this[entriesOffset$];
    }
    set entriesOffset(value) {
      super.entriesOffset = value;
    }
  };
  (radar_chart_painter.RadarDataSetsPosition.new = function(entriesOffset) {
    if (entriesOffset == null) dart.nullFailed(I[16], 333, 36, "entriesOffset");
    this[entriesOffset$] = entriesOffset;
    ;
  }).prototype = radar_chart_painter.RadarDataSetsPosition.prototype;
  dart.addTypeTests(radar_chart_painter.RadarDataSetsPosition);
  dart.addTypeCaches(radar_chart_painter.RadarDataSetsPosition);
  dart.setLibraryUri(radar_chart_painter.RadarDataSetsPosition, I[19]);
  dart.setFieldSignature(radar_chart_painter.RadarDataSetsPosition, () => ({
    __proto__: dart.getFields(radar_chart_painter.RadarDataSetsPosition.__proto__),
    entriesOffset: dart.finalFieldType(core.List$(ui.Offset))
  }));
  var data$1 = dart.privateName(radar_chart_renderer, "RadarChartLeaf.data");
  var targetData$0 = dart.privateName(radar_chart_renderer, "RadarChartLeaf.targetData");
  var touchCallback$0 = dart.privateName(radar_chart_renderer, "RadarChartLeaf.touchCallback");
  radar_chart_renderer.RadarChartLeaf = class RadarChartLeaf extends framework.LeafRenderObjectWidget {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
    get targetData() {
      return this[targetData$0];
    }
    set targetData(value) {
      super.targetData = value;
    }
    get touchCallback() {
      return this[touchCallback$0];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[20], 21, 52, "context");
      return new radar_chart_renderer.RenderRadarChart.new(this.data, this.targetData, media_query.MediaQuery.of(context).textScaleFactor, this.touchCallback);
    }
    updateRenderObject(context, renderObject) {
      let t15;
      if (context == null) dart.nullFailed(I[20], 25, 40, "context");
      radar_chart_renderer.RenderRadarChart.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[20], 25, 66, "renderObject");
      t15 = renderObject;
      (() => {
        t15.data = this.data;
        t15.targetData = this.targetData;
        t15.textScale = media_query.MediaQuery.of(context).textScaleFactor;
        t15.touchCallback = this.touchCallback;
        return t15;
      })();
    }
  };
  (radar_chart_renderer.RadarChartLeaf.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[20], 13, 49, "data");
    let targetData = opts && 'targetData' in opts ? opts.targetData : null;
    if (targetData == null) dart.nullFailed(I[20], 13, 69, "targetData");
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$1] = data;
    this[targetData$0] = targetData;
    this[touchCallback$0] = touchCallback;
    radar_chart_renderer.RadarChartLeaf.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = radar_chart_renderer.RadarChartLeaf.prototype;
  dart.addTypeTests(radar_chart_renderer.RadarChartLeaf);
  dart.addTypeCaches(radar_chart_renderer.RadarChartLeaf);
  dart.setMethodSignature(radar_chart_renderer.RadarChartLeaf, () => ({
    __proto__: dart.getMethods(radar_chart_renderer.RadarChartLeaf.__proto__),
    createRenderObject: dart.fnType(radar_chart_renderer.RenderRadarChart, [framework.BuildContext])
  }));
  dart.setLibraryUri(radar_chart_renderer.RadarChartLeaf, I[21]);
  dart.setFieldSignature(radar_chart_renderer.RadarChartLeaf, () => ({
    __proto__: dart.getFields(radar_chart_renderer.RadarChartLeaf.__proto__),
    data: dart.finalFieldType(radar_chart_data.RadarChartData),
    targetData: dart.finalFieldType(radar_chart_data.RadarChartData),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [radar_chart_data.RadarTouchResponse])))
  }));
  var _painter$ = dart.privateName(radar_chart_renderer, "_painter");
  var _lastTouchedSpot$ = dart.privateName(radar_chart_renderer, "_lastTouchedSpot");
  var _data$ = dart.privateName(radar_chart_renderer, "_data");
  var _targetData$ = dart.privateName(radar_chart_renderer, "_targetData");
  var _textScale$ = dart.privateName(radar_chart_renderer, "_textScale");
  var _touchCallback$ = dart.privateName(radar_chart_renderer, "_touchCallback");
  radar_chart_renderer.RenderRadarChart = class RenderRadarChart extends box.RenderBox {
    get data() {
      return this[_data$];
    }
    set data(value) {
      if (value == null) dart.nullFailed(I[20], 45, 27, "value");
      if (dart.equals(this[_data$], value)) return;
      this[_data$] = value;
      this.markNeedsPaint();
    }
    get targetData() {
      return this[_targetData$];
    }
    set targetData(value) {
      if (value == null) dart.nullFailed(I[20], 53, 33, "value");
      if (dart.equals(this[_targetData$], value)) return;
      this[_targetData$] = value;
      this.markNeedsPaint();
    }
    get textScale() {
      return this[_textScale$];
    }
    set textScale(value) {
      if (value == null) dart.nullFailed(I[20], 61, 24, "value");
      if (this[_textScale$] == value) return;
      this[_textScale$] = value;
      this.markNeedsPaint();
    }
    set touchCallback(value) {
      this[_touchCallback$] = value;
    }
    get paintHolder() {
      return new (T.PaintHolderOfRadarChartData()).new(this.data, this.targetData, this.textScale);
    }
    performLayout() {
      this.size = this.computeDryLayout(this.constraints);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[20], 86, 40, "constraints");
      return new ui.Size.new(constraints.maxWidth, constraints.maxHeight);
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[20], 91, 30, "context");
      if (offset == null) dart.nullFailed(I[20], 91, 46, "offset");
      let canvas = context.canvas;
      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      this[_painter$].paint(new canvas_wrapper.CanvasWrapper.new(canvas, this.size), this.paintHolder);
      canvas.restore();
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[20], 100, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      let t15, t15$;
      if (event == null) dart.nullFailed(I[20], 103, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[20], 103, 66, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[20], 104, 12, "debugHandleEvent(event, entry)");
      if (this[_touchCallback$] == null) {
        return;
      }
      let response = new radar_chart_data.RadarTouchResponse.new(null, event, false);
      let touchedSpot = this[_painter$].handleTouch(event, this.size, this.paintHolder);
      if (touchedSpot == null) {
        t15 = this[_touchCallback$];
        t15 == null ? null : t15(response);
        return;
      }
      response = response.copyWith({touchedSpot: touchedSpot});
      if (events.PointerDownEvent.is(event)) {
        this[_lastTouchedSpot$] = touchedSpot;
      } else if (events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_lastTouchedSpot$], touchedSpot)) {
          response = response.copyWith({clickHappened: true});
        }
        this[_lastTouchedSpot$] = null;
      }
      t15$ = this[_touchCallback$];
      t15$ == null ? null : t15$(response);
    }
  };
  (radar_chart_renderer.RenderRadarChart.new = function(data, targetData, textScale, touchCallback) {
    if (data == null) dart.nullFailed(I[20], 36, 35, "data");
    if (targetData == null) dart.nullFailed(I[20], 36, 56, "targetData");
    if (textScale == null) dart.nullFailed(I[20], 36, 75, "textScale");
    this[_painter$] = new radar_chart_painter.RadarChartPainter.new();
    this[_lastTouchedSpot$] = null;
    this[_data$] = data;
    this[_targetData$] = targetData;
    this[_textScale$] = textScale;
    this[_touchCallback$] = touchCallback;
    radar_chart_renderer.RenderRadarChart.__proto__.new.call(this);
    ;
  }).prototype = radar_chart_renderer.RenderRadarChart.prototype;
  dart.addTypeTests(radar_chart_renderer.RenderRadarChart);
  dart.addTypeCaches(radar_chart_renderer.RenderRadarChart);
  dart.setGetterSignature(radar_chart_renderer.RenderRadarChart, () => ({
    __proto__: dart.getGetters(radar_chart_renderer.RenderRadarChart.__proto__),
    data: radar_chart_data.RadarChartData,
    targetData: radar_chart_data.RadarChartData,
    textScale: core.double,
    paintHolder: base_chart_painter.PaintHolder$(radar_chart_data.RadarChartData)
  }));
  dart.setSetterSignature(radar_chart_renderer.RenderRadarChart, () => ({
    __proto__: dart.getSetters(radar_chart_renderer.RenderRadarChart.__proto__),
    data: radar_chart_data.RadarChartData,
    targetData: radar_chart_data.RadarChartData,
    textScale: core.double,
    touchCallback: dart.nullable(dart.fnType(dart.void, [radar_chart_data.RadarTouchResponse]))
  }));
  dart.setLibraryUri(radar_chart_renderer.RenderRadarChart, I[21]);
  dart.setFieldSignature(radar_chart_renderer.RenderRadarChart, () => ({
    __proto__: dart.getFields(radar_chart_renderer.RenderRadarChart.__proto__),
    [_data$]: dart.fieldType(radar_chart_data.RadarChartData),
    [_targetData$]: dart.fieldType(radar_chart_data.RadarChartData),
    [_textScale$]: dart.fieldType(core.double),
    [_touchCallback$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [radar_chart_data.RadarTouchResponse]))),
    [_painter$]: dart.finalFieldType(radar_chart_painter.RadarChartPainter),
    [_lastTouchedSpot$]: dart.fieldType(dart.nullable(radar_chart_data.RadarTouchedSpot))
  }));
  var data$2 = dart.privateName(radar_chart, "RadarChart.data");
  radar_chart.RadarChart = class RadarChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$2];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new radar_chart._RadarChartState.new();
    }
  };
  (radar_chart.RadarChart.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[22], 16, 10, "data");
    let key = opts && 'key' in opts ? opts.key : null;
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    if (swapAnimationDuration == null) dart.nullFailed(I[22], 18, 14, "swapAnimationDuration");
    let swapAnimationCurve = opts && 'swapAnimationCurve' in opts ? opts.swapAnimationCurve : C[3] || CT.C3;
    if (swapAnimationCurve == null) dart.nullFailed(I[22], 19, 11, "swapAnimationCurve");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$2] = data;
    radar_chart.RadarChart.__proto__.new.call(this, {key: key, duration: swapAnimationDuration, curve: swapAnimationCurve, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = radar_chart.RadarChart.prototype;
  dart.addTypeTests(radar_chart.RadarChart);
  dart.addTypeCaches(radar_chart.RadarChart);
  dart.setMethodSignature(radar_chart.RadarChart, () => ({
    __proto__: dart.getMethods(radar_chart.RadarChart.__proto__),
    createState: dart.fnType(radar_chart._RadarChartState, [])
  }));
  dart.setLibraryUri(radar_chart.RadarChart, I[23]);
  dart.setFieldSignature(radar_chart.RadarChart, () => ({
    __proto__: dart.getFields(radar_chart.RadarChart.__proto__),
    data: dart.finalFieldType(radar_chart_data.RadarChartData)
  }));
  var _radarChartDataTween = dart.privateName(radar_chart, "_radarChartDataTween");
  var _getDate = dart.privateName(radar_chart, "_getDate");
  radar_chart._RadarChartState = class _RadarChartState extends implicit_animations.AnimatedWidgetBaseState$(radar_chart.RadarChart) {
    build(context) {
      if (context == null) dart.nullFailed(I[22], 36, 29, "context");
      let showingData = this[_getDate]();
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(details => {
          if (details == null) dart.nullFailed(I[22], 43, 26, "details");
        }, T.LongPressStartDetailsTovoid()), child: new radar_chart_renderer.RadarChartLeaf.new({data: dart.nullCheck(this[_radarChartDataTween]).evaluate(this.animation), targetData: showingData, touchCallback: showingData.radarTouchData.touchCallback, $creationLocationd_0dea112b090073317d4: C[19] || CT.C19}), $creationLocationd_0dea112b090073317d4: C[20] || CT.C20});
    }
    [_getDate]() {
      return this.widget.data;
    }
    forEachTween(visitor) {
      if (visitor == null) dart.nullFailed(I[22], 57, 21, "visitor");
      this[_radarChartDataTween] = radar_chart_data.RadarChartDataTween.as(visitor(this[_radarChartDataTween], this.widget.data, dart.fn(value => new radar_chart_data.RadarChartDataTween.new({begin: radar_chart_data.RadarChartData.as(value), end: this.widget.data}), T.dynamicToRadarChartDataTween())));
    }
  };
  (radar_chart._RadarChartState.new = function() {
    this[_radarChartDataTween] = null;
    radar_chart._RadarChartState.__proto__.new.call(this);
    ;
  }).prototype = radar_chart._RadarChartState.prototype;
  dart.addTypeTests(radar_chart._RadarChartState);
  dart.addTypeCaches(radar_chart._RadarChartState);
  dart.setMethodSignature(radar_chart._RadarChartState, () => ({
    __proto__: dart.getMethods(radar_chart._RadarChartState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getDate]: dart.fnType(radar_chart_data.RadarChartData, []),
    forEachTween: dart.fnType(dart.void, [dart.fnType(dart.nullable(tween.Tween), [dart.nullable(tween.Tween), dart.dynamic, dart.fnType(tween.Tween, [dart.dynamic])])])
  }));
  dart.setLibraryUri(radar_chart._RadarChartState, I[23]);
  dart.setFieldSignature(radar_chart._RadarChartState, () => ({
    __proto__: dart.getFields(radar_chart._RadarChartState.__proto__),
    [_radarChartDataTween]: dart.fieldType(dart.nullable(radar_chart_data.RadarChartDataTween))
  }));
  var sections$ = dart.privateName(pie_chart_data, "PieChartData.sections");
  var centerSpaceRadius$ = dart.privateName(pie_chart_data, "PieChartData.centerSpaceRadius");
  var centerSpaceColor$ = dart.privateName(pie_chart_data, "PieChartData.centerSpaceColor");
  var sectionsSpace$ = dart.privateName(pie_chart_data, "PieChartData.sectionsSpace");
  var startDegreeOffset$ = dart.privateName(pie_chart_data, "PieChartData.startDegreeOffset");
  var pieTouchData$ = dart.privateName(pie_chart_data, "PieChartData.pieTouchData");
  const BaseChartData_EquatableMixin$36$0 = class BaseChartData_EquatableMixin extends base_chart_data.BaseChartData {};
  (BaseChartData_EquatableMixin$36$0.new = function(opts) {
    BaseChartData_EquatableMixin$36$0.__proto__.new.call(this, opts);
  }).prototype = BaseChartData_EquatableMixin$36$0.prototype;
  dart.applyMixin(BaseChartData_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  pie_chart_data.PieChartData = class PieChartData extends BaseChartData_EquatableMixin$36$0 {
    get sections() {
      return this[sections$];
    }
    set sections(value) {
      super.sections = value;
    }
    get centerSpaceRadius() {
      return this[centerSpaceRadius$];
    }
    set centerSpaceRadius(value) {
      super.centerSpaceRadius = value;
    }
    get centerSpaceColor() {
      return this[centerSpaceColor$];
    }
    set centerSpaceColor(value) {
      super.centerSpaceColor = value;
    }
    get sectionsSpace() {
      return this[sectionsSpace$];
    }
    set sectionsSpace(value) {
      super.sectionsSpace = value;
    }
    get startDegreeOffset() {
      return this[startDegreeOffset$];
    }
    set startDegreeOffset(value) {
      super.startDegreeOffset = value;
    }
    get pieTouchData() {
      return this[pieTouchData$];
    }
    set pieTouchData(value) {
      super.pieTouchData = value;
    }
    get sumValue() {
      return this.sections[$map](core.double, dart.fn(data => {
        if (data == null) dart.nullFailed(I[24], 35, 21, "data");
        return data.value;
      }, T.PieChartSectionDataTodouble()))[$reduce](dart.fn((first, second) => {
        if (first == null) dart.nullFailed(I[24], 35, 50, "first");
        if (second == null) dart.nullFailed(I[24], 35, 57, "second");
        return dart.notNull(first) + dart.notNull(second);
      }, T.doubleAnddoubleTodouble()));
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4;
      let sections = opts && 'sections' in opts ? opts.sections : null;
      let centerSpaceRadius = opts && 'centerSpaceRadius' in opts ? opts.centerSpaceRadius : null;
      let centerSpaceColor = opts && 'centerSpaceColor' in opts ? opts.centerSpaceColor : null;
      let sectionsSpace = opts && 'sectionsSpace' in opts ? opts.sectionsSpace : null;
      let startDegreeOffset = opts && 'startDegreeOffset' in opts ? opts.startDegreeOffset : null;
      let pieTouchData = opts && 'pieTouchData' in opts ? opts.pieTouchData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      return new pie_chart_data.PieChartData.new({sections: (t15 = sections, t15 == null ? this.sections : t15), centerSpaceRadius: (t15$ = centerSpaceRadius, t15$ == null ? this.centerSpaceRadius : t15$), centerSpaceColor: (t15$0 = centerSpaceColor, t15$0 == null ? this.centerSpaceColor : t15$0), sectionsSpace: (t15$1 = sectionsSpace, t15$1 == null ? this.sectionsSpace : t15$1), startDegreeOffset: (t15$2 = startDegreeOffset, t15$2 == null ? this.startDegreeOffset : t15$2), pieTouchData: (t15$3 = pieTouchData, t15$3 == null ? this.pieTouchData : t15$3), borderData: (t15$4 = borderData, t15$4 == null ? this.borderData : t15$4)});
    }
    lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[24], 91, 35, "a");
      if (b == null) dart.nullFailed(I[24], 91, 52, "b");
      if (t == null) dart.nullFailed(I[24], 91, 62, "t");
      if (pie_chart_data.PieChartData.is(a) && pie_chart_data.PieChartData.is(b)) {
        return new pie_chart_data.PieChartData.new({borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), centerSpaceColor: ui.Color.lerp(a.centerSpaceColor, b.centerSpaceColor, t), centerSpaceRadius: lerp.lerpDoubleAllowInfinity(a.centerSpaceRadius, b.centerSpaceRadius, t), pieTouchData: b.pieTouchData, sectionsSpace: ui.lerpDouble(a.sectionsSpace, b.sectionsSpace, t), startDegreeOffset: ui.lerpDouble(a.startDegreeOffset, b.startDegreeOffset, t), sections: lerp.lerpPieChartSectionDataList(a.sections, b.sections, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.sections, this.centerSpaceRadius, this.centerSpaceColor, this.pieTouchData, this.sectionsSpace, this.startDegreeOffset, this.borderData]);
    }
  };
  (pie_chart_data.PieChartData.new = function(opts) {
    let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6;
    let sections = opts && 'sections' in opts ? opts.sections : null;
    let centerSpaceRadius = opts && 'centerSpaceRadius' in opts ? opts.centerSpaceRadius : null;
    let centerSpaceColor = opts && 'centerSpaceColor' in opts ? opts.centerSpaceColor : null;
    let sectionsSpace = opts && 'sectionsSpace' in opts ? opts.sectionsSpace : null;
    let startDegreeOffset = opts && 'startDegreeOffset' in opts ? opts.startDegreeOffset : null;
    let pieTouchData = opts && 'pieTouchData' in opts ? opts.pieTouchData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    this[sections$] = (t15$ = (t15 = sections, t15 == null ? null : t15[$where](dart.fn(section => {
      if (section == null) dart.nullFailed(I[24], 56, 37, "section");
      return section.value !== 0;
    }, T.PieChartSectionDataTobool()))[$toList]()), t15$ == null ? C[21] || CT.C21 : t15$);
    this[centerSpaceRadius$] = (t15$0 = centerSpaceRadius, t15$0 == null ? 1 / 0 : t15$0);
    this[centerSpaceColor$] = (t15$1 = centerSpaceColor, t15$1 == null ? colors$.Colors.transparent : t15$1);
    this[sectionsSpace$] = (t15$2 = sectionsSpace, t15$2 == null ? 2.0 : t15$2);
    this[startDegreeOffset$] = (t15$3 = startDegreeOffset, t15$3 == null ? 0.0 : t15$3);
    this[pieTouchData$] = (t15$4 = pieTouchData, t15$4 == null ? new pie_chart_data.PieTouchData.new() : t15$4);
    pie_chart_data.PieChartData.__proto__.new.call(this, {borderData: (t15$5 = borderData, t15$5 == null ? new base_chart_data.FlBorderData.new({show: false}) : t15$5), touchData: (t15$6 = pieTouchData, t15$6 == null ? new pie_chart_data.PieTouchData.new() : t15$6)});
    ;
  }).prototype = pie_chart_data.PieChartData.prototype;
  dart.addTypeTests(pie_chart_data.PieChartData);
  dart.addTypeCaches(pie_chart_data.PieChartData);
  dart.setMethodSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieChartData.__proto__),
    copyWith: dart.fnType(pie_chart_data.PieChartData, [], {borderData: dart.nullable(base_chart_data.FlBorderData), centerSpaceColor: dart.nullable(ui.Color), centerSpaceRadius: dart.nullable(core.double), pieTouchData: dart.nullable(pie_chart_data.PieTouchData), sections: dart.nullable(core.List$(pie_chart_data.PieChartSectionData)), sectionsSpace: dart.nullable(core.double), startDegreeOffset: dart.nullable(core.double)}, {}),
    lerp: dart.fnType(pie_chart_data.PieChartData, [base_chart_data.BaseChartData, base_chart_data.BaseChartData, core.double])
  }));
  dart.setGetterSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getGetters(pie_chart_data.PieChartData.__proto__),
    sumValue: core.double
  }));
  dart.setLibraryUri(pie_chart_data.PieChartData, I[25]);
  dart.setFieldSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieChartData.__proto__),
    sections: dart.finalFieldType(core.List$(pie_chart_data.PieChartSectionData)),
    centerSpaceRadius: dart.finalFieldType(core.double),
    centerSpaceColor: dart.finalFieldType(ui.Color),
    sectionsSpace: dart.finalFieldType(core.double),
    startDegreeOffset: dart.finalFieldType(core.double),
    pieTouchData: dart.finalFieldType(pie_chart_data.PieTouchData)
  }));
  var value$ = dart.privateName(pie_chart_data, "PieChartSectionData.value");
  var color$ = dart.privateName(pie_chart_data, "PieChartSectionData.color");
  var radius$ = dart.privateName(pie_chart_data, "PieChartSectionData.radius");
  var showTitle$ = dart.privateName(pie_chart_data, "PieChartSectionData.showTitle");
  var titleStyle$ = dart.privateName(pie_chart_data, "PieChartSectionData.titleStyle");
  var title$ = dart.privateName(pie_chart_data, "PieChartSectionData.title");
  var badgeWidget$ = dart.privateName(pie_chart_data, "PieChartSectionData.badgeWidget");
  var titlePositionPercentageOffset$0 = dart.privateName(pie_chart_data, "PieChartSectionData.titlePositionPercentageOffset");
  var badgePositionPercentageOffset$ = dart.privateName(pie_chart_data, "PieChartSectionData.badgePositionPercentageOffset");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  pie_chart_data.PieChartSectionData = class PieChartSectionData extends core.Object {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get showTitle() {
      return this[showTitle$];
    }
    set showTitle(value) {
      super.showTitle = value;
    }
    get titleStyle() {
      return this[titleStyle$];
    }
    set titleStyle(value) {
      super.titleStyle = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get badgeWidget() {
      return this[badgeWidget$];
    }
    set badgeWidget(value) {
      super.badgeWidget = value;
    }
    get titlePositionPercentageOffset() {
      return this[titlePositionPercentageOffset$0];
    }
    set titlePositionPercentageOffset(value) {
      super.titlePositionPercentageOffset = value;
    }
    get badgePositionPercentageOffset() {
      return this[badgePositionPercentageOffset$];
    }
    set badgePositionPercentageOffset(value) {
      super.badgePositionPercentageOffset = value;
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6;
      let value = opts && 'value' in opts ? opts.value : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
      let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let badgeWidget = opts && 'badgeWidget' in opts ? opts.badgeWidget : null;
      let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
      let badgePositionPercentageOffset = opts && 'badgePositionPercentageOffset' in opts ? opts.badgePositionPercentageOffset : null;
      return new pie_chart_data.PieChartSectionData.new({value: (t15 = value, t15 == null ? this.value : t15), color: (t15$ = color, t15$ == null ? this.color : t15$), radius: (t15$0 = radius, t15$0 == null ? this.radius : t15$0), showTitle: (t15$1 = showTitle, t15$1 == null ? this.showTitle : t15$1), titleStyle: (t15$2 = titleStyle, t15$2 == null ? this.titleStyle : t15$2), title: (t15$3 = title, t15$3 == null ? this.title : t15$3), badgeWidget: (t15$4 = badgeWidget, t15$4 == null ? this.badgeWidget : t15$4), titlePositionPercentageOffset: (t15$5 = titlePositionPercentageOffset, t15$5 == null ? this.titlePositionPercentageOffset : t15$5), badgePositionPercentageOffset: (t15$6 = badgePositionPercentageOffset, t15$6 == null ? this.badgePositionPercentageOffset : t15$6)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[24], 234, 55, "a");
      if (b == null) dart.nullFailed(I[24], 234, 78, "b");
      if (t == null) dart.nullFailed(I[24], 234, 88, "t");
      return new pie_chart_data.PieChartSectionData.new({value: ui.lerpDouble(a.value, b.value, t), color: ui.Color.lerp(a.color, b.color, t), radius: ui.lerpDouble(a.radius, b.radius, t), showTitle: b.showTitle, titleStyle: text_style.TextStyle.lerp(a.titleStyle, b.titleStyle, t), title: b.title, badgeWidget: b.badgeWidget, titlePositionPercentageOffset: ui.lerpDouble(a.titlePositionPercentageOffset, b.titlePositionPercentageOffset, t), badgePositionPercentageOffset: ui.lerpDouble(a.badgePositionPercentageOffset, b.badgePositionPercentageOffset, t)});
    }
  };
  (pie_chart_data.PieChartSectionData.new = function(opts) {
    let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6;
    let value = opts && 'value' in opts ? opts.value : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
    let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let badgeWidget = opts && 'badgeWidget' in opts ? opts.badgeWidget : null;
    let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
    let badgePositionPercentageOffset = opts && 'badgePositionPercentageOffset' in opts ? opts.badgePositionPercentageOffset : null;
    this[value$] = (t15 = value, t15 == null ? 10.0 : t15);
    this[color$] = (t15$ = color, t15$ == null ? colors$.Colors.red : t15$);
    this[radius$] = (t15$0 = radius, t15$0 == null ? 40.0 : t15$0);
    this[showTitle$] = (t15$1 = showTitle, t15$1 == null ? true : t15$1);
    this[titleStyle$] = (t15$2 = titleStyle, t15$2 == null ? C[22] || CT.C22 : t15$2);
    this[title$] = (t15$3 = title, t15$3 == null ? dart.toString(value) : t15$3);
    this[badgeWidget$] = (t15$4 = badgeWidget, t15$4 == null ? new container.Container.new({$creationLocationd_0dea112b090073317d4: C[25] || CT.C25}) : t15$4);
    this[titlePositionPercentageOffset$0] = (t15$5 = titlePositionPercentageOffset, t15$5 == null ? 0.5 : t15$5);
    this[badgePositionPercentageOffset$] = (t15$6 = badgePositionPercentageOffset, t15$6 == null ? 0.5 : t15$6);
    ;
  }).prototype = pie_chart_data.PieChartSectionData.prototype;
  dart.addTypeTests(pie_chart_data.PieChartSectionData);
  dart.addTypeCaches(pie_chart_data.PieChartSectionData);
  dart.setMethodSignature(pie_chart_data.PieChartSectionData, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieChartSectionData.__proto__),
    copyWith: dart.fnType(pie_chart_data.PieChartSectionData, [], {badgePositionPercentageOffset: dart.nullable(core.double), badgeWidget: dart.nullable(framework.Widget), color: dart.nullable(ui.Color), radius: dart.nullable(core.double), showTitle: dart.nullable(core.bool), title: dart.nullable(core.String), titlePositionPercentageOffset: dart.nullable(core.double), titleStyle: dart.nullable(text_style.TextStyle), value: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(pie_chart_data.PieChartSectionData, I[25]);
  dart.setFieldSignature(pie_chart_data.PieChartSectionData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieChartSectionData.__proto__),
    value: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    radius: dart.finalFieldType(core.double),
    showTitle: dart.finalFieldType(core.bool),
    titleStyle: dart.finalFieldType(text_style.TextStyle),
    title: dart.finalFieldType(core.String),
    badgeWidget: dart.finalFieldType(framework.Widget),
    titlePositionPercentageOffset: dart.finalFieldType(core.double),
    badgePositionPercentageOffset: dart.finalFieldType(core.double)
  }));
  var touchCallback$1 = dart.privateName(pie_chart_data, "PieTouchData.touchCallback");
  var enabled$ = dart.privateName(base_chart_data, "FlTouchData.enabled");
  const Object_EquatableMixin$36$ = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$.new = function() {
  }).prototype = Object_EquatableMixin$36$.prototype;
  dart.applyMixin(Object_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  base_chart_data.FlTouchData = class FlTouchData extends Object_EquatableMixin$36$ {
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.enabled]);
    }
  };
  (base_chart_data.FlTouchData.new = function(enabled) {
    if (enabled == null) dart.nullFailed(I[7], 80, 20, "enabled");
    this[enabled$] = enabled;
    ;
  }).prototype = base_chart_data.FlTouchData.prototype;
  dart.addTypeTests(base_chart_data.FlTouchData);
  dart.addTypeCaches(base_chart_data.FlTouchData);
  dart.setGetterSignature(base_chart_data.FlTouchData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlTouchData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(base_chart_data.FlTouchData, I[8]);
  dart.setFieldSignature(base_chart_data.FlTouchData, () => ({
    __proto__: dart.getFields(base_chart_data.FlTouchData.__proto__),
    enabled: dart.finalFieldType(core.bool)
  }));
  const FlTouchData_EquatableMixin$36 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36.new = function(enabled) {
    FlTouchData_EquatableMixin$36.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  pie_chart_data.PieTouchData = class PieTouchData extends FlTouchData_EquatableMixin$36 {
    get touchCallback() {
      return this[touchCallback$1];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.enabled]);
    }
  };
  (pie_chart_data.PieTouchData.new = function(opts) {
    let t15;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchCallback$1] = touchCallback;
    pie_chart_data.PieTouchData.__proto__.new.call(this, (t15 = enabled, t15 == null ? true : t15));
    ;
  }).prototype = pie_chart_data.PieTouchData.prototype;
  dart.addTypeTests(pie_chart_data.PieTouchData);
  dart.addTypeCaches(pie_chart_data.PieTouchData);
  dart.setLibraryUri(pie_chart_data.PieTouchData, I[25]);
  dart.setFieldSignature(pie_chart_data.PieTouchData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieTouchData.__proto__),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [pie_chart_data.PieTouchResponse])))
  }));
  var touchedSection$ = dart.privateName(pie_chart_data, "PieTouchedSection.touchedSection");
  var touchedSectionIndex$ = dart.privateName(pie_chart_data, "PieTouchedSection.touchedSectionIndex");
  var touchAngle$ = dart.privateName(pie_chart_data, "PieTouchedSection.touchAngle");
  var touchRadius$ = dart.privateName(pie_chart_data, "PieTouchedSection.touchRadius");
  const Object_EquatableMixin$36$0 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$0.new = function() {
  }).prototype = Object_EquatableMixin$36$0.prototype;
  dart.applyMixin(Object_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  pie_chart_data.PieTouchedSection = class PieTouchedSection extends Object_EquatableMixin$36$0 {
    get touchedSection() {
      return this[touchedSection$];
    }
    set touchedSection(value) {
      super.touchedSection = value;
    }
    get touchedSectionIndex() {
      return this[touchedSectionIndex$];
    }
    set touchedSectionIndex(value) {
      super.touchedSectionIndex = value;
    }
    get touchAngle() {
      return this[touchAngle$];
    }
    set touchAngle(value) {
      super.touchAngle = value;
    }
    get touchRadius() {
      return this[touchRadius$];
    }
    set touchRadius(value) {
      super.touchRadius = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.touchedSection, this.touchedSectionIndex, this.touchAngle, this.touchRadius]);
    }
  };
  (pie_chart_data.PieTouchedSection.new = function(touchedSection, touchedSectionIndex, touchAngle, touchRadius) {
    if (touchedSectionIndex == null) dart.nullFailed(I[24], 300, 9, "touchedSectionIndex");
    if (touchAngle == null) dart.nullFailed(I[24], 301, 12, "touchAngle");
    if (touchRadius == null) dart.nullFailed(I[24], 302, 12, "touchRadius");
    this[touchedSection$] = touchedSection;
    this[touchedSectionIndex$] = touchedSectionIndex;
    this[touchAngle$] = touchAngle;
    this[touchRadius$] = touchRadius;
    ;
  }).prototype = pie_chart_data.PieTouchedSection.prototype;
  dart.addTypeTests(pie_chart_data.PieTouchedSection);
  dart.addTypeCaches(pie_chart_data.PieTouchedSection);
  dart.setGetterSignature(pie_chart_data.PieTouchedSection, () => ({
    __proto__: dart.getGetters(pie_chart_data.PieTouchedSection.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(pie_chart_data.PieTouchedSection, I[25]);
  dart.setFieldSignature(pie_chart_data.PieTouchedSection, () => ({
    __proto__: dart.getFields(pie_chart_data.PieTouchedSection.__proto__),
    touchedSection: dart.finalFieldType(dart.nullable(pie_chart_data.PieChartSectionData)),
    touchedSectionIndex: dart.finalFieldType(core.int),
    touchAngle: dart.finalFieldType(core.double),
    touchRadius: dart.finalFieldType(core.double)
  }));
  var touchedSection$0 = dart.privateName(pie_chart_data, "PieTouchResponse.touchedSection");
  var touchInput$ = dart.privateName(base_chart_data, "BaseTouchResponse.touchInput");
  var clickHappened = dart.privateName(base_chart_data, "BaseTouchResponse.clickHappened");
  base_chart_data.BaseTouchResponse = class BaseTouchResponse extends core.Object {
    get touchInput() {
      return this[touchInput$];
    }
    set touchInput(value) {
      super.touchInput = value;
    }
    get clickHappened() {
      return this[clickHappened];
    }
    set clickHappened(value) {
      super.clickHappened = value;
    }
  };
  (base_chart_data.BaseTouchResponse.new = function(touchInput, isClickHappened) {
    if (touchInput == null) dart.nullFailed(I[7], 155, 34, "touchInput");
    if (isClickHappened == null) dart.nullFailed(I[7], 155, 51, "isClickHappened");
    this[touchInput$] = touchInput;
    this[clickHappened] = isClickHappened;
    ;
  }).prototype = base_chart_data.BaseTouchResponse.prototype;
  dart.addTypeTests(base_chart_data.BaseTouchResponse);
  dart.addTypeCaches(base_chart_data.BaseTouchResponse);
  dart.setLibraryUri(base_chart_data.BaseTouchResponse, I[8]);
  dart.setFieldSignature(base_chart_data.BaseTouchResponse, () => ({
    __proto__: dart.getFields(base_chart_data.BaseTouchResponse.__proto__),
    touchInput: dart.finalFieldType(events.PointerEvent),
    clickHappened: dart.finalFieldType(core.bool)
  }));
  pie_chart_data.PieTouchResponse = class PieTouchResponse extends base_chart_data.BaseTouchResponse {
    get touchedSection() {
      return this[touchedSection$0];
    }
    set touchedSection(value) {
      super.touchedSection = value;
    }
    copyWith(opts) {
      let t15, t15$, t15$0;
      let touchedSection = opts && 'touchedSection' in opts ? opts.touchedSection : null;
      let touchInput = opts && 'touchInput' in opts ? opts.touchInput : null;
      let clickHappened = opts && 'clickHappened' in opts ? opts.clickHappened : null;
      return new pie_chart_data.PieTouchResponse.new((t15 = touchedSection, t15 == null ? this.touchedSection : t15), (t15$ = touchInput, t15$ == null ? this.touchInput : t15$), (t15$0 = clickHappened, t15$0 == null ? this.clickHappened : t15$0));
    }
  };
  (pie_chart_data.PieTouchResponse.new = function(touchedSection, touchInput, clickHappened) {
    if (touchInput == null) dart.nullFailed(I[24], 334, 18, "touchInput");
    if (clickHappened == null) dart.nullFailed(I[24], 335, 10, "clickHappened");
    this[touchedSection$0] = touchedSection;
    pie_chart_data.PieTouchResponse.__proto__.new.call(this, touchInput, clickHappened);
    ;
  }).prototype = pie_chart_data.PieTouchResponse.prototype;
  dart.addTypeTests(pie_chart_data.PieTouchResponse);
  dart.addTypeCaches(pie_chart_data.PieTouchResponse);
  dart.setMethodSignature(pie_chart_data.PieTouchResponse, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieTouchResponse.__proto__),
    copyWith: dart.fnType(pie_chart_data.PieTouchResponse, [], {clickHappened: dart.nullable(core.bool), touchInput: dart.nullable(events.PointerEvent), touchedSection: dart.nullable(pie_chart_data.PieTouchedSection)}, {})
  }));
  dart.setLibraryUri(pie_chart_data.PieTouchResponse, I[25]);
  dart.setFieldSignature(pie_chart_data.PieTouchResponse, () => ({
    __proto__: dart.getFields(pie_chart_data.PieTouchResponse.__proto__),
    touchedSection: dart.finalFieldType(dart.nullable(pie_chart_data.PieTouchedSection))
  }));
  pie_chart_data.PieChartDataTween = class PieChartDataTween extends tween.Tween$(pie_chart_data.PieChartData) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[24], 361, 28, "t");
      return dart.nullCheck(this.begin).lerp(dart.nullCheck(this.begin), dart.nullCheck(this.end), t);
    }
  };
  (pie_chart_data.PieChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    if (begin == null) dart.nullFailed(I[24], 356, 44, "begin");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[24], 356, 73, "end");
    pie_chart_data.PieChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = pie_chart_data.PieChartDataTween.prototype;
  dart.addTypeTests(pie_chart_data.PieChartDataTween);
  dart.addTypeCaches(pie_chart_data.PieChartDataTween);
  dart.setLibraryUri(pie_chart_data.PieChartDataTween, I[25]);
  var __PieChartPainter__sectionPaint = dart.privateName(pie_chart_painter, "_#PieChartPainter#_sectionPaint");
  var __PieChartPainter__sectionsSpaceClearPaint = dart.privateName(pie_chart_painter, "_#PieChartPainter#_sectionsSpaceClearPaint");
  var __PieChartPainter__centerSpacePaint = dart.privateName(pie_chart_painter, "_#PieChartPainter#_centerSpacePaint");
  var _sectionPaint = dart.privateName(pie_chart_painter, "_sectionPaint");
  var _sectionsSpaceClearPaint = dart.privateName(pie_chart_painter, "_sectionsSpaceClearPaint");
  var _centerSpacePaint = dart.privateName(pie_chart_painter, "_centerSpacePaint");
  var _calculateSectionsAngle = dart.privateName(pie_chart_painter, "_calculateSectionsAngle");
  var _calculateCenterRadius = dart.privateName(pie_chart_painter, "_calculateCenterRadius");
  var _drawCenterSpace = dart.privateName(pie_chart_painter, "_drawCenterSpace");
  var _drawSections = dart.privateName(pie_chart_painter, "_drawSections");
  var _drawTexts = dart.privateName(pie_chart_painter, "_drawTexts");
  var _generateSectionPath = dart.privateName(pie_chart_painter, "_generateSectionPath");
  var _removeSectionsSpace = dart.privateName(pie_chart_painter, "_removeSectionsSpace");
  var _getTouchedSection = dart.privateName(pie_chart_painter, "_getTouchedSection");
  pie_chart_painter.PieChartPainter = class PieChartPainter extends base_chart_painter.BaseChartPainter$(pie_chart_data.PieChartData) {
    get [_sectionPaint]() {
      let t15;
      t15 = this[__PieChartPainter__sectionPaint];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("_sectionPaint")) : t15;
    }
    set [_sectionPaint](t15) {
      if (t15 == null) dart.nullFailed(I[26], 15, 14, "null");
      this[__PieChartPainter__sectionPaint] = t15;
    }
    get [_sectionsSpaceClearPaint]() {
      let t16;
      t16 = this[__PieChartPainter__sectionsSpaceClearPaint];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_sectionsSpaceClearPaint")) : t16;
    }
    set [_sectionsSpaceClearPaint](t16) {
      if (t16 == null) dart.nullFailed(I[26], 15, 29, "null");
      this[__PieChartPainter__sectionsSpaceClearPaint] = t16;
    }
    get [_centerSpacePaint]() {
      let t17;
      t17 = this[__PieChartPainter__centerSpacePaint];
      return t17 == null ? dart.throw(new _internal.LateError.fieldNI("_centerSpacePaint")) : t17;
    }
    set [_centerSpacePaint](t17) {
      if (t17 == null) dart.nullFailed(I[26], 15, 55, "null");
      this[__PieChartPainter__centerSpacePaint] = t17;
    }
    paint(canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[26], 38, 28, "canvasWrapper");
      T.PaintHolderOfPieChartData().as(holder);
      if (holder == null) dart.nullFailed(I[26], 38, 69, "holder");
      super.paint(canvasWrapper, holder);
      let data = holder.data;
      if (dart.test(data.sections[$isEmpty])) {
        return;
      }
      let sectionsAngle = this[_calculateSectionsAngle](data.sections, data.sumValue);
      let centerRadius = this[_calculateCenterRadius](canvasWrapper.size, holder);
      this[_drawCenterSpace](canvasWrapper, holder);
      this[_drawSections](canvasWrapper, sectionsAngle, centerRadius, holder);
      this[_drawTexts](canvasWrapper, holder, centerRadius);
    }
    [_calculateSectionsAngle](sections, sumValue) {
      if (sections == null) dart.nullFailed(I[26], 53, 66, "sections");
      if (sumValue == null) dart.nullFailed(I[26], 53, 83, "sumValue");
      return sections[$map](core.double, dart.fn(section => {
        if (section == null) dart.nullFailed(I[26], 54, 26, "section");
        return 360 * (dart.notNull(section.value) / dart.notNull(sumValue));
      }, T.PieChartSectionDataTodouble()))[$toList]();
    }
    [_drawCenterSpace](canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[26], 59, 39, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[26], 59, 80, "holder");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let centerX = dart.notNull(viewSize.width) / 2;
      let centerY = dart.notNull(viewSize.height) / 2;
      this[_centerSpacePaint].color = data.centerSpaceColor;
      canvasWrapper.drawCircle(new ui.Offset.new(centerX, centerY), data.centerSpaceRadius, this[_centerSpacePaint]);
    }
    [_drawSections](canvasWrapper, sectionsAngle, centerRadius, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[26], 70, 19, "canvasWrapper");
      if (sectionsAngle == null) dart.nullFailed(I[26], 71, 18, "sectionsAngle");
      if (centerRadius == null) dart.nullFailed(I[26], 72, 12, "centerRadius");
      if (holder == null) dart.nullFailed(I[26], 73, 31, "holder");
      let data = holder.data;
      let shouldDrawSeparators = data.sectionsSpace !== 0 && dart.notNull(data.sections[$length]) > 1;
      let viewSize = canvasWrapper.size;
      if (shouldDrawSeparators) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = data.startDegreeOffset;
      for (let i = 0; i < dart.notNull(data.sections[$length]); i = i + 1) {
        let section = data.sections[$_get](i);
        let sectionDegree = sectionsAngle[$_get](i);
        let sectionRadiusRect = new ui.Rect.fromCircle({center: center, radius: dart.notNull(centerRadius) + dart.notNull(section.radius)});
        let centerRadiusRect = new ui.Rect.fromCircle({center: center, radius: centerRadius});
        if (sectionDegree === 360) {
          this[_sectionPaint].color = section.color;
          this[_sectionPaint].strokeWidth = section.radius;
          this[_sectionPaint].style = ui.PaintingStyle.stroke;
          canvasWrapper.drawCircle(center, dart.notNull(centerRadius) + dart.notNull(section.radius) / 2, this[_sectionPaint]);
          return;
        }
        let startRadians = utils.radians(tempAngle);
        let sweepRadians = utils.radians(sectionDegree);
        let endRadians = dart.notNull(startRadians) + dart.notNull(sweepRadians);
        let startLineDirection = new ui.Offset.new(math.cos(startRadians), math.sin(startRadians));
        let startLineFrom = center['+'](startLineDirection['*'](centerRadius));
        let startLineTo = startLineFrom['+'](startLineDirection['*'](section.radius));
        let startLine = new line.Line.new(startLineFrom, startLineTo);
        let endLineDirection = new ui.Offset.new(math.cos(endRadians), math.sin(endRadians));
        let endLineFrom = center['+'](endLineDirection['*'](centerRadius));
        let endLineTo = endLineFrom['+'](endLineDirection['*'](section.radius));
        let endLine = new line.Line.new(endLineFrom, endLineTo);
        let sectionPath = this[_generateSectionPath](startLine, endLine, startRadians, endRadians, sectionRadiusRect, centerRadiusRect);
        this[_sectionPaint].color = section.color;
        this[_sectionPaint].style = ui.PaintingStyle.fill;
        canvasWrapper.drawPath(sectionPath, this[_sectionPaint]);
        tempAngle = dart.notNull(tempAngle) + dart.notNull(sectionDegree);
      }
      if (shouldDrawSeparators) {
        this[_removeSectionsSpace](canvasWrapper, holder, centerRadius);
      }
    }
    [_generateSectionPath](startLine, endLine, startRadians, endRadians, sectionRadiusRect, centerRadiusRect) {
      let t18;
      if (startLine == null) dart.nullFailed(I[26], 140, 10, "startLine");
      if (endLine == null) dart.nullFailed(I[26], 141, 10, "endLine");
      if (startRadians == null) dart.nullFailed(I[26], 142, 12, "startRadians");
      if (endRadians == null) dart.nullFailed(I[26], 143, 12, "endRadians");
      if (sectionRadiusRect == null) dart.nullFailed(I[26], 144, 10, "sectionRadiusRect");
      if (centerRadiusRect == null) dart.nullFailed(I[26], 145, 10, "centerRadiusRect");
      let sweepRadians = dart.notNull(endRadians) - dart.notNull(startRadians);
      t18 = ui.Path.new();
      return (() => {
        t18.moveTo(startLine.from.dx, startLine.from.dy);
        t18.lineTo(startLine.to.dx, startLine.to.dy);
        t18.arcTo(sectionRadiusRect, startRadians, sweepRadians, false);
        t18.lineTo(endLine.from.dx, endLine.from.dy);
        t18.arcTo(centerRadiusRect, endRadians, -sweepRadians, false);
        t18.moveTo(startLine.from.dx, startLine.from.dy);
        t18.close();
        return t18;
      })();
    }
    [_removeSectionsSpace](canvasWrapper, holder, centerRadius) {
      if (canvasWrapper == null) dart.nullFailed(I[26], 161, 19, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[26], 162, 31, "holder");
      if (centerRadius == null) dart.nullFailed(I[26], 163, 12, "centerRadius");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = data.startDegreeOffset;
      data.sections[$asMap]()[$forEach](dart.fn((index, section) => {
        if (index == null) dart.nullFailed(I[26], 171, 36, "index");
        if (section == null) dart.nullFailed(I[26], 171, 43, "section");
        let previousIndex = index === 0 ? dart.notNull(data.sections[$length]) - 1 : dart.notNull(index) - 1;
        let previousSection = data.sections[$_get](previousIndex);
        let maxSectionRadius = math.max(core.double, section.radius, previousSection.radius);
        let startAngle = tempAngle;
        let sweepAngle = 360 * (dart.notNull(section.value) / dart.notNull(data.sumValue));
        let sectionsStartFrom = center['+'](new ui.Offset.new(math.cos(utils.radians(startAngle)) * (dart.notNull(centerRadius) - 1), math.sin(utils.radians(startAngle)) * (dart.notNull(centerRadius) - 1)));
        let sectionsStartTo = center['+'](new ui.Offset.new(math.cos(utils.radians(startAngle)) * (dart.notNull(centerRadius) + maxSectionRadius + 1), math.sin(utils.radians(startAngle)) * (dart.notNull(centerRadius) + maxSectionRadius + 1)));
        this[_sectionsSpaceClearPaint].strokeWidth = data.sectionsSpace;
        canvasWrapper.drawLine(sectionsStartFrom, sectionsStartTo, this[_sectionsSpaceClearPaint]);
        tempAngle = dart.notNull(tempAngle) + sweepAngle;
      }, T.intAndPieChartSectionDataTovoid()));
      canvasWrapper.restore();
    }
    [_drawTexts](canvasWrapper, holder, centerRadius) {
      if (canvasWrapper == null) dart.nullFailed(I[26], 203, 19, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[26], 204, 31, "holder");
      if (centerRadius == null) dart.nullFailed(I[26], 205, 12, "centerRadius");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = data.startDegreeOffset;
      for (let i = 0; i < dart.notNull(data.sections[$length]); i = i + 1) {
        let section = data.sections[$_get](i);
        let startAngle = tempAngle;
        let sweepAngle = 360 * (dart.notNull(section.value) / dart.notNull(data.sumValue));
        let sectionCenterAngle = dart.notNull(startAngle) + sweepAngle / 2;
        function sectionCenter(percentageOffset) {
          if (percentageOffset == null) dart.nullFailed(I[26], 219, 35, "percentageOffset");
          return center['+'](new ui.Offset.new(math.cos(utils.radians(sectionCenterAngle)) * (dart.notNull(centerRadius) + dart.notNull(section.radius) * dart.notNull(percentageOffset)), math.sin(utils.radians(sectionCenterAngle)) * (dart.notNull(centerRadius) + dart.notNull(section.radius) * dart.notNull(percentageOffset))));
        }
        dart.fn(sectionCenter, T.doubleToOffset());
        let sectionCenterOffsetTitle = sectionCenter(section.titlePositionPercentageOffset);
        if (dart.test(section.showTitle)) {
          let span = new text_span.TextSpan.new({style: section.titleStyle, text: section.title});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: holder.textScale});
          tp.layout();
          canvasWrapper.drawText(tp, sectionCenterOffsetTitle['-'](new ui.Offset.new(dart.notNull(tp.width) / 2, dart.notNull(tp.height) / 2)));
        }
        tempAngle = dart.notNull(tempAngle) + sweepAngle;
      }
    }
    [_calculateCenterRadius](viewSize, holder) {
      if (viewSize == null) dart.nullFailed(I[26], 249, 38, "viewSize");
      if (holder == null) dart.nullFailed(I[26], 249, 74, "holder");
      let data = holder.data;
      if (data.centerSpaceRadius[$isFinite]) {
        return data.centerSpaceRadius;
      }
      let maxRadius = data.sections[$reduce](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[26], 254, 45, "a");
        if (b == null) dart.nullFailed(I[26], 254, 48, "b");
        return dart.notNull(a.radius) > dart.notNull(b.radius) ? a : b;
      }, T.PieChartSectionDataAndPieChartSectionDataToPieChartSectionData())).radius;
      return (dart.notNull(viewSize.shortestSide) - dart.notNull(maxRadius) * 2) / 2;
    }
    handleTouch(touchInput, size, holder) {
      if (touchInput == null) dart.nullFailed(I[26], 264, 18, "touchInput");
      if (size == null) dart.nullFailed(I[26], 265, 10, "size");
      if (holder == null) dart.nullFailed(I[26], 266, 31, "holder");
      let data = holder.data;
      let sectionsAngle = this[_calculateSectionsAngle](data.sections, data.sumValue);
      return this[_getTouchedSection](size, touchInput, sectionsAngle, holder);
    }
    [_getTouchedSection](viewSize, touchInput, sectionsAngle, holder) {
      if (viewSize == null) dart.nullFailed(I[26], 275, 10, "viewSize");
      if (touchInput == null) dart.nullFailed(I[26], 276, 18, "touchInput");
      if (sectionsAngle == null) dart.nullFailed(I[26], 277, 18, "sectionsAngle");
      if (holder == null) dart.nullFailed(I[26], 278, 31, "holder");
      let data = holder.data;
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let touchedPoint2 = touchInput.localPosition['-'](center);
      let touchX = touchedPoint2.dx;
      let touchY = touchedPoint2.dy;
      let touchR = math.sqrt(math.pow(touchX, 2) + math.pow(touchY, 2));
      let touchAngle = utils.degrees(math.atan2(touchY, touchX));
      touchAngle = dart.notNull(touchAngle) < 0 ? 180 - touchAngle[$abs]() + 180 : touchAngle;
      let foundSectionData = null;
      let foundSectionDataPosition = -1;
      let relativeTouchAngle = (dart.notNull(touchAngle) - dart.notNull(data.startDegreeOffset))[$modulo](360);
      let tempAngle = 0.0;
      for (let i = 0; i < dart.notNull(data.sections[$length]); i = i + 1) {
        let section = data.sections[$_get](i);
        let sectionAngle = sectionsAngle[$_get](i);
        tempAngle = tempAngle[$modulo](360);
        if (data.sections[$length] === 1) {
          sectionAngle = 360.0;
        } else {
          sectionAngle = sectionAngle[$modulo](360);
        }
        let space = dart.notNull(data.sectionsSpace) / 2;
        let fromDegree = tempAngle + space;
        let toDegree = dart.notNull(sectionAngle) + tempAngle - space;
        let isInDegree = relativeTouchAngle >= fromDegree && relativeTouchAngle <= toDegree;
        let centerRadius = this[_calculateCenterRadius](viewSize, holder);
        let sectionRadius = dart.notNull(centerRadius) + dart.notNull(section.radius);
        let isInRadius = touchR > dart.notNull(centerRadius) && touchR <= sectionRadius;
        if (isInDegree && isInRadius) {
          foundSectionData = section;
          foundSectionDataPosition = i;
          break;
        }
        tempAngle = tempAngle + dart.notNull(sectionAngle);
      }
      return new pie_chart_data.PieTouchedSection.new(foundSectionData, foundSectionDataPosition, touchAngle, touchR);
    }
    getBadgeOffsets(viewSize, holder) {
      if (viewSize == null) dart.nullFailed(I[26], 333, 41, "viewSize");
      if (holder == null) dart.nullFailed(I[26], 333, 77, "holder");
      let data = holder.data;
      let center = viewSize.center(ui.Offset.zero);
      let badgeWidgetsOffsets = new (T.IdentityMapOfint$Offset()).new();
      if (dart.test(data.sections[$isEmpty])) {
        return badgeWidgetsOffsets;
      }
      let tempAngle = data.startDegreeOffset;
      let sectionsAngle = this[_calculateSectionsAngle](data.sections, data.sumValue);
      for (let i = 0; i < dart.notNull(data.sections[$length]); i = i + 1) {
        let section = data.sections[$_get](i);
        let startAngle = tempAngle;
        let sweepAngle = sectionsAngle[$_get](i);
        let sectionCenterAngle = dart.notNull(startAngle) + dart.notNull(sweepAngle) / 2;
        let centerRadius = this[_calculateCenterRadius](viewSize, holder);
        function sectionCenter(percentageOffset) {
          if (percentageOffset == null) dart.nullFailed(I[26], 352, 35, "percentageOffset");
          return center['+'](new ui.Offset.new(math.cos(utils.radians(sectionCenterAngle)) * (dart.notNull(centerRadius) + dart.notNull(section.radius) * dart.notNull(percentageOffset)), math.sin(utils.radians(sectionCenterAngle)) * (dart.notNull(centerRadius) + dart.notNull(section.radius) * dart.notNull(percentageOffset))));
        }
        dart.fn(sectionCenter, T.doubleToOffset());
        let sectionCenterOffsetBadgeWidget = sectionCenter(section.badgePositionPercentageOffset);
        badgeWidgetsOffsets[$_set](i, sectionCenterOffsetBadgeWidget);
        tempAngle = dart.notNull(tempAngle) + dart.notNull(sweepAngle);
      }
      return badgeWidgetsOffsets;
    }
  };
  (pie_chart_painter.PieChartPainter.new = function() {
    let t15, t15$, t15$0;
    this[__PieChartPainter__sectionPaint] = null;
    this[__PieChartPainter__sectionsSpaceClearPaint] = null;
    this[__PieChartPainter__centerSpacePaint] = null;
    pie_chart_painter.PieChartPainter.__proto__.new.call(this);
    this[_sectionPaint] = (t15 = ui.Paint.new(), (() => {
      t15.style = ui.PaintingStyle.stroke;
      return t15;
    })());
    this[_sectionsSpaceClearPaint] = (t15$ = ui.Paint.new(), (() => {
      t15$.style = ui.PaintingStyle.fill;
      t15$.color = C[27] || CT.C27;
      t15$.blendMode = ui.BlendMode.srcOut;
      return t15$;
    })());
    this[_centerSpacePaint] = (t15$0 = ui.Paint.new(), (() => {
      t15$0.style = ui.PaintingStyle.fill;
      return t15$0;
    })());
  }).prototype = pie_chart_painter.PieChartPainter.prototype;
  dart.addTypeTests(pie_chart_painter.PieChartPainter);
  dart.addTypeCaches(pie_chart_painter.PieChartPainter);
  dart.setMethodSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getMethods(pie_chart_painter.PieChartPainter.__proto__),
    [_calculateSectionsAngle]: dart.fnType(core.List$(core.double), [core.List$(pie_chart_data.PieChartSectionData), core.double]),
    [_drawCenterSpace]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)]),
    [_drawSections]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, core.List$(core.double), core.double, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)]),
    [_generateSectionPath]: dart.fnType(ui.Path, [line.Line, line.Line, core.double, core.double, ui.Rect, ui.Rect]),
    [_removeSectionsSpace]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData), core.double]),
    [_drawTexts]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData), core.double]),
    [_calculateCenterRadius]: dart.fnType(core.double, [ui.Size, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)]),
    handleTouch: dart.fnType(dart.nullable(pie_chart_data.PieTouchedSection), [events.PointerEvent, ui.Size, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)]),
    [_getTouchedSection]: dart.fnType(dart.nullable(pie_chart_data.PieTouchedSection), [ui.Size, events.PointerEvent, core.List$(core.double), base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)]),
    getBadgeOffsets: dart.fnType(core.Map$(core.int, ui.Offset), [ui.Size, base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)])
  }));
  dart.setGetterSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getGetters(pie_chart_painter.PieChartPainter.__proto__),
    [_sectionPaint]: ui.Paint,
    [_sectionsSpaceClearPaint]: ui.Paint,
    [_centerSpacePaint]: ui.Paint
  }));
  dart.setSetterSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getSetters(pie_chart_painter.PieChartPainter.__proto__),
    [_sectionPaint]: ui.Paint,
    [_sectionsSpaceClearPaint]: ui.Paint,
    [_centerSpacePaint]: ui.Paint
  }));
  dart.setLibraryUri(pie_chart_painter.PieChartPainter, I[27]);
  dart.setFieldSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getFields(pie_chart_painter.PieChartPainter.__proto__),
    [__PieChartPainter__sectionPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__PieChartPainter__sectionsSpaceClearPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__PieChartPainter__centerSpacePaint]: dart.fieldType(dart.nullable(ui.Paint))
  }));
  var data$3 = dart.privateName(pie_chart_renderer, "PieChartLeaf.data");
  var targetData$1 = dart.privateName(pie_chart_renderer, "PieChartLeaf.targetData");
  var touchCallback$2 = dart.privateName(pie_chart_renderer, "PieChartLeaf.touchCallback");
  pie_chart_renderer.PieChartLeaf = class PieChartLeaf extends framework.MultiChildRenderObjectWidget {
    get data() {
      return this[data$3];
    }
    set data(value) {
      super.data = value;
    }
    get targetData() {
      return this[targetData$1];
    }
    set targetData(value) {
      super.targetData = value;
    }
    get touchCallback() {
      return this[touchCallback$2];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[28], 28, 50, "context");
      return new pie_chart_renderer.RenderPieChart.new(this.data, this.targetData, media_query.MediaQuery.of(context).textScaleFactor, this.touchCallback);
    }
    updateRenderObject(context, renderObject) {
      let t18;
      if (context == null) dart.nullFailed(I[28], 36, 40, "context");
      pie_chart_renderer.RenderPieChart.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[28], 36, 64, "renderObject");
      t18 = renderObject;
      (() => {
        t18.data = this.data;
        t18.targetData = this.targetData;
        t18.textScale = media_query.MediaQuery.of(context).textScaleFactor;
        t18.touchCallback = this.touchCallback;
        return t18;
      })();
    }
  };
  (pie_chart_renderer.PieChartLeaf.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[28], 15, 19, "data");
    let targetData = opts && 'targetData' in opts ? opts.targetData : null;
    if (targetData == null) dart.nullFailed(I[28], 16, 19, "targetData");
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$3] = data;
    this[targetData$1] = targetData;
    this[touchCallback$2] = touchCallback;
    pie_chart_renderer.PieChartLeaf.__proto__.new.call(this, {key: key, children: targetData.sections[$map](framework.Widget, dart.fn(e => {
        if (e == null) dart.nullFailed(I[28], 20, 46, "e");
        return e.badgeWidget;
      }, T.PieChartSectionDataToWidget()))[$toList](), $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = pie_chart_renderer.PieChartLeaf.prototype;
  dart.addTypeTests(pie_chart_renderer.PieChartLeaf);
  dart.addTypeCaches(pie_chart_renderer.PieChartLeaf);
  dart.setMethodSignature(pie_chart_renderer.PieChartLeaf, () => ({
    __proto__: dart.getMethods(pie_chart_renderer.PieChartLeaf.__proto__),
    createRenderObject: dart.fnType(pie_chart_renderer.RenderPieChart, [framework.BuildContext])
  }));
  dart.setLibraryUri(pie_chart_renderer.PieChartLeaf, I[29]);
  dart.setFieldSignature(pie_chart_renderer.PieChartLeaf, () => ({
    __proto__: dart.getFields(pie_chart_renderer.PieChartLeaf.__proto__),
    data: dart.finalFieldType(pie_chart_data.PieChartData),
    targetData: dart.finalFieldType(pie_chart_data.PieChartData),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [pie_chart_data.PieTouchResponse])))
  }));
  var _painter$0 = dart.privateName(pie_chart_renderer, "_painter");
  var _lastTouchedSpot$0 = dart.privateName(pie_chart_renderer, "_lastTouchedSpot");
  var _data$0 = dart.privateName(pie_chart_renderer, "_data");
  var _targetData$0 = dart.privateName(pie_chart_renderer, "_targetData");
  var _textScale$0 = dart.privateName(pie_chart_renderer, "_textScale");
  var _touchCallback$0 = dart.privateName(pie_chart_renderer, "_touchCallback");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, custom_layout.MultiChildLayoutParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, custom_layout.MultiChildLayoutParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, custom_layout.MultiChildLayoutParentData));
  pie_chart_renderer.RenderPieChart = class RenderPieChart extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    get data() {
      return this[_data$0];
    }
    set data(value) {
      if (value == null) dart.nullFailed(I[28], 59, 25, "value");
      if (dart.equals(this[_data$0], value)) return;
      this[_data$0] = value;
      this.markNeedsLayout();
    }
    get targetData() {
      return this[_targetData$0];
    }
    set targetData(value) {
      if (value == null) dart.nullFailed(I[28], 68, 31, "value");
      if (dart.equals(this[_targetData$0], value)) return;
      this[_targetData$0] = value;
      this.markNeedsLayout();
    }
    get textScale() {
      return this[_textScale$0];
    }
    set textScale(value) {
      if (value == null) dart.nullFailed(I[28], 77, 24, "value");
      if (this[_textScale$0] == value) return;
      this[_textScale$0] = value;
      this.markNeedsPaint();
    }
    set touchCallback(value) {
      this[_touchCallback$0] = value;
    }
    get paintHolder() {
      return new (T.PaintHolderOfPieChartData()).new(this.data, this.targetData, this.textScale);
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[28], 97, 34, "child");
      if (!custom_layout.MultiChildLayoutParentData.is(child.parentData)) {
        child.parentData = new custom_layout.MultiChildLayoutParentData.new();
      }
    }
    performLayout() {
      let child = this.firstChild;
      this.size = this.computeDryLayout(this.constraints);
      let childConstraints = this.constraints.loosen();
      let counter = 0;
      let badgeOffsets = this[_painter$0].getBadgeOffsets(this.size, this.paintHolder);
      while (child != null) {
        if (counter >= dart.notNull(badgeOffsets[$length])) {
          break;
        }
        child.layout(childConstraints, {parentUsesSize: true});
        let childParentData = custom_layout.MultiChildLayoutParentData.as(dart.nullCheck(child.parentData));
        let sizeOffset = new ui.Offset.new(dart.notNull(child.size.width) / 2, dart.notNull(child.size.height) / 2);
        childParentData.offset = dart.nullCheck(badgeOffsets[$_get](counter))['-'](sizeOffset);
        child = childParentData.nextSibling;
        counter = counter + 1;
      }
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[28], 126, 40, "constraints");
      return new ui.Size.new(constraints.maxWidth, constraints.maxHeight);
    }
    hitTestChildren(result, opts) {
      if (result == null) dart.nullFailed(I[28], 131, 41, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[28], 131, 66, "position");
      return this.defaultHitTestChildren(result, {position: position});
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[28], 136, 30, "context");
      if (offset == null) dart.nullFailed(I[28], 136, 46, "offset");
      let canvas = context.canvas;
      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      this[_painter$0].paint(new canvas_wrapper.CanvasWrapper.new(canvas, this.size), this.paintHolder);
      canvas.restore();
      this.defaultPaint(context, offset);
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[28], 146, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      let t18, t18$;
      if (event == null) dart.nullFailed(I[28], 149, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[28], 149, 66, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[28], 150, 12, "debugHandleEvent(event, entry)");
      if (this[_touchCallback$0] == null) {
        return;
      }
      let response = new pie_chart_data.PieTouchResponse.new(null, event, false);
      let touchedSection = this[_painter$0].handleTouch(event, this.size, this.paintHolder);
      if (touchedSection == null) {
        t18 = this[_touchCallback$0];
        t18 == null ? null : t18(response);
        return;
      }
      response = response.copyWith({touchedSection: touchedSection});
      if (events.PointerDownEvent.is(event)) {
        this[_lastTouchedSpot$0] = touchedSection;
      } else if (events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_lastTouchedSpot$0], touchedSection)) {
          response = response.copyWith({clickHappened: true});
        }
        this[_lastTouchedSpot$0] = null;
      }
      t18$ = this[_touchCallback$0];
      t18$ == null ? null : t18$(response);
    }
  };
  (pie_chart_renderer.RenderPieChart.new = function(data, targetData, textScale, touchCallback) {
    if (data == null) dart.nullFailed(I[28], 51, 20, "data");
    if (targetData == null) dart.nullFailed(I[28], 51, 39, "targetData");
    if (textScale == null) dart.nullFailed(I[28], 51, 58, "textScale");
    this[_painter$0] = new pie_chart_painter.PieChartPainter.new();
    this[_lastTouchedSpot$0] = null;
    this[_data$0] = data;
    this[_targetData$0] = targetData;
    this[_textScale$0] = textScale;
    this[_touchCallback$0] = touchCallback;
    pie_chart_renderer.RenderPieChart.__proto__.new.call(this);
    ;
  }).prototype = pie_chart_renderer.RenderPieChart.prototype;
  dart.addTypeTests(pie_chart_renderer.RenderPieChart);
  dart.addTypeCaches(pie_chart_renderer.RenderPieChart);
  dart.setGetterSignature(pie_chart_renderer.RenderPieChart, () => ({
    __proto__: dart.getGetters(pie_chart_renderer.RenderPieChart.__proto__),
    data: pie_chart_data.PieChartData,
    targetData: pie_chart_data.PieChartData,
    textScale: core.double,
    paintHolder: base_chart_painter.PaintHolder$(pie_chart_data.PieChartData)
  }));
  dart.setSetterSignature(pie_chart_renderer.RenderPieChart, () => ({
    __proto__: dart.getSetters(pie_chart_renderer.RenderPieChart.__proto__),
    data: pie_chart_data.PieChartData,
    targetData: pie_chart_data.PieChartData,
    textScale: core.double,
    touchCallback: dart.nullable(dart.fnType(dart.void, [pie_chart_data.PieTouchResponse]))
  }));
  dart.setLibraryUri(pie_chart_renderer.RenderPieChart, I[29]);
  dart.setFieldSignature(pie_chart_renderer.RenderPieChart, () => ({
    __proto__: dart.getFields(pie_chart_renderer.RenderPieChart.__proto__),
    [_data$0]: dart.fieldType(pie_chart_data.PieChartData),
    [_targetData$0]: dart.fieldType(pie_chart_data.PieChartData),
    [_textScale$0]: dart.fieldType(core.double),
    [_touchCallback$0]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [pie_chart_data.PieTouchResponse]))),
    [_painter$0]: dart.finalFieldType(pie_chart_painter.PieChartPainter),
    [_lastTouchedSpot$0]: dart.fieldType(dart.nullable(pie_chart_data.PieTouchedSection))
  }));
  var data$4 = dart.privateName(pie_chart, "PieChart.data");
  pie_chart.PieChart = class PieChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$4];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new pie_chart._PieChartState.new();
    }
  };
  (pie_chart.PieChart.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[30], 20, 10, "data");
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    if (swapAnimationDuration == null) dart.nullFailed(I[30], 21, 14, "swapAnimationDuration");
    let swapAnimationCurve = opts && 'swapAnimationCurve' in opts ? opts.swapAnimationCurve : C[3] || CT.C3;
    if (swapAnimationCurve == null) dart.nullFailed(I[30], 22, 11, "swapAnimationCurve");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$4] = data;
    pie_chart.PieChart.__proto__.new.call(this, {duration: swapAnimationDuration, curve: swapAnimationCurve, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = pie_chart.PieChart.prototype;
  dart.addTypeTests(pie_chart.PieChart);
  dart.addTypeCaches(pie_chart.PieChart);
  dart.setMethodSignature(pie_chart.PieChart, () => ({
    __proto__: dart.getMethods(pie_chart.PieChart.__proto__),
    createState: dart.fnType(pie_chart._PieChartState, [])
  }));
  dart.setLibraryUri(pie_chart.PieChart, I[31]);
  dart.setFieldSignature(pie_chart.PieChart, () => ({
    __proto__: dart.getFields(pie_chart.PieChart.__proto__),
    data: dart.finalFieldType(pie_chart_data.PieChartData)
  }));
  dart.defineLazy(pie_chart.PieChart, {
    /*pie_chart.PieChart.defaultDuration*/get defaultDuration() {
      return C[2] || CT.C2;
    }
  }, false);
  var _pieChartDataTween = dart.privateName(pie_chart, "_pieChartDataTween");
  var _getData$ = dart.privateName(pie_chart, "_getData");
  pie_chart._PieChartState = class _PieChartState extends implicit_animations.AnimatedWidgetBaseState$(pie_chart.PieChart) {
    initState() {
      let t18;
      t18 = binding.WidgetsBinding.instance;
      t18 == null ? null : t18.addPostFrameCallback(dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[30], 38, 52, "_");
        if (dart.test(this.mounted)) {
          this.setState(dart.fn(() => {
          }, T.VoidTovoid()));
        }
      }, T.DurationTovoid()));
      super.initState();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[30], 47, 29, "context");
      let showingData = this[_getData$]();
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(details => {
          if (details == null) dart.nullFailed(I[30], 54, 26, "details");
        }, T.LongPressStartDetailsTovoid()), child: new pie_chart_renderer.PieChartLeaf.new({data: dart.nullCheck(this[_pieChartDataTween]).evaluate(this.animation), targetData: showingData, touchCallback: dart.fn(response => {
            let t18;
            if (response == null) dart.nullFailed(I[30], 58, 25, "response");
            t18 = showingData.pieTouchData.touchCallback;
            t18 == null ? null : t18(response);
          }, T.PieTouchResponseTovoid()), $creationLocationd_0dea112b090073317d4: C[28] || CT.C28}), $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
    }
    [_getData$]() {
      return this.widget.data;
    }
    forEachTween(visitor) {
      if (visitor == null) dart.nullFailed(I[30], 72, 21, "visitor");
      this[_pieChartDataTween] = pie_chart_data.PieChartDataTween.as(visitor(this[_pieChartDataTween], this.widget.data, dart.fn(value => new pie_chart_data.PieChartDataTween.new({begin: pie_chart_data.PieChartData.as(value), end: this.widget.data}), T.dynamicToPieChartDataTween())));
    }
  };
  (pie_chart._PieChartState.new = function() {
    this[_pieChartDataTween] = null;
    pie_chart._PieChartState.__proto__.new.call(this);
    ;
  }).prototype = pie_chart._PieChartState.prototype;
  dart.addTypeTests(pie_chart._PieChartState);
  dart.addTypeCaches(pie_chart._PieChartState);
  dart.setMethodSignature(pie_chart._PieChartState, () => ({
    __proto__: dart.getMethods(pie_chart._PieChartState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getData$]: dart.fnType(pie_chart_data.PieChartData, []),
    forEachTween: dart.fnType(dart.void, [dart.fnType(dart.nullable(tween.Tween), [dart.nullable(tween.Tween), dart.dynamic, dart.fnType(tween.Tween, [dart.dynamic])])])
  }));
  dart.setLibraryUri(pie_chart._PieChartState, I[31]);
  dart.setFieldSignature(pie_chart._PieChartState, () => ({
    __proto__: dart.getFields(pie_chart._PieChartState.__proto__),
    [_pieChartDataTween]: dart.fieldType(dart.nullable(pie_chart_data.PieChartDataTween))
  }));
  var badgeWidgetsCount$ = dart.privateName(pie_chart, "BadgeWidgetsDelegate.badgeWidgetsCount");
  var badgeWidgetsOffsets$ = dart.privateName(pie_chart, "BadgeWidgetsDelegate.badgeWidgetsOffsets");
  pie_chart.BadgeWidgetsDelegate = class BadgeWidgetsDelegate extends custom_layout.MultiChildLayoutDelegate {
    get badgeWidgetsCount() {
      return this[badgeWidgetsCount$];
    }
    set badgeWidgetsCount(value) {
      super.badgeWidgetsCount = value;
    }
    get badgeWidgetsOffsets() {
      return this[badgeWidgetsOffsets$];
    }
    set badgeWidgetsOffsets(value) {
      super.badgeWidgetsOffsets = value;
    }
    performLayout(size) {
      if (size == null) dart.nullFailed(I[30], 92, 27, "size");
      for (let index = 0; index < dart.notNull(this.badgeWidgetsCount); index = index + 1) {
        let _key = this.badgeWidgetsOffsets[$keys][$elementAt](index);
        let _size = this.layoutChild(_key, new box.BoxConstraints.new({maxWidth: size.width, maxHeight: size.height}));
        this.positionChild(_key, new ui.Offset.new(dart.notNull(dart.nullCheck(this.badgeWidgetsOffsets[$_get](_key)).dx) - dart.notNull(_size.width) / 2, dart.notNull(dart.nullCheck(this.badgeWidgetsOffsets[$_get](_key)).dy) - dart.notNull(_size.height) / 2));
      }
    }
    shouldRelayout(oldDelegate) {
      pie_chart.BadgeWidgetsDelegate.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[30], 115, 44, "oldDelegate");
      return !dart.equals(oldDelegate.badgeWidgetsOffsets, this.badgeWidgetsOffsets);
    }
  };
  (pie_chart.BadgeWidgetsDelegate.new = function(opts) {
    let badgeWidgetsCount = opts && 'badgeWidgetsCount' in opts ? opts.badgeWidgetsCount : null;
    if (badgeWidgetsCount == null) dart.nullFailed(I[30], 87, 19, "badgeWidgetsCount");
    let badgeWidgetsOffsets = opts && 'badgeWidgetsOffsets' in opts ? opts.badgeWidgetsOffsets : null;
    if (badgeWidgetsOffsets == null) dart.nullFailed(I[30], 88, 19, "badgeWidgetsOffsets");
    this[badgeWidgetsCount$] = badgeWidgetsCount;
    this[badgeWidgetsOffsets$] = badgeWidgetsOffsets;
    pie_chart.BadgeWidgetsDelegate.__proto__.new.call(this);
    ;
  }).prototype = pie_chart.BadgeWidgetsDelegate.prototype;
  dart.addTypeTests(pie_chart.BadgeWidgetsDelegate);
  dart.addTypeCaches(pie_chart.BadgeWidgetsDelegate);
  dart.setMethodSignature(pie_chart.BadgeWidgetsDelegate, () => ({
    __proto__: dart.getMethods(pie_chart.BadgeWidgetsDelegate.__proto__),
    performLayout: dart.fnType(dart.void, [ui.Size]),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(pie_chart.BadgeWidgetsDelegate, I[31]);
  dart.setFieldSignature(pie_chart.BadgeWidgetsDelegate, () => ({
    __proto__: dart.getFields(pie_chart.BadgeWidgetsDelegate.__proto__),
    badgeWidgetsCount: dart.finalFieldType(core.int),
    badgeWidgetsOffsets: dart.finalFieldType(core.Map$(core.int, ui.Offset))
  }));
  bar_chart_extensions['BackgroundBarChartRodDataExtension|getSafeColorStops'] = function BackgroundBarChartRodDataExtension$124getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[32], 9, 16, "#this");
    let stops = T.JSArrayOfdouble().of([]);
    if ($this.colorStops == null || dart.nullCheck($this.colorStops)[$length] != $this.colors[$length]) {
      $this.colors[$asMap]()[$forEach](dart.fn((index, color) => {
        if (index == null) dart.nullFailed(I[32], 13, 31, "index");
        if (color == null) dart.nullFailed(I[32], 13, 38, "color");
        let percent = 1.0 / dart.notNull($this.colors[$length]);
        stops[$add](percent * dart.notNull(index));
      }, T.intAndColorTovoid()));
    } else {
      stops = dart.nullCheck($this.colorStops);
    }
    return stops;
  };
  bar_chart_extensions['BackgroundBarChartRodDataExtension|get#getSafeColorStops'] = function BackgroundBarChartRodDataExtension$124get$35getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[32], 9, 16, "#this");
    return dart.fn(() => bar_chart_extensions['BackgroundBarChartRodDataExtension|getSafeColorStops']($this), T.VoidToListOfdouble());
  };
  bar_chart_extensions['BarChartRodDataExtension|getSafeColorStops'] = function BarChartRodDataExtension$124getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[32], 30, 16, "#this");
    let stops = T.JSArrayOfdouble().of([]);
    if ($this.colorStops == null || dart.nullCheck($this.colorStops)[$length] != $this.colors[$length]) {
      $this.colors[$asMap]()[$forEach](dart.fn((index, color) => {
        if (index == null) dart.nullFailed(I[32], 34, 31, "index");
        if (color == null) dart.nullFailed(I[32], 34, 38, "color");
        let percent = 1.0 / dart.notNull($this.colors[$length]);
        stops[$add](percent * dart.notNull(index));
      }, T.intAndColorTovoid()));
    } else {
      stops = dart.nullCheck($this.colorStops);
    }
    return stops;
  };
  bar_chart_extensions['BarChartRodDataExtension|get#getSafeColorStops'] = function BarChartRodDataExtension$124get$35getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[32], 30, 16, "#this");
    return dart.fn(() => bar_chart_extensions['BarChartRodDataExtension|getSafeColorStops']($this), T.VoidToListOfdouble());
  };
  scatter_chart_helper.ScatterChartHelper = class ScatterChartHelper extends core.Object {
    static calculateMaxAxisValues(scatterSpots) {
      if (scatterSpots == null) dart.nullFailed(I[33], 15, 80, "scatterSpots");
      if (dart.test(scatterSpots[$isEmpty])) {
        return new scatter_chart_helper.ScatterChartMinMaxAxisValues.new(0.0, 0.0, 0.0, 0.0);
      }
      let listWrapper = list_wrapper['ListExtension|toWrapperClass'](scatter_chart_data.ScatterSpot, scatterSpots);
      if (dart.test(scatter_chart_helper.ScatterChartHelper._cachedResults[$containsKey](listWrapper))) {
        return dart.nullCheck(scatter_chart_helper.ScatterChartHelper._cachedResults[$_get](listWrapper)).copyWith({readFromCache: true});
      }
      let minX = scatterSpots[$_get](0).x;
      let maxX = scatterSpots[$_get](0).x;
      let minY = scatterSpots[$_get](0).y;
      let maxY = scatterSpots[$_get](0).y;
      for (let j = 0; j < dart.notNull(scatterSpots[$length]); j = j + 1) {
        let spot = scatterSpots[$_get](j);
        if (dart.notNull(spot.x) > dart.notNull(maxX)) {
          maxX = spot.x;
        }
        if (dart.notNull(spot.x) < dart.notNull(minX)) {
          minX = spot.x;
        }
        if (dart.notNull(spot.y) > dart.notNull(maxY)) {
          maxY = spot.y;
        }
        if (dart.notNull(spot.y) < dart.notNull(minY)) {
          minY = spot.y;
        }
      }
      let result = new scatter_chart_helper.ScatterChartMinMaxAxisValues.new(minX, maxX, minY, maxY);
      scatter_chart_helper.ScatterChartHelper._cachedResults[$_set](listWrapper, result);
      return result;
    }
  };
  (scatter_chart_helper.ScatterChartHelper.new = function() {
    ;
  }).prototype = scatter_chart_helper.ScatterChartHelper.prototype;
  dart.addTypeTests(scatter_chart_helper.ScatterChartHelper);
  dart.addTypeCaches(scatter_chart_helper.ScatterChartHelper);
  dart.setLibraryUri(scatter_chart_helper.ScatterChartHelper, I[34]);
  dart.defineLazy(scatter_chart_helper.ScatterChartHelper, {
    /*scatter_chart_helper.ScatterChartHelper._cachedResults*/get _cachedResults() {
      return new (T.LinkedMapOfListWrapperOfScatterSpot$ScatterChartMinMaxAxisValues()).new();
    }
  }, false);
  var minX$0 = dart.privateName(scatter_chart_helper, "ScatterChartMinMaxAxisValues.minX");
  var maxX$0 = dart.privateName(scatter_chart_helper, "ScatterChartMinMaxAxisValues.maxX");
  var minY$0 = dart.privateName(scatter_chart_helper, "ScatterChartMinMaxAxisValues.minY");
  var maxY$0 = dart.privateName(scatter_chart_helper, "ScatterChartMinMaxAxisValues.maxY");
  var readFromCache$ = dart.privateName(scatter_chart_helper, "ScatterChartMinMaxAxisValues.readFromCache");
  const Object_EquatableMixin$36$1 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$1.new = function() {
  }).prototype = Object_EquatableMixin$36$1.prototype;
  dart.applyMixin(Object_EquatableMixin$36$1, equatable_mixin.EquatableMixin);
  scatter_chart_helper.ScatterChartMinMaxAxisValues = class ScatterChartMinMaxAxisValues extends Object_EquatableMixin$36$1 {
    get minX() {
      return this[minX$0];
    }
    set minX(value) {
      super.minX = value;
    }
    get maxX() {
      return this[maxX$0];
    }
    set maxX(value) {
      super.maxX = value;
    }
    get minY() {
      return this[minY$0];
    }
    set minY(value) {
      super.minY = value;
    }
    get maxY() {
      return this[maxY$0];
    }
    set maxY(value) {
      super.maxY = value;
    }
    get readFromCache() {
      return this[readFromCache$];
    }
    set readFromCache(value) {
      super.readFromCache = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.minX, this.maxX, this.minY, this.maxY, this.readFromCache]);
    }
    copyWith(opts) {
      let t22, t22$, t22$0, t22$1, t22$2;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : null;
      return new scatter_chart_helper.ScatterChartMinMaxAxisValues.new((t22 = minX, t22 == null ? this.minX : t22), (t22$ = maxX, t22$ == null ? this.maxX : t22$), (t22$0 = minY, t22$0 == null ? this.minY : t22$0), (t22$1 = maxY, t22$1 == null ? this.maxY : t22$1), {readFromCache: (t22$2 = readFromCache, t22$2 == null ? this.readFromCache : t22$2)});
    }
  };
  (scatter_chart_helper.ScatterChartMinMaxAxisValues.new = function(minX, maxX, minY, maxY, opts) {
    if (minX == null) dart.nullFailed(I[33], 64, 10, "minX");
    if (maxX == null) dart.nullFailed(I[33], 65, 10, "maxX");
    if (minY == null) dart.nullFailed(I[33], 66, 10, "minY");
    if (maxY == null) dart.nullFailed(I[33], 67, 10, "maxY");
    let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : false;
    if (readFromCache == null) dart.nullFailed(I[33], 68, 10, "readFromCache");
    this[minX$0] = minX;
    this[maxX$0] = maxX;
    this[minY$0] = minY;
    this[maxY$0] = maxY;
    this[readFromCache$] = readFromCache;
    ;
  }).prototype = scatter_chart_helper.ScatterChartMinMaxAxisValues.prototype;
  dart.addTypeTests(scatter_chart_helper.ScatterChartMinMaxAxisValues);
  dart.addTypeCaches(scatter_chart_helper.ScatterChartMinMaxAxisValues);
  dart.setMethodSignature(scatter_chart_helper.ScatterChartMinMaxAxisValues, () => ({
    __proto__: dart.getMethods(scatter_chart_helper.ScatterChartMinMaxAxisValues.__proto__),
    copyWith: dart.fnType(scatter_chart_helper.ScatterChartMinMaxAxisValues, [], {maxX: dart.nullable(core.double), maxY: dart.nullable(core.double), minX: dart.nullable(core.double), minY: dart.nullable(core.double), readFromCache: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(scatter_chart_helper.ScatterChartMinMaxAxisValues, () => ({
    __proto__: dart.getGetters(scatter_chart_helper.ScatterChartMinMaxAxisValues.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(scatter_chart_helper.ScatterChartMinMaxAxisValues, I[34]);
  dart.setFieldSignature(scatter_chart_helper.ScatterChartMinMaxAxisValues, () => ({
    __proto__: dart.getFields(scatter_chart_helper.ScatterChartMinMaxAxisValues.__proto__),
    minX: dart.finalFieldType(core.double),
    maxX: dart.finalFieldType(core.double),
    minY: dart.finalFieldType(core.double),
    maxY: dart.finalFieldType(core.double),
    readFromCache: dart.finalFieldType(core.bool)
  }));
  var show$ = dart.privateName(scatter_chart_data, "ScatterSpot.show");
  var radius$0 = dart.privateName(scatter_chart_data, "ScatterSpot.radius");
  var color$0 = dart.privateName(scatter_chart_data, "ScatterSpot.color");
  var x$ = dart.privateName(axis_chart_data, "FlSpot.x");
  var y$ = dart.privateName(axis_chart_data, "FlSpot.y");
  const Object_EquatableMixin$36$2 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$2.new = function() {
  }).prototype = Object_EquatableMixin$36$2.prototype;
  dart.applyMixin(Object_EquatableMixin$36$2, equatable_mixin.EquatableMixin);
  axis_chart_data.FlSpot = class FlSpot extends Object_EquatableMixin$36$2 {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    copyWith(opts) {
      let t22, t22$;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      return new axis_chart_data.FlSpot.new((t22 = x, t22 == null ? this.x : t22), (t22$ = y, t22$ == null ? this.y : t22$));
    }
    toString() {
      return "(" + dart.toString(this.x) + ", " + dart.toString(this.y) + ")";
    }
    isNull() {
      return this._equals(axis_chart_data.FlSpot.nullSpot);
    }
    isNotNull() {
      return !dart.test(this.isNull());
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.x, this.y]);
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 391, 29, "a");
      if (b == null) dart.nullFailed(I[6], 391, 39, "b");
      if (t == null) dart.nullFailed(I[6], 391, 49, "t");
      if (dart.equals(a, axis_chart_data.FlSpot.nullSpot)) {
        return b;
      }
      if (dart.equals(b, axis_chart_data.FlSpot.nullSpot)) {
        return a;
      }
      return new axis_chart_data.FlSpot.new(dart.nullCheck(ui.lerpDouble(a.x, b.x, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)));
    }
  };
  (axis_chart_data.FlSpot.new = function(x, y) {
    if (x == null) dart.nullFailed(I[6], 352, 17, "x");
    if (y == null) dart.nullFailed(I[6], 352, 27, "y");
    this[x$] = x;
    this[y$] = y;
    ;
  }).prototype = axis_chart_data.FlSpot.prototype;
  dart.addTypeTests(axis_chart_data.FlSpot);
  dart.addTypeCaches(axis_chart_data.FlSpot);
  dart.setMethodSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getMethods(axis_chart_data.FlSpot.__proto__),
    copyWith: dart.fnType(axis_chart_data.FlSpot, [], {x: dart.nullable(core.double), y: dart.nullable(core.double)}, {}),
    isNull: dart.fnType(core.bool, []),
    isNotNull: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlSpot.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.FlSpot, I[9]);
  dart.setFieldSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getFields(axis_chart_data.FlSpot.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(axis_chart_data.FlSpot, ['toString']);
  dart.defineLazy(axis_chart_data.FlSpot, {
    /*axis_chart_data.FlSpot.nullSpot*/get nullSpot() {
      return new axis_chart_data.FlSpot.new(0 / 0, 0 / 0);
    },
    set nullSpot(_) {}
  }, false);
  const FlSpot_EquatableMixin$36 = class FlSpot_EquatableMixin extends axis_chart_data.FlSpot {};
  (FlSpot_EquatableMixin$36.new = function(x, y) {
    FlSpot_EquatableMixin$36.__proto__.new.call(this, x, y);
  }).prototype = FlSpot_EquatableMixin$36.prototype;
  dart.applyMixin(FlSpot_EquatableMixin$36, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterSpot = class ScatterSpot extends FlSpot_EquatableMixin$36 {
    get show() {
      return this[show$];
    }
    set show(value) {
      super.show = value;
    }
    get radius() {
      return this[radius$0];
    }
    set radius(value) {
      super.radius = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      this[color$0] = value;
    }
    copyWith(opts) {
      let t22, t22$, t22$0, t22$1, t22$2;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let show = opts && 'show' in opts ? opts.show : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new scatter_chart_data.ScatterSpot.new((t22 = x, t22 == null ? this.x : t22), (t22$ = y, t22$ == null ? this.y : t22$), {show: (t22$0 = show, t22$0 == null ? this.show : t22$0), radius: (t22$1 = radius, t22$1 == null ? this.radius : t22$1), color: (t22$2 = color, t22$2 == null ? this.color : t22$2)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[5], 195, 39, "a");
      if (b == null) dart.nullFailed(I[5], 195, 54, "b");
      if (t == null) dart.nullFailed(I[5], 195, 64, "t");
      return new scatter_chart_data.ScatterSpot.new(dart.nullCheck(ui.lerpDouble(a.x, b.x, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)), {show: b.show, radius: ui.lerpDouble(a.radius, b.radius, t), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.x, this.y, this.show, this.radius, this.color]);
    }
  };
  (scatter_chart_data.ScatterSpot.new = function(x, y, opts) {
    let t22, t22$, t22$0;
    if (x == null) dart.nullFailed(I[5], 167, 12, "x");
    if (y == null) dart.nullFailed(I[5], 168, 12, "y");
    let show = opts && 'show' in opts ? opts.show : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[show$] = (t22 = show, t22 == null ? true : t22);
    this[radius$0] = (t22$ = radius, t22$ == null ? 6.0 : t22$);
    this[color$0] = (t22$0 = color, t22$0 == null ? colors$.Colors.primaries[$_get]((dart.notNull(x) * dart.notNull(y))[$modulo](colors$.Colors.primaries[$length])[$toInt]()) : t22$0);
    scatter_chart_data.ScatterSpot.__proto__.new.call(this, x, y);
    ;
  }).prototype = scatter_chart_data.ScatterSpot.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterSpot);
  dart.addTypeCaches(scatter_chart_data.ScatterSpot);
  dart.setMethodSignature(scatter_chart_data.ScatterSpot, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterSpot.__proto__),
    copyWith: dart.fnType(scatter_chart_data.ScatterSpot, [], {color: dart.nullable(ui.Color), radius: dart.nullable(core.double), show: dart.nullable(core.bool), x: dart.nullable(core.double), y: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterSpot, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterSpot, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterSpot.__proto__),
    show: dart.finalFieldType(core.bool),
    radius: dart.finalFieldType(core.double),
    color: dart.fieldType(ui.Color)
  }));
  var touchTooltipData$ = dart.privateName(scatter_chart_data, "ScatterTouchData.touchTooltipData");
  var touchSpotThreshold$ = dart.privateName(scatter_chart_data, "ScatterTouchData.touchSpotThreshold");
  var handleBuiltInTouches$ = dart.privateName(scatter_chart_data, "ScatterTouchData.handleBuiltInTouches");
  var touchCallback$3 = dart.privateName(scatter_chart_data, "ScatterTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$ = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$.new = function(enabled) {
    FlTouchData_EquatableMixin$36$.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchData = class ScatterTouchData extends FlTouchData_EquatableMixin$36$ {
    get touchTooltipData() {
      return this[touchTooltipData$];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get touchSpotThreshold() {
      return this[touchSpotThreshold$];
    }
    set touchSpotThreshold(value) {
      super.touchSpotThreshold = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get touchCallback() {
      return this[touchCallback$3];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t22, t22$, t22$0, t22$1, t22$2;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new scatter_chart_data.ScatterTouchData.new({enabled: (t22 = enabled, t22 == null ? this.enabled : t22), touchTooltipData: (t22$ = touchTooltipData, t22$ == null ? this.touchTooltipData : t22$), handleBuiltInTouches: (t22$0 = handleBuiltInTouches, t22$0 == null ? this.handleBuiltInTouches : t22$0), touchSpotThreshold: (t22$1 = touchSpotThreshold, t22$1 == null ? this.touchSpotThreshold : t22$1), touchCallback: (t22$2 = touchCallback, t22$2 == null ? this.touchCallback : t22$2)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.enabled, this.touchTooltipData, this.touchSpotThreshold, this.handleBuiltInTouches]);
    }
  };
  (scatter_chart_data.ScatterTouchData.new = function(opts) {
    let t22, t22$, t22$0, t22$1;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$] = (t22 = touchTooltipData, t22 == null ? new scatter_chart_data.ScatterTouchTooltipData.new() : t22);
    this[touchSpotThreshold$] = (t22$ = touchSpotThreshold, t22$ == null ? 10.0 : t22$);
    this[handleBuiltInTouches$] = (t22$0 = handleBuiltInTouches, t22$0 == null ? true : t22$0);
    this[touchCallback$3] = touchCallback;
    scatter_chart_data.ScatterTouchData.__proto__.new.call(this, (t22$1 = enabled, t22$1 == null ? true : t22$1));
    ;
  }).prototype = scatter_chart_data.ScatterTouchData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchData);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchData);
  dart.setMethodSignature(scatter_chart_data.ScatterTouchData, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterTouchData.__proto__),
    copyWith: dart.fnType(scatter_chart_data.ScatterTouchData, [], {enabled: dart.nullable(core.bool), handleBuiltInTouches: dart.nullable(core.bool), touchCallback: dart.nullable(dart.fnType(dart.dynamic, [scatter_chart_data.ScatterTouchResponse])), touchSpotThreshold: dart.nullable(core.double), touchTooltipData: dart.nullable(scatter_chart_data.ScatterTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchData, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(scatter_chart_data.ScatterTouchTooltipData),
    touchSpotThreshold: dart.finalFieldType(core.double),
    handleBuiltInTouches: dart.finalFieldType(core.bool),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [scatter_chart_data.ScatterTouchResponse])))
  }));
  var touchedSpot$ = dart.privateName(scatter_chart_data, "ScatterTouchResponse.touchedSpot");
  scatter_chart_data.ScatterTouchResponse = class ScatterTouchResponse extends base_chart_data.BaseTouchResponse {
    get touchedSpot() {
      return this[touchedSpot$];
    }
    set touchedSpot(value) {
      super.touchedSpot = value;
    }
    copyWith(opts) {
      let t22, t22$, t22$0;
      let touchInput = opts && 'touchInput' in opts ? opts.touchInput : null;
      let touchedSpot = opts && 'touchedSpot' in opts ? opts.touchedSpot : null;
      let clickHappened = opts && 'clickHappened' in opts ? opts.clickHappened : null;
      return new scatter_chart_data.ScatterTouchResponse.new((t22 = touchInput, t22 == null ? this.touchInput : t22), (t22$ = touchedSpot, t22$ == null ? this.touchedSpot : t22$), (t22$0 = clickHappened, t22$0 == null ? this.clickHappened : t22$0));
    }
  };
  (scatter_chart_data.ScatterTouchResponse.new = function(touchInput, touchedSpot, clickHappened) {
    if (touchInput == null) dart.nullFailed(I[5], 305, 18, "touchInput");
    if (clickHappened == null) dart.nullFailed(I[5], 307, 10, "clickHappened");
    this[touchedSpot$] = touchedSpot;
    scatter_chart_data.ScatterTouchResponse.__proto__.new.call(this, touchInput, clickHappened);
    ;
  }).prototype = scatter_chart_data.ScatterTouchResponse.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchResponse);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchResponse);
  dart.setMethodSignature(scatter_chart_data.ScatterTouchResponse, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterTouchResponse.__proto__),
    copyWith: dart.fnType(scatter_chart_data.ScatterTouchResponse, [], {clickHappened: dart.nullable(core.bool), touchInput: dart.nullable(events.PointerEvent), touchedSpot: dart.nullable(scatter_chart_data.ScatterTouchedSpot)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchResponse, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchResponse, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchResponse.__proto__),
    touchedSpot: dart.finalFieldType(dart.nullable(scatter_chart_data.ScatterTouchedSpot))
  }));
  var spot$ = dart.privateName(scatter_chart_data, "ScatterTouchedSpot.spot");
  var spotIndex$ = dart.privateName(scatter_chart_data, "ScatterTouchedSpot.spotIndex");
  const Object_EquatableMixin$36$3 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$3.new = function() {
  }).prototype = Object_EquatableMixin$36$3.prototype;
  dart.applyMixin(Object_EquatableMixin$36$3, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchedSpot = class ScatterTouchedSpot extends Object_EquatableMixin$36$3 {
    get spot() {
      return this[spot$];
    }
    set spot(value) {
      super.spot = value;
    }
    get spotIndex() {
      return this[spotIndex$];
    }
    set spotIndex(value) {
      super.spotIndex = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.spot, this.spotIndex]);
    }
  };
  (scatter_chart_data.ScatterTouchedSpot.new = function(spot, spotIndex) {
    if (spot == null) dart.nullFailed(I[5], 336, 27, "spot");
    if (spotIndex == null) dart.nullFailed(I[5], 336, 38, "spotIndex");
    this[spot$] = spot;
    this[spotIndex$] = spotIndex;
    ;
  }).prototype = scatter_chart_data.ScatterTouchedSpot.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchedSpot);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchedSpot);
  dart.setGetterSignature(scatter_chart_data.ScatterTouchedSpot, () => ({
    __proto__: dart.getGetters(scatter_chart_data.ScatterTouchedSpot.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchedSpot, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchedSpot, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchedSpot.__proto__),
    spot: dart.finalFieldType(scatter_chart_data.ScatterSpot),
    spotIndex: dart.finalFieldType(core.int)
  }));
  var tooltipBgColor$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipPadding");
  var maxContentWidth$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.maxContentWidth");
  var getTooltipItems$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.getTooltipItems");
  var fitInsideHorizontally$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.fitInsideVertically");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  const Object_EquatableMixin$36$4 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$4.new = function() {
  }).prototype = Object_EquatableMixin$36$4.prototype;
  dart.applyMixin(Object_EquatableMixin$36$4, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchTooltipData = class ScatterTouchTooltipData extends Object_EquatableMixin$36$4 {
    get tooltipBgColor() {
      return this[tooltipBgColor$];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItems() {
      return this[getTooltipItems$];
    }
    set getTooltipItems(value) {
      super.getTooltipItems = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.maxContentWidth, this.getTooltipItems, this.fitInsideHorizontally, this.fitInsideVertically]);
    }
  };
  (scatter_chart_data.ScatterTouchTooltipData.new = function(opts) {
    let t22, t22$, t22$0, t22$1, t22$2, t22$3, t22$4;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItems = opts && 'getTooltipItems' in opts ? opts.getTooltipItems : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    this[tooltipBgColor$] = (t22 = tooltipBgColor, t22 == null ? colors$.Colors.white : t22);
    this[tooltipRoundedRadius$] = (t22$ = tooltipRoundedRadius, t22$ == null ? 4.0 : t22$);
    this[tooltipPadding$] = (t22$0 = tooltipPadding, t22$0 == null ? C[37] || CT.C37 : t22$0);
    this[maxContentWidth$] = (t22$1 = maxContentWidth, t22$1 == null ? 120.0 : t22$1);
    this[getTooltipItems$] = (t22$2 = getTooltipItems, t22$2 == null ? C[38] || CT.C38 : t22$2);
    this[fitInsideHorizontally$] = (t22$3 = fitInsideHorizontally, t22$3 == null ? false : t22$3);
    this[fitInsideVertically$] = (t22$4 = fitInsideVertically, t22$4 == null ? false : t22$4);
    ;
  }).prototype = scatter_chart_data.ScatterTouchTooltipData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchTooltipData);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchTooltipData);
  dart.setGetterSignature(scatter_chart_data.ScatterTouchTooltipData, () => ({
    __proto__: dart.getGetters(scatter_chart_data.ScatterTouchTooltipData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchTooltipData, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchTooltipData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(ui.Color),
    tooltipRoundedRadius: dart.finalFieldType(core.double),
    tooltipPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    maxContentWidth: dart.finalFieldType(core.double),
    getTooltipItems: dart.finalFieldType(dart.fnType(dart.nullable(scatter_chart_data.ScatterTooltipItem), [scatter_chart_data.ScatterSpot])),
    fitInsideHorizontally: dart.finalFieldType(core.bool),
    fitInsideVertically: dart.finalFieldType(core.bool)
  }));
  var text$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.text");
  var textStyle$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.textStyle");
  var bottomMargin$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.bottomMargin");
  var textAlign$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.textAlign");
  var textDirection$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.textDirection");
  var children$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.children");
  const Object_EquatableMixin$36$5 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$5.new = function() {
  }).prototype = Object_EquatableMixin$36$5.prototype;
  dart.applyMixin(Object_EquatableMixin$36$5, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTooltipItem = class ScatterTooltipItem extends Object_EquatableMixin$36$5 {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get bottomMargin() {
      return this[bottomMargin$];
    }
    set bottomMargin(value) {
      super.bottomMargin = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.text, this.textStyle, this.bottomMargin, this.textAlign, this.children]);
    }
  };
  (scatter_chart_data.ScatterTooltipItem.new = function(text, textStyle, bottomMargin, opts) {
    let t22, t22$;
    if (text == null) dart.nullFailed(I[5], 453, 12, "text");
    if (textStyle == null) dart.nullFailed(I[5], 454, 15, "textStyle");
    if (bottomMargin == null) dart.nullFailed(I[5], 455, 12, "bottomMargin");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let children = opts && 'children' in opts ? opts.children : null;
    this[text$] = text;
    this[textStyle$] = textStyle;
    this[bottomMargin$] = bottomMargin;
    this[textAlign$] = (t22 = textAlign, t22 == null ? ui.TextAlign.center : t22);
    this[textDirection$] = (t22$ = textDirection, t22$ == null ? ui.TextDirection.ltr : t22$);
    this[children$] = children;
    ;
  }).prototype = scatter_chart_data.ScatterTooltipItem.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTooltipItem);
  dart.addTypeCaches(scatter_chart_data.ScatterTooltipItem);
  dart.setGetterSignature(scatter_chart_data.ScatterTooltipItem, () => ({
    __proto__: dart.getGetters(scatter_chart_data.ScatterTooltipItem.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTooltipItem, I[10]);
  dart.setFieldSignature(scatter_chart_data.ScatterTooltipItem, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTooltipItem.__proto__),
    text: dart.finalFieldType(core.String),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    bottomMargin: dart.finalFieldType(core.double),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textDirection: dart.finalFieldType(ui.TextDirection),
    children: dart.finalFieldType(dart.nullable(core.List$(text_span.TextSpan)))
  }));
  scatter_chart_data.ScatterChartDataTween = class ScatterChartDataTween extends tween.Tween$(scatter_chart_data.ScatterChartData) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[5], 484, 32, "t");
      return dart.nullCheck(this.begin).lerp(dart.nullCheck(this.begin), dart.nullCheck(this.end), t);
    }
  };
  (scatter_chart_data.ScatterChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    if (begin == null) dart.nullFailed(I[5], 479, 52, "begin");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[5], 479, 85, "end");
    scatter_chart_data.ScatterChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = scatter_chart_data.ScatterChartDataTween.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterChartDataTween);
  dart.addTypeCaches(scatter_chart_data.ScatterChartDataTween);
  dart.setLibraryUri(scatter_chart_data.ScatterChartDataTween, I[10]);
  scatter_chart_data.defaultScatterTooltipItem = function defaultScatterTooltipItem(touchedSpot) {
    if (touchedSpot == null) dart.nullFailed(I[5], 420, 59, "touchedSpot");
    let textStyle = new text_style.TextStyle.new({color: touchedSpot.color, fontWeight: ui.FontWeight.bold, fontSize: 14.0});
    return new scatter_chart_data.ScatterTooltipItem.new(dart.str(touchedSpot.radius[$toInt]()), textStyle, dart.notNull(touchedSpot.radius) + dart.notNull(touchedSpot.radius) * 0.2);
  };
  radar_extension['DashedPath|get#hasEqualDataEntriesLength'] = function DashedPath$124get$35hasEqualDataEntriesLength($this) {
    if ($this == null) dart.nullFailed(I[35], 6, 12, "#this");
    if ($this[$length] === 0) return false;
    let firstDataEntriesLength = $this[$_get](0).dataEntries[$length];
    return $this[$every](dart.fn(element => {
      if (element == null) dart.nullFailed(I[35], 11, 19, "element");
      return element.dataEntries[$length] == firstDataEntriesLength;
    }, T.RadarDataSetTobool()));
  };
  var dataEntries$ = dart.privateName(radar_chart_data, "RadarDataSet.dataEntries");
  var fillColor$ = dart.privateName(radar_chart_data, "RadarDataSet.fillColor");
  var borderColor$ = dart.privateName(radar_chart_data, "RadarDataSet.borderColor");
  var borderWidth$ = dart.privateName(radar_chart_data, "RadarDataSet.borderWidth");
  var entryRadius$ = dart.privateName(radar_chart_data, "RadarDataSet.entryRadius");
  const Object_EquatableMixin$36$6 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$6.new = function() {
  }).prototype = Object_EquatableMixin$36$6.prototype;
  dart.applyMixin(Object_EquatableMixin$36$6, equatable_mixin.EquatableMixin);
  radar_chart_data.RadarDataSet = class RadarDataSet extends Object_EquatableMixin$36$6 {
    get dataEntries() {
      return this[dataEntries$];
    }
    set dataEntries(value) {
      super.dataEntries = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get entryRadius() {
      return this[entryRadius$];
    }
    set entryRadius(value) {
      super.entryRadius = value;
    }
    copyWith(opts) {
      let t23, t23$, t23$0, t23$1, t23$2;
      let dataEntries = opts && 'dataEntries' in opts ? opts.dataEntries : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let entryRadius = opts && 'entryRadius' in opts ? opts.entryRadius : null;
      return new radar_chart_data.RadarDataSet.new({dataEntries: (t23 = dataEntries, t23 == null ? this.dataEntries : t23), fillColor: (t23$ = fillColor, t23$ == null ? this.fillColor : t23$), borderColor: (t23$0 = borderColor, t23$0 == null ? this.borderColor : t23$0), borderWidth: (t23$1 = borderWidth, t23$1 == null ? this.borderWidth : t23$1), entryRadius: (t23$2 = entryRadius, t23$2 == null ? this.entryRadius : t23$2)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[17], 287, 41, "a");
      if (b == null) dart.nullFailed(I[17], 287, 57, "b");
      if (t == null) dart.nullFailed(I[17], 287, 67, "t");
      return new radar_chart_data.RadarDataSet.new({dataEntries: lerp.lerpRadarEntryList(a.dataEntries, b.dataEntries, t), fillColor: ui.Color.lerp(a.fillColor, b.fillColor, t), borderColor: ui.Color.lerp(a.borderColor, b.borderColor, t), borderWidth: ui.lerpDouble(a.borderWidth, b.borderWidth, t), entryRadius: ui.lerpDouble(a.entryRadius, b.entryRadius, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.dataEntries, this.fillColor, this.borderColor, this.borderWidth, this.entryRadius]);
    }
  };
  (radar_chart_data.RadarDataSet.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2;
    let dataEntries = opts && 'dataEntries' in opts ? opts.dataEntries : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let entryRadius = opts && 'entryRadius' in opts ? opts.entryRadius : null;
    this[dataEntries$] = (t23 = dataEntries, t23 == null ? C[39] || CT.C39 : t23);
    this[fillColor$] = (t23$ = fillColor, t23$ == null ? colors$.Colors.black12 : t23$);
    this[borderColor$] = (t23$0 = borderColor, t23$0 == null ? colors$.Colors.blueAccent : t23$0);
    this[borderWidth$] = (t23$1 = borderWidth, t23$1 == null ? 2.0 : t23$1);
    this[entryRadius$] = (t23$2 = entryRadius, t23$2 == null ? 5.0 : t23$2);
    ;
  }).prototype = radar_chart_data.RadarDataSet.prototype;
  dart.addTypeTests(radar_chart_data.RadarDataSet);
  dart.addTypeCaches(radar_chart_data.RadarDataSet);
  dart.setMethodSignature(radar_chart_data.RadarDataSet, () => ({
    __proto__: dart.getMethods(radar_chart_data.RadarDataSet.__proto__),
    copyWith: dart.fnType(radar_chart_data.RadarDataSet, [], {borderColor: dart.nullable(ui.Color), borderWidth: dart.nullable(core.double), dataEntries: dart.nullable(core.List$(radar_chart_data.RadarEntry)), entryRadius: dart.nullable(core.double), fillColor: dart.nullable(ui.Color)}, {})
  }));
  dart.setGetterSignature(radar_chart_data.RadarDataSet, () => ({
    __proto__: dart.getGetters(radar_chart_data.RadarDataSet.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(radar_chart_data.RadarDataSet, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarDataSet, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarDataSet.__proto__),
    dataEntries: dart.finalFieldType(core.List$(radar_chart_data.RadarEntry)),
    fillColor: dart.finalFieldType(ui.Color),
    borderColor: dart.finalFieldType(ui.Color),
    borderWidth: dart.finalFieldType(core.double),
    entryRadius: dart.finalFieldType(core.double)
  }));
  var value$0 = dart.privateName(radar_chart_data, "RadarEntry.value");
  const Object_EquatableMixin$36$7 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$7.new = function() {
  }).prototype = Object_EquatableMixin$36$7.prototype;
  dart.applyMixin(Object_EquatableMixin$36$7, equatable_mixin.EquatableMixin);
  radar_chart_data.RadarEntry = class RadarEntry extends Object_EquatableMixin$36$7 {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    copyWith(opts) {
      let t23;
      let value = opts && 'value' in opts ? opts.value : null;
      return new radar_chart_data.RadarEntry.new({value: (t23 = value, t23 == null ? this.value : t23)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[17], 320, 37, "a");
      if (b == null) dart.nullFailed(I[17], 320, 51, "b");
      if (t == null) dart.nullFailed(I[17], 320, 61, "t");
      return new radar_chart_data.RadarEntry.new({value: dart.nullCheck(ui.lerpDouble(a.value, b.value, t))});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.value]);
    }
  };
  (radar_chart_data.RadarEntry.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[17], 314, 37, "value");
    this[value$0] = value;
    ;
  }).prototype = radar_chart_data.RadarEntry.prototype;
  dart.addTypeTests(radar_chart_data.RadarEntry);
  dart.addTypeCaches(radar_chart_data.RadarEntry);
  dart.setMethodSignature(radar_chart_data.RadarEntry, () => ({
    __proto__: dart.getMethods(radar_chart_data.RadarEntry.__proto__),
    copyWith: dart.fnType(radar_chart_data.RadarEntry, [], {value: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(radar_chart_data.RadarEntry, () => ({
    __proto__: dart.getGetters(radar_chart_data.RadarEntry.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(radar_chart_data.RadarEntry, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarEntry, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarEntry.__proto__),
    value: dart.finalFieldType(core.double)
  }));
  var touchCallback$4 = dart.privateName(radar_chart_data, "RadarTouchData.touchCallback");
  var touchSpotThreshold$0 = dart.privateName(radar_chart_data, "RadarTouchData.touchSpotThreshold");
  const FlTouchData_EquatableMixin$36$0 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$0.new = function(enabled) {
    FlTouchData_EquatableMixin$36$0.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$0.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  radar_chart_data.RadarTouchData = class RadarTouchData extends FlTouchData_EquatableMixin$36$0 {
    get touchCallback() {
      return this[touchCallback$4];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    get touchSpotThreshold() {
      return this[touchSpotThreshold$0];
    }
    set touchSpotThreshold(value) {
      super.touchSpotThreshold = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.enabled, this.touchSpotThreshold, this.touchCallback]);
    }
  };
  (radar_chart_data.RadarTouchData.new = function(opts) {
    let t23, t23$;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
    this[touchCallback$4] = touchCallback;
    this[touchSpotThreshold$0] = (t23 = touchSpotThreshold, t23 == null ? 10.0 : t23);
    radar_chart_data.RadarTouchData.__proto__.new.call(this, (t23$ = enabled, t23$ == null ? true : t23$));
    ;
  }).prototype = radar_chart_data.RadarTouchData.prototype;
  dart.addTypeTests(radar_chart_data.RadarTouchData);
  dart.addTypeCaches(radar_chart_data.RadarTouchData);
  dart.setLibraryUri(radar_chart_data.RadarTouchData, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarTouchData, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarTouchData.__proto__),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [radar_chart_data.RadarTouchResponse]))),
    touchSpotThreshold: dart.finalFieldType(core.double)
  }));
  var touchedSpot$0 = dart.privateName(radar_chart_data, "RadarTouchResponse.touchedSpot");
  radar_chart_data.RadarTouchResponse = class RadarTouchResponse extends base_chart_data.BaseTouchResponse {
    get touchedSpot() {
      return this[touchedSpot$0];
    }
    set touchedSpot(value) {
      super.touchedSpot = value;
    }
    copyWith(opts) {
      let t23, t23$, t23$0;
      let touchedSpot = opts && 'touchedSpot' in opts ? opts.touchedSpot : null;
      let touchInput = opts && 'touchInput' in opts ? opts.touchInput : null;
      let clickHappened = opts && 'clickHappened' in opts ? opts.clickHappened : null;
      return new radar_chart_data.RadarTouchResponse.new((t23 = touchedSpot, t23 == null ? this.touchedSpot : t23), (t23$ = touchInput, t23$ == null ? this.touchInput : t23$), (t23$0 = clickHappened, t23$0 == null ? this.clickHappened : t23$0));
    }
  };
  (radar_chart_data.RadarTouchResponse.new = function(touchedSpot, touchInput, clickHappened) {
    if (touchInput == null) dart.nullFailed(I[17], 380, 18, "touchInput");
    if (clickHappened == null) dart.nullFailed(I[17], 381, 10, "clickHappened");
    this[touchedSpot$0] = touchedSpot;
    radar_chart_data.RadarTouchResponse.__proto__.new.call(this, touchInput, clickHappened);
    ;
  }).prototype = radar_chart_data.RadarTouchResponse.prototype;
  dart.addTypeTests(radar_chart_data.RadarTouchResponse);
  dart.addTypeCaches(radar_chart_data.RadarTouchResponse);
  dart.setMethodSignature(radar_chart_data.RadarTouchResponse, () => ({
    __proto__: dart.getMethods(radar_chart_data.RadarTouchResponse.__proto__),
    copyWith: dart.fnType(radar_chart_data.RadarTouchResponse, [], {clickHappened: dart.nullable(core.bool), touchInput: dart.nullable(events.PointerEvent), touchedSpot: dart.nullable(radar_chart_data.RadarTouchedSpot)}, {})
  }));
  dart.setLibraryUri(radar_chart_data.RadarTouchResponse, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarTouchResponse, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarTouchResponse.__proto__),
    touchedSpot: dart.finalFieldType(dart.nullable(radar_chart_data.RadarTouchedSpot))
  }));
  var touchedDataSet$ = dart.privateName(radar_chart_data, "RadarTouchedSpot.touchedDataSet");
  var touchedDataSetIndex$ = dart.privateName(radar_chart_data, "RadarTouchedSpot.touchedDataSetIndex");
  var touchedRadarEntry$ = dart.privateName(radar_chart_data, "RadarTouchedSpot.touchedRadarEntry");
  var touchedRadarEntryIndex$ = dart.privateName(radar_chart_data, "RadarTouchedSpot.touchedRadarEntryIndex");
  var spot$0 = dart.privateName(axis_chart_data, "TouchedSpot.spot");
  var offset$ = dart.privateName(axis_chart_data, "TouchedSpot.offset");
  const Object_EquatableMixin$36$8 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$8.new = function() {
  }).prototype = Object_EquatableMixin$36$8.prototype;
  dart.applyMixin(Object_EquatableMixin$36$8, equatable_mixin.EquatableMixin);
  axis_chart_data.TouchedSpot = class TouchedSpot extends Object_EquatableMixin$36$8 {
    get spot() {
      return this[spot$0];
    }
    set spot(value) {
      super.spot = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.spot, this.offset]);
    }
  };
  (axis_chart_data.TouchedSpot.new = function(spot, offset) {
    if (spot == null) dart.nullFailed(I[6], 597, 12, "spot");
    if (offset == null) dart.nullFailed(I[6], 598, 12, "offset");
    this[spot$0] = spot;
    this[offset$] = offset;
    ;
  }).prototype = axis_chart_data.TouchedSpot.prototype;
  dart.addTypeTests(axis_chart_data.TouchedSpot);
  dart.addTypeCaches(axis_chart_data.TouchedSpot);
  dart.setGetterSignature(axis_chart_data.TouchedSpot, () => ({
    __proto__: dart.getGetters(axis_chart_data.TouchedSpot.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.TouchedSpot, I[9]);
  dart.setFieldSignature(axis_chart_data.TouchedSpot, () => ({
    __proto__: dart.getFields(axis_chart_data.TouchedSpot.__proto__),
    spot: dart.finalFieldType(axis_chart_data.FlSpot),
    offset: dart.finalFieldType(ui.Offset)
  }));
  const TouchedSpot_EquatableMixin$36 = class TouchedSpot_EquatableMixin extends axis_chart_data.TouchedSpot {};
  (TouchedSpot_EquatableMixin$36.new = function(spot, offset) {
    TouchedSpot_EquatableMixin$36.__proto__.new.call(this, spot, offset);
  }).prototype = TouchedSpot_EquatableMixin$36.prototype;
  dart.applyMixin(TouchedSpot_EquatableMixin$36, equatable_mixin.EquatableMixin);
  radar_chart_data.RadarTouchedSpot = class RadarTouchedSpot extends TouchedSpot_EquatableMixin$36 {
    get touchedDataSet() {
      return this[touchedDataSet$];
    }
    set touchedDataSet(value) {
      super.touchedDataSet = value;
    }
    get touchedDataSetIndex() {
      return this[touchedDataSetIndex$];
    }
    set touchedDataSetIndex(value) {
      super.touchedDataSetIndex = value;
    }
    get touchedRadarEntry() {
      return this[touchedRadarEntry$];
    }
    set touchedRadarEntry(value) {
      super.touchedRadarEntry = value;
    }
    get touchedRadarEntryIndex() {
      return this[touchedRadarEntryIndex$];
    }
    set touchedRadarEntryIndex(value) {
      super.touchedRadarEntryIndex = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.spot, this.offset, this.touchedDataSet, this.touchedDataSetIndex, this.touchedRadarEntry, this.touchedRadarEntryIndex]);
    }
  };
  (radar_chart_data.RadarTouchedSpot.new = function(touchedDataSet, touchedDataSetIndex, touchedRadarEntry, touchedRadarEntryIndex, spot, offset) {
    if (touchedDataSet == null) dart.nullFailed(I[17], 415, 18, "touchedDataSet");
    if (touchedDataSetIndex == null) dart.nullFailed(I[17], 416, 9, "touchedDataSetIndex");
    if (touchedRadarEntry == null) dart.nullFailed(I[17], 417, 16, "touchedRadarEntry");
    if (touchedRadarEntryIndex == null) dart.nullFailed(I[17], 418, 9, "touchedRadarEntryIndex");
    if (spot == null) dart.nullFailed(I[17], 419, 12, "spot");
    if (offset == null) dart.nullFailed(I[17], 420, 12, "offset");
    this[touchedDataSet$] = touchedDataSet;
    this[touchedDataSetIndex$] = touchedDataSetIndex;
    this[touchedRadarEntry$] = touchedRadarEntry;
    this[touchedRadarEntryIndex$] = touchedRadarEntryIndex;
    radar_chart_data.RadarTouchedSpot.__proto__.new.call(this, spot, offset);
    ;
  }).prototype = radar_chart_data.RadarTouchedSpot.prototype;
  dart.addTypeTests(radar_chart_data.RadarTouchedSpot);
  dart.addTypeCaches(radar_chart_data.RadarTouchedSpot);
  dart.setLibraryUri(radar_chart_data.RadarTouchedSpot, I[18]);
  dart.setFieldSignature(radar_chart_data.RadarTouchedSpot, () => ({
    __proto__: dart.getFields(radar_chart_data.RadarTouchedSpot.__proto__),
    touchedDataSet: dart.finalFieldType(radar_chart_data.RadarDataSet),
    touchedDataSetIndex: dart.finalFieldType(core.int),
    touchedRadarEntry: dart.finalFieldType(radar_chart_data.RadarEntry),
    touchedRadarEntryIndex: dart.finalFieldType(core.int)
  }));
  radar_chart_data.RadarChartDataTween = class RadarChartDataTween extends tween.Tween$(radar_chart_data.RadarChartData) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[17], 448, 30, "t");
      return dart.nullCheck(this.begin).lerp(dart.nullCheck(this.begin), dart.nullCheck(this.end), t);
    }
  };
  (radar_chart_data.RadarChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    if (begin == null) dart.nullFailed(I[17], 442, 29, "begin");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[17], 443, 29, "end");
    radar_chart_data.RadarChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = radar_chart_data.RadarChartDataTween.prototype;
  dart.addTypeTests(radar_chart_data.RadarChartDataTween);
  dart.addTypeCaches(radar_chart_data.RadarChartDataTween);
  dart.setLibraryUri(radar_chart_data.RadarChartDataTween, I[18]);
  lerp._lerpList = function _lerpList(T, a, b, t, opts) {
    if (t == null) dart.nullFailed(I[36], 8, 54, "t");
    let lerp = opts && 'lerp' in opts ? opts.lerp : null;
    if (lerp == null) dart.nullFailed(I[36], 8, 92, "lerp");
    if (a != null && b != null && a[$length] == b[$length]) {
      return core.List$(T).generate(a[$length], dart.fn(i => {
        if (i == null) dart.nullFailed(I[36], 10, 37, "i");
        return lerp(a[$_get](i), b[$_get](i), t);
      }, dart.fnType(T, [core.int])));
    } else if (a != null && b != null) {
      return core.List$(T).generate(b[$length], dart.fn(i => {
        if (i == null) dart.nullFailed(I[36], 14, 37, "i");
        return lerp(dart.notNull(i) >= dart.notNull(a[$length]) ? b[$_get](i) : a[$_get](i), b[$_get](i), t);
      }, dart.fnType(T, [core.int])));
    } else {
      return b;
    }
  };
  lerp.lerpColorList = function lerpColorList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 23, 67, "t");
    return lerp._lerpList(ui.Color, a, b, t, {lerp: C[40] || CT.C40});
  };
  lerp.lerpColor = function lerpColor(a, b, t) {
    if (a == null) dart.nullFailed(I[36], 27, 23, "a");
    if (b == null) dart.nullFailed(I[36], 27, 32, "b");
    if (t == null) dart.nullFailed(I[36], 27, 42, "t");
    return dart.nullCheck(ui.Color.lerp(a, b, t));
  };
  lerp.lerpDoubleAllowInfinity = function lerpDoubleAllowInfinity(a, b, t) {
    let t23, t23$, t23$0;
    if (t == null) dart.nullFailed(I[36], 30, 62, "t");
    if (a == b || (t23 = a, t23 == null ? null : t23[$isNaN]) === true && (t23$ = b, t23$ == null ? null : t23$[$isNaN]) === true) {
      t23$0 = a;
      return t23$0 == null ? null : t23$0[$toDouble]();
    }
    if (dart.nullCheck(a)[$isInfinite] || dart.nullCheck(b)[$isInfinite]) {
      return b;
    }
    if (!a[$isFinite]) dart.assertFailed("Cannot interpolate between finite and non-finite values", I[36], 38, 10, "a.isFinite");
    if (!b[$isFinite]) dart.assertFailed("Cannot interpolate between finite and non-finite values", I[36], 39, 10, "b.isFinite");
    if (!t[$isFinite]) dart.assertFailed("t must be finite when interpolating between values", I[36], 40, 10, "t.isFinite");
    return dart.notNull(a) * (1.0 - dart.notNull(t)) + dart.notNull(b) * dart.notNull(t);
  };
  lerp.lerpDoubleList = function lerpDoubleList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 45, 71, "t");
    return lerp._lerpList(core.double, a, b, t, {lerp: C[41] || CT.C41});
  };
  lerp.lerpIntList = function lerpIntList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 49, 59, "t");
    return lerp._lerpList(core.int, a, b, t, {lerp: C[42] || CT.C42});
  };
  lerp.lerpInt = function lerpInt(a, b, t) {
    if (a == null) dart.nullFailed(I[36], 52, 17, "a");
    if (b == null) dart.nullFailed(I[36], 52, 24, "b");
    if (t == null) dart.nullFailed(I[36], 52, 34, "t");
    return (dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t))[$round]();
  };
  lerp._lerpNonNullDouble = function _lerpNonNullDouble(a, b, t) {
    if (a == null) dart.nullFailed(I[36], 54, 34, "a");
    if (b == null) dart.nullFailed(I[36], 54, 44, "b");
    if (t == null) dart.nullFailed(I[36], 54, 54, "t");
    return dart.nullCheck(ui.lerpDouble(a, b, t));
  };
  lerp.lerpFlSpotList = function lerpFlSpotList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 57, 71, "t");
    return lerp._lerpList(axis_chart_data.FlSpot, a, b, t, {lerp: C[43] || CT.C43});
  };
  lerp.lerpHorizontalLineList = function lerpHorizontalLineList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 62, 66, "t");
    return lerp._lerpList(line_chart_data.HorizontalLine, a, b, t, {lerp: C[44] || CT.C44});
  };
  lerp.lerpVerticalLineList = function lerpVerticalLineList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 66, 95, "t");
    return lerp._lerpList(line_chart_data.VerticalLine, a, b, t, {lerp: C[45] || CT.C45});
  };
  lerp.lerpHorizontalRangeAnnotationList = function lerpHorizontalRangeAnnotationList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 71, 88, "t");
    return lerp._lerpList(axis_chart_data.HorizontalRangeAnnotation, a, b, t, {lerp: C[46] || CT.C46});
  };
  lerp.lerpVerticalRangeAnnotationList = function lerpVerticalRangeAnnotationList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 76, 84, "t");
    return lerp._lerpList(axis_chart_data.VerticalRangeAnnotation, a, b, t, {lerp: C[47] || CT.C47});
  };
  lerp.lerpLineChartBarDataList = function lerpLineChartBarDataList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 81, 70, "t");
    return lerp._lerpList(line_chart_data.LineChartBarData, a, b, t, {lerp: C[48] || CT.C48});
  };
  lerp.lerpBetweenBarsDataList = function lerpBetweenBarsDataList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 86, 68, "t");
    return lerp._lerpList(line_chart_data.BetweenBarsData, a, b, t, {lerp: C[49] || CT.C49});
  };
  lerp.lerpBarChartGroupDataList = function lerpBarChartGroupDataList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 91, 72, "t");
    return lerp._lerpList(bar_chart_data.BarChartGroupData, a, b, t, {lerp: C[50] || CT.C50});
  };
  lerp.lerpBarChartRodDataList = function lerpBarChartRodDataList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 96, 68, "t");
    return lerp._lerpList(bar_chart_data.BarChartRodData, a, b, t, {lerp: C[51] || CT.C51});
  };
  lerp.lerpPieChartSectionDataList = function lerpPieChartSectionDataList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 101, 76, "t");
    return lerp._lerpList(pie_chart_data.PieChartSectionData, a, b, t, {lerp: C[52] || CT.C52});
  };
  lerp.lerpScatterSpotList = function lerpScatterSpotList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 105, 91, "t");
    return lerp._lerpList(scatter_chart_data.ScatterSpot, a, b, t, {lerp: C[53] || CT.C53});
  };
  lerp.lerpBarChartRodStackList = function lerpBarChartRodStackList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 110, 78, "t");
    return lerp._lerpList(bar_chart_data.BarChartRodStackItem, a, b, t, {lerp: C[54] || CT.C54});
  };
  lerp.lerpRadarDataSetList = function lerpRadarDataSetList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 114, 95, "t");
    return lerp._lerpList(radar_chart_data.RadarDataSet, a, b, t, {lerp: C[55] || CT.C55});
  };
  lerp.lerpRadarEntryList = function lerpRadarEntryList(a, b, t) {
    if (t == null) dart.nullFailed(I[36], 118, 87, "t");
    return lerp._lerpList(radar_chart_data.RadarEntry, a, b, t, {lerp: C[56] || CT.C56});
  };
  var data$5 = dart.privateName(line_chart_renderer, "LineChartLeaf.data");
  var targetData$2 = dart.privateName(line_chart_renderer, "LineChartLeaf.targetData");
  var touchCallback$5 = dart.privateName(line_chart_renderer, "LineChartLeaf.touchCallback");
  line_chart_renderer.LineChartLeaf = class LineChartLeaf extends framework.LeafRenderObjectWidget {
    get data() {
      return this[data$5];
    }
    set data(value) {
      super.data = value;
    }
    get targetData() {
      return this[targetData$2];
    }
    set targetData(value) {
      super.targetData = value;
    }
    get touchCallback() {
      return this[touchCallback$5];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[37], 20, 51, "context");
      return new line_chart_renderer.RenderLineChart.new(this.data, this.targetData, media_query.MediaQuery.of(context).textScaleFactor, this.touchCallback);
    }
    updateRenderObject(context, renderObject) {
      let t23;
      if (context == null) dart.nullFailed(I[37], 24, 40, "context");
      line_chart_renderer.RenderLineChart.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[37], 24, 65, "renderObject");
      t23 = renderObject;
      (() => {
        t23.data = this.data;
        t23.targetData = this.targetData;
        t23.textScale = media_query.MediaQuery.of(context).textScaleFactor;
        t23.touchCallback = this.touchCallback;
        return t23;
      })();
    }
  };
  (line_chart_renderer.LineChartLeaf.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[37], 12, 48, "data");
    let targetData = opts && 'targetData' in opts ? opts.targetData : null;
    if (targetData == null) dart.nullFailed(I[37], 12, 68, "targetData");
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$5] = data;
    this[targetData$2] = targetData;
    this[touchCallback$5] = touchCallback;
    line_chart_renderer.LineChartLeaf.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = line_chart_renderer.LineChartLeaf.prototype;
  dart.addTypeTests(line_chart_renderer.LineChartLeaf);
  dart.addTypeCaches(line_chart_renderer.LineChartLeaf);
  dart.setMethodSignature(line_chart_renderer.LineChartLeaf, () => ({
    __proto__: dart.getMethods(line_chart_renderer.LineChartLeaf.__proto__),
    createRenderObject: dart.fnType(line_chart_renderer.RenderLineChart, [framework.BuildContext])
  }));
  dart.setLibraryUri(line_chart_renderer.LineChartLeaf, I[38]);
  dart.setFieldSignature(line_chart_renderer.LineChartLeaf, () => ({
    __proto__: dart.getFields(line_chart_renderer.LineChartLeaf.__proto__),
    data: dart.finalFieldType(line_chart_data.LineChartData),
    targetData: dart.finalFieldType(line_chart_data.LineChartData),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [line_chart_data.LineTouchResponse])))
  }));
  var _painter$1 = dart.privateName(line_chart_renderer, "_painter");
  var _lastTouchedSpots = dart.privateName(line_chart_renderer, "_lastTouchedSpots");
  var _data$1 = dart.privateName(line_chart_renderer, "_data");
  var _targetData$1 = dart.privateName(line_chart_renderer, "_targetData");
  var _textScale$1 = dart.privateName(line_chart_renderer, "_textScale");
  var _touchCallback$1 = dart.privateName(line_chart_renderer, "_touchCallback");
  line_chart_renderer.RenderLineChart = class RenderLineChart extends box.RenderBox {
    get data() {
      return this[_data$1];
    }
    set data(value) {
      if (value == null) dart.nullFailed(I[37], 44, 26, "value");
      if (dart.equals(this[_data$1], value)) return;
      this[_data$1] = value;
      this.markNeedsPaint();
    }
    get targetData() {
      return this[_targetData$1];
    }
    set targetData(value) {
      if (value == null) dart.nullFailed(I[37], 52, 32, "value");
      if (dart.equals(this[_targetData$1], value)) return;
      this[_targetData$1] = value;
      this.markNeedsPaint();
    }
    get textScale() {
      return this[_textScale$1];
    }
    set textScale(value) {
      if (value == null) dart.nullFailed(I[37], 60, 24, "value");
      if (this[_textScale$1] == value) return;
      this[_textScale$1] = value;
      this.markNeedsPaint();
    }
    set touchCallback(value) {
      this[_touchCallback$1] = value;
    }
    get paintHolder() {
      return new (T.PaintHolderOfLineChartData()).new(this.data, this.targetData, this.textScale);
    }
    performLayout() {
      this.size = this.computeDryLayout(this.constraints);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[37], 85, 40, "constraints");
      return new ui.Size.new(constraints.maxWidth, constraints.maxHeight);
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[37], 90, 30, "context");
      if (offset == null) dart.nullFailed(I[37], 90, 46, "offset");
      let canvas = context.canvas;
      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      this[_painter$1].paint(new canvas_wrapper.CanvasWrapper.new(canvas, this.size), this.paintHolder);
      canvas.restore();
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[37], 99, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      let t23, t23$;
      if (event == null) dart.nullFailed(I[37], 102, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[37], 102, 66, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[37], 103, 12, "debugHandleEvent(event, entry)");
      if (this[_touchCallback$1] == null) {
        return;
      }
      let response = new line_chart_data.LineTouchResponse.new(null, event, false);
      let touchedSpots = this[_painter$1].handleTouch(event, this.size, this.paintHolder);
      if (touchedSpots == null || dart.test(touchedSpots[$isEmpty])) {
        t23 = this[_touchCallback$1];
        t23 == null ? null : t23(response);
        return;
      }
      response = response.copyWith({lineBarSpots: touchedSpots});
      if (events.PointerDownEvent.is(event)) {
        this[_lastTouchedSpots] = touchedSpots;
      } else if (events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_lastTouchedSpots], touchedSpots)) {
          response = response.copyWith({clickHappened: true});
        }
        this[_lastTouchedSpots] = null;
      }
      t23$ = this[_touchCallback$1];
      t23$ == null ? null : t23$(response);
    }
  };
  (line_chart_renderer.RenderLineChart.new = function(data, targetData, textScale, touchCallback) {
    if (data == null) dart.nullFailed(I[37], 35, 33, "data");
    if (targetData == null) dart.nullFailed(I[37], 35, 53, "targetData");
    if (textScale == null) dart.nullFailed(I[37], 35, 72, "textScale");
    this[_painter$1] = new line_chart_painter.LineChartPainter.new();
    this[_lastTouchedSpots] = null;
    this[_data$1] = data;
    this[_targetData$1] = targetData;
    this[_textScale$1] = textScale;
    this[_touchCallback$1] = touchCallback;
    line_chart_renderer.RenderLineChart.__proto__.new.call(this);
    ;
  }).prototype = line_chart_renderer.RenderLineChart.prototype;
  dart.addTypeTests(line_chart_renderer.RenderLineChart);
  dart.addTypeCaches(line_chart_renderer.RenderLineChart);
  dart.setGetterSignature(line_chart_renderer.RenderLineChart, () => ({
    __proto__: dart.getGetters(line_chart_renderer.RenderLineChart.__proto__),
    data: line_chart_data.LineChartData,
    targetData: line_chart_data.LineChartData,
    textScale: core.double,
    paintHolder: base_chart_painter.PaintHolder$(line_chart_data.LineChartData)
  }));
  dart.setSetterSignature(line_chart_renderer.RenderLineChart, () => ({
    __proto__: dart.getSetters(line_chart_renderer.RenderLineChart.__proto__),
    data: line_chart_data.LineChartData,
    targetData: line_chart_data.LineChartData,
    textScale: core.double,
    touchCallback: dart.nullable(dart.fnType(dart.void, [line_chart_data.LineTouchResponse]))
  }));
  dart.setLibraryUri(line_chart_renderer.RenderLineChart, I[38]);
  dart.setFieldSignature(line_chart_renderer.RenderLineChart, () => ({
    __proto__: dart.getFields(line_chart_renderer.RenderLineChart.__proto__),
    [_data$1]: dart.fieldType(line_chart_data.LineChartData),
    [_targetData$1]: dart.fieldType(line_chart_data.LineChartData),
    [_textScale$1]: dart.fieldType(core.double),
    [_touchCallback$1]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [line_chart_data.LineTouchResponse]))),
    [_painter$1]: dart.finalFieldType(line_chart_painter.LineChartPainter),
    [_lastTouchedSpots]: dart.fieldType(dart.nullable(core.List$(line_chart_data.LineBarSpot)))
  }));
  var data$6 = dart.privateName(line_chart, "LineChart.data");
  line_chart.LineChart = class LineChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$6];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new line_chart._LineChartState.new();
    }
  };
  (line_chart.LineChart.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[39], 19, 10, "data");
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    if (swapAnimationDuration == null) dart.nullFailed(I[39], 20, 14, "swapAnimationDuration");
    let swapAnimationCurve = opts && 'swapAnimationCurve' in opts ? opts.swapAnimationCurve : C[3] || CT.C3;
    if (swapAnimationCurve == null) dart.nullFailed(I[39], 21, 11, "swapAnimationCurve");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$6] = data;
    line_chart.LineChart.__proto__.new.call(this, {duration: swapAnimationDuration, curve: swapAnimationCurve, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = line_chart.LineChart.prototype;
  dart.addTypeTests(line_chart.LineChart);
  dart.addTypeCaches(line_chart.LineChart);
  dart.setMethodSignature(line_chart.LineChart, () => ({
    __proto__: dart.getMethods(line_chart.LineChart.__proto__),
    createState: dart.fnType(line_chart._LineChartState, [])
  }));
  dart.setLibraryUri(line_chart.LineChart, I[40]);
  dart.setFieldSignature(line_chart.LineChart, () => ({
    __proto__: dart.getFields(line_chart.LineChart.__proto__),
    data: dart.finalFieldType(line_chart_data.LineChartData)
  }));
  var _lineChartDataTween = dart.privateName(line_chart, "_lineChartDataTween");
  var _showingTouchedTooltips = dart.privateName(line_chart, "_showingTouchedTooltips");
  var _showingTouchedIndicators = dart.privateName(line_chart, "_showingTouchedIndicators");
  var _getData$0 = dart.privateName(line_chart, "_getData");
  var _withTouchedIndicators$ = dart.privateName(line_chart, "_withTouchedIndicators");
  var _handleBuiltInTouch$ = dart.privateName(line_chart, "_handleBuiltInTouch");
  line_chart._LineChartState = class _LineChartState extends implicit_animations.AnimatedWidgetBaseState$(line_chart.LineChart) {
    build(context) {
      if (context == null) dart.nullFailed(I[39], 39, 29, "context");
      let showingData = this[_getData$0]();
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(details => {
          if (details == null) dart.nullFailed(I[39], 46, 26, "details");
        }, T.LongPressStartDetailsTovoid()), child: new line_chart_renderer.LineChartLeaf.new({data: this[_withTouchedIndicators$](dart.nullCheck(this[_lineChartDataTween]).evaluate(this.animation)), targetData: this[_withTouchedIndicators$](showingData), touchCallback: dart.bind(this, _handleBuiltInTouch$), $creationLocationd_0dea112b090073317d4: C[57] || CT.C57}), $creationLocationd_0dea112b090073317d4: C[62] || CT.C62});
    }
    [_withTouchedIndicators$](lineChartData) {
      if (lineChartData == null) dart.nullFailed(I[39], 55, 54, "lineChartData");
      if (!dart.test(lineChartData.lineTouchData.enabled) || !dart.test(lineChartData.lineTouchData.handleBuiltInTouches)) {
        return lineChartData;
      }
      return lineChartData.copyWith({showingTooltipIndicators: this[_showingTouchedTooltips], lineBarsData: lineChartData.lineBarsData[$map](line_chart_data.LineChartBarData, dart.fn(barData => {
          let t23;
          if (barData == null) dart.nullFailed(I[39], 62, 53, "barData");
          let index = lineChartData.lineBarsData[$indexOf](barData);
          return barData.copyWith({showingIndicators: (t23 = this[_showingTouchedIndicators][$_get](index), t23 == null ? T.JSArrayOfint().of([]) : t23)});
        }, T.LineChartBarDataToLineChartBarData()))[$toList]()});
    }
    [_getData$0]() {
      let lineTouchData = this.widget.data.lineTouchData;
      if (dart.test(lineTouchData.enabled) && dart.test(lineTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({lineTouchData: this.widget.data.lineTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch$)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch$](touchResponse) {
      let t23;
      if (touchResponse == null) dart.nullFailed(I[39], 81, 46, "touchResponse");
      t23 = this.widget.data.lineTouchData.touchCallback;
      t23 == null ? null : t23(touchResponse);
      let desiredTouch = events.PointerDownEvent.is(touchResponse.touchInput) || events.PointerMoveEvent.is(touchResponse.touchInput) || events.PointerHoverEvent.is(touchResponse.touchInput);
      if (desiredTouch && touchResponse.lineBarSpots != null) {
        this.setState(dart.fn(() => {
          let sortedLineSpots = T.ListOfLineBarSpot().of(dart.nullCheck(touchResponse.lineBarSpots));
          sortedLineSpots[$sort](dart.fn((spot1, spot2) => {
            if (spot1 == null) dart.nullFailed(I[39], 90, 31, "spot1");
            if (spot2 == null) dart.nullFailed(I[39], 90, 38, "spot2");
            return spot2.y[$compareTo](spot1.y);
          }, T.LineBarSpotAndLineBarSpotToint()));
          this[_showingTouchedIndicators][$clear]();
          for (let i = 0; i < dart.notNull(dart.nullCheck(touchResponse.lineBarSpots)[$length]); i = i + 1) {
            let touchedBarSpot = dart.nullCheck(touchResponse.lineBarSpots)[$_get](i);
            let barPos = touchedBarSpot.barIndex;
            this[_showingTouchedIndicators][$_set](barPos, T.JSArrayOfint().of([touchedBarSpot.spotIndex]));
          }
          this[_showingTouchedTooltips][$clear]();
          this[_showingTouchedTooltips][$add](new line_chart_data.ShowingTooltipIndicators.new(sortedLineSpots));
        }, T.VoidTovoid()));
      } else {
        this.setState(dart.fn(() => {
          this[_showingTouchedTooltips][$clear]();
          this[_showingTouchedIndicators][$clear]();
        }, T.VoidTovoid()));
      }
    }
    forEachTween(visitor) {
      if (visitor == null) dart.nullFailed(I[39], 111, 43, "visitor");
      this[_lineChartDataTween] = line_chart_data.LineChartDataTween.as(visitor(this[_lineChartDataTween], this[_getData$0](), dart.fn(value => new line_chart_data.LineChartDataTween.new({begin: line_chart_data.LineChartData.as(value), end: this.widget.data}), T.dynamicToLineChartDataTween())));
    }
  };
  (line_chart._LineChartState.new = function() {
    this[_lineChartDataTween] = null;
    this[_showingTouchedTooltips] = T.JSArrayOfShowingTooltipIndicators().of([]);
    this[_showingTouchedIndicators] = new (T.IdentityMapOfint$ListOfint()).new();
    line_chart._LineChartState.__proto__.new.call(this);
    ;
  }).prototype = line_chart._LineChartState.prototype;
  dart.addTypeTests(line_chart._LineChartState);
  dart.addTypeCaches(line_chart._LineChartState);
  dart.setMethodSignature(line_chart._LineChartState, () => ({
    __proto__: dart.getMethods(line_chart._LineChartState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_withTouchedIndicators$]: dart.fnType(line_chart_data.LineChartData, [line_chart_data.LineChartData]),
    [_getData$0]: dart.fnType(line_chart_data.LineChartData, []),
    [_handleBuiltInTouch$]: dart.fnType(dart.void, [line_chart_data.LineTouchResponse]),
    forEachTween: dart.fnType(dart.void, [dart.fnType(dart.nullable(tween.Tween), [dart.nullable(tween.Tween), dart.dynamic, dart.fnType(tween.Tween, [dart.dynamic])])])
  }));
  dart.setLibraryUri(line_chart._LineChartState, I[40]);
  dart.setFieldSignature(line_chart._LineChartState, () => ({
    __proto__: dart.getFields(line_chart._LineChartState.__proto__),
    [_lineChartDataTween]: dart.fieldType(dart.nullable(line_chart_data.LineChartDataTween)),
    [_showingTouchedTooltips]: dart.finalFieldType(core.List$(line_chart_data.ShowingTooltipIndicators)),
    [_showingTouchedIndicators]: dart.finalFieldType(core.Map$(core.int, core.List$(core.int)))
  }));
  var lineBarsData$ = dart.privateName(line_chart_data, "LineChartData.lineBarsData");
  var betweenBarsData$ = dart.privateName(line_chart_data, "LineChartData.betweenBarsData");
  var titlesData$0 = dart.privateName(line_chart_data, "LineChartData.titlesData");
  var extraLinesData$ = dart.privateName(line_chart_data, "LineChartData.extraLinesData");
  var lineTouchData$ = dart.privateName(line_chart_data, "LineChartData.lineTouchData");
  var showingTooltipIndicators$0 = dart.privateName(line_chart_data, "LineChartData.showingTooltipIndicators");
  const AxisChartData_EquatableMixin$36$ = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36$.new = function(opts) {
    AxisChartData_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36$.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartData = class LineChartData extends AxisChartData_EquatableMixin$36$ {
    get lineBarsData() {
      return this[lineBarsData$];
    }
    set lineBarsData(value) {
      super.lineBarsData = value;
    }
    get betweenBarsData() {
      return this[betweenBarsData$];
    }
    set betweenBarsData(value) {
      super.betweenBarsData = value;
    }
    get titlesData() {
      return this[titlesData$0];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get extraLinesData() {
      return this[extraLinesData$];
    }
    set extraLinesData(value) {
      super.extraLinesData = value;
    }
    get lineTouchData() {
      return this[lineTouchData$];
    }
    set lineTouchData(value) {
      super.lineTouchData = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$0];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 104, 36, "a");
      if (b == null) dart.nullFailed(I[41], 104, 53, "b");
      if (t == null) dart.nullFailed(I[41], 104, 63, "t");
      if (line_chart_data.LineChartData.is(a) && line_chart_data.LineChartData.is(b)) {
        return new line_chart_data.LineChartData.new({minX: ui.lerpDouble(a.minX, b.minX, t), maxX: ui.lerpDouble(a.maxX, b.maxX, t), minY: ui.lerpDouble(a.minY, b.minY, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), clipData: b.clipData, extraLinesData: line_chart_data.ExtraLinesData.lerp(a.extraLinesData, b.extraLinesData, t), gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), rangeAnnotations: axis_chart_data.RangeAnnotations.lerp(a.rangeAnnotations, b.rangeAnnotations, t), lineBarsData: lerp.lerpLineChartBarDataList(a.lineBarsData, b.lineBarsData, t), betweenBarsData: lerp.lerpBetweenBarsDataList(a.betweenBarsData, b.betweenBarsData, t), lineTouchData: b.lineTouchData, showingTooltipIndicators: b.showingTooltipIndicators});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    copyWith(opts) {
      let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5, t23$6, t23$7, t23$8, t23$9, t23$10, t23$11, t23$12, t23$13;
      let lineBarsData = opts && 'lineBarsData' in opts ? opts.lineBarsData : null;
      let betweenBarsData = opts && 'betweenBarsData' in opts ? opts.betweenBarsData : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
      let extraLinesData = opts && 'extraLinesData' in opts ? opts.extraLinesData : null;
      let lineTouchData = opts && 'lineTouchData' in opts ? opts.lineTouchData : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let clipData = opts && 'clipData' in opts ? opts.clipData : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new line_chart_data.LineChartData.new({lineBarsData: (t23 = lineBarsData, t23 == null ? this.lineBarsData : t23), betweenBarsData: (t23$ = betweenBarsData, t23$ == null ? this.betweenBarsData : t23$), titlesData: (t23$0 = titlesData, t23$0 == null ? this.titlesData : t23$0), axisTitleData: (t23$1 = axisTitleData, t23$1 == null ? this.axisTitleData : t23$1), rangeAnnotations: (t23$2 = rangeAnnotations, t23$2 == null ? this.rangeAnnotations : t23$2), extraLinesData: (t23$3 = extraLinesData, t23$3 == null ? this.extraLinesData : t23$3), lineTouchData: (t23$4 = lineTouchData, t23$4 == null ? this.lineTouchData : t23$4), showingTooltipIndicators: (t23$5 = showingTooltipIndicators, t23$5 == null ? this.showingTooltipIndicators : t23$5), gridData: (t23$6 = gridData, t23$6 == null ? this.gridData : t23$6), borderData: (t23$7 = borderData, t23$7 == null ? this.borderData : t23$7), minX: (t23$8 = minX, t23$8 == null ? this.minX : t23$8), maxX: (t23$9 = maxX, t23$9 == null ? this.maxX : t23$9), minY: (t23$10 = minY, t23$10 == null ? this.minY : t23$10), maxY: (t23$11 = maxY, t23$11 == null ? this.maxY : t23$11), clipData: (t23$12 = clipData, t23$12 == null ? this.clipData : t23$12), backgroundColor: (t23$13 = backgroundColor, t23$13 == null ? this.backgroundColor : t23$13)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.lineBarsData, this.betweenBarsData, this.titlesData, this.extraLinesData, this.lineTouchData, this.showingTooltipIndicators, this.gridData, this.borderData, this.axisTitleData, this.rangeAnnotations, this.minX, this.maxX, this.minY, this.maxY, this.clipData, this.backgroundColor]);
    }
  };
  (line_chart_data.LineChartData.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5, t23$6, t23$7, t23$8, t24, t23$9, t24$, t23$10, t24$0, t23$11, t24$1, t23$12;
    let lineBarsData = opts && 'lineBarsData' in opts ? opts.lineBarsData : null;
    let betweenBarsData = opts && 'betweenBarsData' in opts ? opts.betweenBarsData : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let extraLinesData = opts && 'extraLinesData' in opts ? opts.extraLinesData : null;
    let lineTouchData = opts && 'lineTouchData' in opts ? opts.lineTouchData : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[lineBarsData$] = (t23 = lineBarsData, t23 == null ? C[66] || CT.C66 : t23);
    this[betweenBarsData$] = (t23$ = betweenBarsData, t23$ == null ? C[67] || CT.C67 : t23$);
    this[titlesData$0] = (t23$0 = titlesData, t23$0 == null ? new axis_chart_data.FlTitlesData.new() : t23$0);
    this[extraLinesData$] = (t23$1 = extraLinesData, t23$1 == null ? new line_chart_data.ExtraLinesData.new() : t23$1);
    this[lineTouchData$] = (t23$2 = lineTouchData, t23$2 == null ? new line_chart_data.LineTouchData.new() : t23$2);
    this[showingTooltipIndicators$0] = (t23$3 = showingTooltipIndicators, t23$3 == null ? C[68] || CT.C68 : t23$3);
    line_chart_data.LineChartData.__proto__.new.call(this, {gridData: (t23$4 = gridData, t23$4 == null ? new axis_chart_data.FlGridData.new() : t23$4), touchData: (t23$5 = lineTouchData, t23$5 == null ? new line_chart_data.LineTouchData.new() : t23$5), borderData: borderData, axisTitleData: (t23$6 = axisTitleData, t23$6 == null ? new axis_chart_data.FlAxisTitleData.new() : t23$6), rangeAnnotations: (t23$7 = rangeAnnotations, t23$7 == null ? new axis_chart_data.RangeAnnotations.new() : t23$7), clipData: (t23$8 = clipData, t23$8 == null ? new base_chart_data.FlClipData.none() : t23$8), backgroundColor: backgroundColor, minX: (t23$9 = minX, t23$9 == null ? line_chart_helper.LineChartHelper.calculateMaxAxisValues((t24 = lineBarsData, t24 == null ? C[66] || CT.C66 : t24)).minX : t23$9), maxX: (t23$10 = maxX, t23$10 == null ? line_chart_helper.LineChartHelper.calculateMaxAxisValues((t24$ = lineBarsData, t24$ == null ? C[66] || CT.C66 : t24$)).maxX : t23$10), minY: (t23$11 = minY, t23$11 == null ? line_chart_helper.LineChartHelper.calculateMaxAxisValues((t24$0 = lineBarsData, t24$0 == null ? C[66] || CT.C66 : t24$0)).minY : t23$11), maxY: (t23$12 = maxY, t23$12 == null ? line_chart_helper.LineChartHelper.calculateMaxAxisValues((t24$1 = lineBarsData, t24$1 == null ? C[66] || CT.C66 : t24$1)).maxY : t23$12)});
    ;
  }).prototype = line_chart_data.LineChartData.prototype;
  dart.addTypeTests(line_chart_data.LineChartData);
  dart.addTypeCaches(line_chart_data.LineChartData);
  dart.setMethodSignature(line_chart_data.LineChartData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineChartData.__proto__),
    lerp: dart.fnType(line_chart_data.LineChartData, [base_chart_data.BaseChartData, base_chart_data.BaseChartData, core.double]),
    copyWith: dart.fnType(line_chart_data.LineChartData, [], {axisTitleData: dart.nullable(axis_chart_data.FlAxisTitleData), backgroundColor: dart.nullable(ui.Color), betweenBarsData: dart.nullable(core.List$(line_chart_data.BetweenBarsData)), borderData: dart.nullable(base_chart_data.FlBorderData), clipData: dart.nullable(base_chart_data.FlClipData), extraLinesData: dart.nullable(line_chart_data.ExtraLinesData), gridData: dart.nullable(axis_chart_data.FlGridData), lineBarsData: dart.nullable(core.List$(line_chart_data.LineChartBarData)), lineTouchData: dart.nullable(line_chart_data.LineTouchData), maxX: dart.nullable(core.double), maxY: dart.nullable(core.double), minX: dart.nullable(core.double), minY: dart.nullable(core.double), rangeAnnotations: dart.nullable(axis_chart_data.RangeAnnotations), showingTooltipIndicators: dart.nullable(core.List$(line_chart_data.ShowingTooltipIndicators)), titlesData: dart.nullable(axis_chart_data.FlTitlesData)}, {})
  }));
  dart.setLibraryUri(line_chart_data.LineChartData, I[42]);
  dart.setFieldSignature(line_chart_data.LineChartData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartData.__proto__),
    lineBarsData: dart.finalFieldType(core.List$(line_chart_data.LineChartBarData)),
    betweenBarsData: dart.finalFieldType(core.List$(line_chart_data.BetweenBarsData)),
    titlesData: dart.finalFieldType(axis_chart_data.FlTitlesData),
    extraLinesData: dart.finalFieldType(line_chart_data.ExtraLinesData),
    lineTouchData: dart.finalFieldType(line_chart_data.LineTouchData),
    showingTooltipIndicators: dart.finalFieldType(core.List$(line_chart_data.ShowingTooltipIndicators))
  }));
  var spots$ = dart.privateName(line_chart_data, "LineChartBarData.spots");
  var show$0 = dart.privateName(line_chart_data, "LineChartBarData.show");
  var colors$0 = dart.privateName(line_chart_data, "LineChartBarData.colors");
  var colorStops$ = dart.privateName(line_chart_data, "LineChartBarData.colorStops");
  var gradientFrom$ = dart.privateName(line_chart_data, "LineChartBarData.gradientFrom");
  var gradientTo$ = dart.privateName(line_chart_data, "LineChartBarData.gradientTo");
  var barWidth$ = dart.privateName(line_chart_data, "LineChartBarData.barWidth");
  var isCurved$ = dart.privateName(line_chart_data, "LineChartBarData.isCurved");
  var curveSmoothness$ = dart.privateName(line_chart_data, "LineChartBarData.curveSmoothness");
  var preventCurveOverShooting$ = dart.privateName(line_chart_data, "LineChartBarData.preventCurveOverShooting");
  var preventCurveOvershootingThreshold$ = dart.privateName(line_chart_data, "LineChartBarData.preventCurveOvershootingThreshold");
  var isStrokeCapRound$ = dart.privateName(line_chart_data, "LineChartBarData.isStrokeCapRound");
  var belowBarData$ = dart.privateName(line_chart_data, "LineChartBarData.belowBarData");
  var aboveBarData$ = dart.privateName(line_chart_data, "LineChartBarData.aboveBarData");
  var dotData$ = dart.privateName(line_chart_data, "LineChartBarData.dotData");
  var showingIndicators$ = dart.privateName(line_chart_data, "LineChartBarData.showingIndicators");
  var dashArray$ = dart.privateName(line_chart_data, "LineChartBarData.dashArray");
  var shadow$ = dart.privateName(line_chart_data, "LineChartBarData.shadow");
  var isStepLineChart$ = dart.privateName(line_chart_data, "LineChartBarData.isStepLineChart");
  var lineChartStepData$ = dart.privateName(line_chart_data, "LineChartBarData.lineChartStepData");
  var ColorSwatch__swatch = dart.privateName(colors, "ColorSwatch._swatch");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var Shadow_blurRadius = dart.privateName(ui, "Shadow.blurRadius");
  var Shadow_offset = dart.privateName(ui, "Shadow.offset");
  var Shadow_color = dart.privateName(ui, "Shadow.color");
  const Object_EquatableMixin$36$9 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$9.new = function() {
  }).prototype = Object_EquatableMixin$36$9.prototype;
  dart.applyMixin(Object_EquatableMixin$36$9, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartBarData = class LineChartBarData extends Object_EquatableMixin$36$9 {
    get spots() {
      return this[spots$];
    }
    set spots(value) {
      super.spots = value;
    }
    get show() {
      return this[show$0];
    }
    set show(value) {
      super.show = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get gradientFrom() {
      return this[gradientFrom$];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get barWidth() {
      return this[barWidth$];
    }
    set barWidth(value) {
      super.barWidth = value;
    }
    get isCurved() {
      return this[isCurved$];
    }
    set isCurved(value) {
      super.isCurved = value;
    }
    get curveSmoothness() {
      return this[curveSmoothness$];
    }
    set curveSmoothness(value) {
      super.curveSmoothness = value;
    }
    get preventCurveOverShooting() {
      return this[preventCurveOverShooting$];
    }
    set preventCurveOverShooting(value) {
      super.preventCurveOverShooting = value;
    }
    get preventCurveOvershootingThreshold() {
      return this[preventCurveOvershootingThreshold$];
    }
    set preventCurveOvershootingThreshold(value) {
      super.preventCurveOvershootingThreshold = value;
    }
    get isStrokeCapRound() {
      return this[isStrokeCapRound$];
    }
    set isStrokeCapRound(value) {
      super.isStrokeCapRound = value;
    }
    get belowBarData() {
      return this[belowBarData$];
    }
    set belowBarData(value) {
      super.belowBarData = value;
    }
    get aboveBarData() {
      return this[aboveBarData$];
    }
    set aboveBarData(value) {
      super.aboveBarData = value;
    }
    get dotData() {
      return this[dotData$];
    }
    set dotData(value) {
      super.dotData = value;
    }
    get showingIndicators() {
      return this[showingIndicators$];
    }
    set showingIndicators(value) {
      super.showingIndicators = value;
    }
    get dashArray() {
      return this[dashArray$];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    get shadow() {
      return this[shadow$];
    }
    set shadow(value) {
      super.shadow = value;
    }
    get isStepLineChart() {
      return this[isStepLineChart$];
    }
    set isStepLineChart(value) {
      super.isStepLineChart = value;
    }
    get lineChartStepData() {
      return this[lineChartStepData$];
    }
    set lineChartStepData(value) {
      super.lineChartStepData = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 345, 49, "a");
      if (b == null) dart.nullFailed(I[41], 345, 69, "b");
      if (t == null) dart.nullFailed(I[41], 345, 79, "t");
      return new line_chart_data.LineChartBarData.new({show: b.show, barWidth: ui.lerpDouble(a.barWidth, b.barWidth, t), belowBarData: line_chart_data.BarAreaData.lerp(a.belowBarData, b.belowBarData, t), aboveBarData: line_chart_data.BarAreaData.lerp(a.aboveBarData, b.aboveBarData, t), curveSmoothness: b.curveSmoothness, isCurved: b.isCurved, isStrokeCapRound: b.isStrokeCapRound, preventCurveOverShooting: b.preventCurveOverShooting, preventCurveOvershootingThreshold: ui.lerpDouble(a.preventCurveOvershootingThreshold, b.preventCurveOvershootingThreshold, t), dotData: line_chart_data.FlDotData.lerp(a.dotData, b.dotData, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), colors: lerp.lerpColorList(a.colors, b.colors, t), colorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), spots: lerp.lerpFlSpotList(a.spots, b.spots, t), showingIndicators: b.showingIndicators, shadow: ui.Shadow.lerp(a.shadow, b.shadow, t), isStepLineChart: b.isStepLineChart, lineChartStepData: line_chart_data.LineChartStepData.lerp(a.lineChartStepData, b.lineChartStepData, t)});
    }
    copyWith(opts) {
      let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5, t23$6, t23$7, t23$8, t23$9, t23$10, t23$11, t23$12, t23$13, t23$14, t23$15, t23$16, t23$17;
      let spots = opts && 'spots' in opts ? opts.spots : null;
      let show = opts && 'show' in opts ? opts.show : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
      let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
      let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
      let barWidth = opts && 'barWidth' in opts ? opts.barWidth : null;
      let isCurved = opts && 'isCurved' in opts ? opts.isCurved : null;
      let curveSmoothness = opts && 'curveSmoothness' in opts ? opts.curveSmoothness : null;
      let preventCurveOverShooting = opts && 'preventCurveOverShooting' in opts ? opts.preventCurveOverShooting : null;
      let preventCurveOvershootingThreshold = opts && 'preventCurveOvershootingThreshold' in opts ? opts.preventCurveOvershootingThreshold : null;
      let isStrokeCapRound = opts && 'isStrokeCapRound' in opts ? opts.isStrokeCapRound : null;
      let belowBarData = opts && 'belowBarData' in opts ? opts.belowBarData : null;
      let aboveBarData = opts && 'aboveBarData' in opts ? opts.aboveBarData : null;
      let dotData = opts && 'dotData' in opts ? opts.dotData : null;
      let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
      let showingIndicators = opts && 'showingIndicators' in opts ? opts.showingIndicators : null;
      let shadow = opts && 'shadow' in opts ? opts.shadow : null;
      let isStepLineChart = opts && 'isStepLineChart' in opts ? opts.isStepLineChart : null;
      let lineChartStepData = opts && 'lineChartStepData' in opts ? opts.lineChartStepData : null;
      return new line_chart_data.LineChartBarData.new({spots: (t23 = spots, t23 == null ? this.spots : t23), show: (t23$ = show, t23$ == null ? this.show : t23$), colors: (t23$0 = colors, t23$0 == null ? this.colors : t23$0), colorStops: (t23$1 = colorStops, t23$1 == null ? this.colorStops : t23$1), gradientFrom: (t23$2 = gradientFrom, t23$2 == null ? this.gradientFrom : t23$2), gradientTo: (t23$3 = gradientTo, t23$3 == null ? this.gradientTo : t23$3), barWidth: (t23$4 = barWidth, t23$4 == null ? this.barWidth : t23$4), isCurved: (t23$5 = isCurved, t23$5 == null ? this.isCurved : t23$5), curveSmoothness: (t23$6 = curveSmoothness, t23$6 == null ? this.curveSmoothness : t23$6), preventCurveOverShooting: (t23$7 = preventCurveOverShooting, t23$7 == null ? this.preventCurveOverShooting : t23$7), preventCurveOvershootingThreshold: (t23$8 = preventCurveOvershootingThreshold, t23$8 == null ? this.preventCurveOvershootingThreshold : t23$8), isStrokeCapRound: (t23$9 = isStrokeCapRound, t23$9 == null ? this.isStrokeCapRound : t23$9), belowBarData: (t23$10 = belowBarData, t23$10 == null ? this.belowBarData : t23$10), aboveBarData: (t23$11 = aboveBarData, t23$11 == null ? this.aboveBarData : t23$11), dashArray: (t23$12 = dashArray, t23$12 == null ? this.dashArray : t23$12), dotData: (t23$13 = dotData, t23$13 == null ? this.dotData : t23$13), showingIndicators: (t23$14 = showingIndicators, t23$14 == null ? this.showingIndicators : t23$14), shadow: (t23$15 = shadow, t23$15 == null ? this.shadow : t23$15), isStepLineChart: (t23$16 = isStepLineChart, t23$16 == null ? this.isStepLineChart : t23$16), lineChartStepData: (t23$17 = lineChartStepData, t23$17 == null ? this.lineChartStepData : t23$17)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.spots, this.show, this.colors, this.colorStops, this.gradientFrom, this.gradientTo, this.barWidth, this.isCurved, this.curveSmoothness, this.preventCurveOverShooting, this.preventCurveOvershootingThreshold, this.isStrokeCapRound, this.belowBarData, this.aboveBarData, this.dotData, this.showingIndicators, this.dashArray, this.shadow, this.isStepLineChart, this.lineChartStepData]);
    }
  };
  (line_chart_data.LineChartBarData.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5, t23$6, t23$7, t23$8, t23$9, t23$10, t23$11, t23$12, t23$13, t23$14, t23$15;
    let spots = opts && 'spots' in opts ? opts.spots : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let barWidth = opts && 'barWidth' in opts ? opts.barWidth : null;
    let isCurved = opts && 'isCurved' in opts ? opts.isCurved : null;
    let curveSmoothness = opts && 'curveSmoothness' in opts ? opts.curveSmoothness : null;
    let preventCurveOverShooting = opts && 'preventCurveOverShooting' in opts ? opts.preventCurveOverShooting : null;
    let preventCurveOvershootingThreshold = opts && 'preventCurveOvershootingThreshold' in opts ? opts.preventCurveOvershootingThreshold : null;
    let isStrokeCapRound = opts && 'isStrokeCapRound' in opts ? opts.isStrokeCapRound : null;
    let belowBarData = opts && 'belowBarData' in opts ? opts.belowBarData : null;
    let aboveBarData = opts && 'aboveBarData' in opts ? opts.aboveBarData : null;
    let dotData = opts && 'dotData' in opts ? opts.dotData : null;
    let showingIndicators = opts && 'showingIndicators' in opts ? opts.showingIndicators : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let shadow = opts && 'shadow' in opts ? opts.shadow : null;
    let isStepLineChart = opts && 'isStepLineChart' in opts ? opts.isStepLineChart : null;
    let lineChartStepData = opts && 'lineChartStepData' in opts ? opts.lineChartStepData : null;
    this[spots$] = (t23 = spots, t23 == null ? C[69] || CT.C69 : t23);
    this[show$0] = (t23$ = show, t23$ == null ? true : t23$);
    this[colors$0] = (t23$0 = colors, t23$0 == null ? C[70] || CT.C70 : t23$0);
    this[colorStops$] = colorStops;
    this[gradientFrom$] = (t23$1 = gradientFrom, t23$1 == null ? C[77] || CT.C77 : t23$1);
    this[gradientTo$] = (t23$2 = gradientTo, t23$2 == null ? C[78] || CT.C78 : t23$2);
    this[barWidth$] = (t23$3 = barWidth, t23$3 == null ? 2.0 : t23$3);
    this[isCurved$] = (t23$4 = isCurved, t23$4 == null ? false : t23$4);
    this[curveSmoothness$] = (t23$5 = curveSmoothness, t23$5 == null ? 0.35 : t23$5);
    this[preventCurveOverShooting$] = (t23$6 = preventCurveOverShooting, t23$6 == null ? false : t23$6);
    this[preventCurveOvershootingThreshold$] = (t23$7 = preventCurveOvershootingThreshold, t23$7 == null ? 10.0 : t23$7);
    this[isStrokeCapRound$] = (t23$8 = isStrokeCapRound, t23$8 == null ? false : t23$8);
    this[belowBarData$] = (t23$9 = belowBarData, t23$9 == null ? new line_chart_data.BarAreaData.new() : t23$9);
    this[aboveBarData$] = (t23$10 = aboveBarData, t23$10 == null ? new line_chart_data.BarAreaData.new() : t23$10);
    this[dotData$] = (t23$11 = dotData, t23$11 == null ? new line_chart_data.FlDotData.new() : t23$11);
    this[showingIndicators$] = (t23$12 = showingIndicators, t23$12 == null ? C[1] || CT.C1 : t23$12);
    this[dashArray$] = dashArray;
    this[shadow$] = (t23$13 = shadow, t23$13 == null ? C[79] || CT.C79 : t23$13);
    this[isStepLineChart$] = (t23$14 = isStepLineChart, t23$14 == null ? false : t23$14);
    this[lineChartStepData$] = (t23$15 = lineChartStepData, t23$15 == null ? new line_chart_data.LineChartStepData.new() : t23$15);
    ;
  }).prototype = line_chart_data.LineChartBarData.prototype;
  dart.addTypeTests(line_chart_data.LineChartBarData);
  dart.addTypeCaches(line_chart_data.LineChartBarData);
  dart.setMethodSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineChartBarData.__proto__),
    copyWith: dart.fnType(line_chart_data.LineChartBarData, [], {aboveBarData: dart.nullable(line_chart_data.BarAreaData), barWidth: dart.nullable(core.double), belowBarData: dart.nullable(line_chart_data.BarAreaData), colorStops: dart.nullable(core.List$(core.double)), colors: dart.nullable(core.List$(ui.Color)), curveSmoothness: dart.nullable(core.double), dashArray: dart.nullable(core.List$(core.int)), dotData: dart.nullable(line_chart_data.FlDotData), gradientFrom: dart.nullable(ui.Offset), gradientTo: dart.nullable(ui.Offset), isCurved: dart.nullable(core.bool), isStepLineChart: dart.nullable(core.bool), isStrokeCapRound: dart.nullable(core.bool), lineChartStepData: dart.nullable(line_chart_data.LineChartStepData), preventCurveOverShooting: dart.nullable(core.bool), preventCurveOvershootingThreshold: dart.nullable(core.double), shadow: dart.nullable(ui.Shadow), show: dart.nullable(core.bool), showingIndicators: dart.nullable(core.List$(core.int)), spots: dart.nullable(core.List$(axis_chart_data.FlSpot))}, {})
  }));
  dart.setGetterSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineChartBarData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.LineChartBarData, I[42]);
  dart.setFieldSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartBarData.__proto__),
    spots: dart.finalFieldType(core.List$(axis_chart_data.FlSpot)),
    show: dart.finalFieldType(core.bool),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    gradientFrom: dart.finalFieldType(ui.Offset),
    gradientTo: dart.finalFieldType(ui.Offset),
    barWidth: dart.finalFieldType(core.double),
    isCurved: dart.finalFieldType(core.bool),
    curveSmoothness: dart.finalFieldType(core.double),
    preventCurveOverShooting: dart.finalFieldType(core.bool),
    preventCurveOvershootingThreshold: dart.finalFieldType(core.double),
    isStrokeCapRound: dart.finalFieldType(core.bool),
    belowBarData: dart.finalFieldType(line_chart_data.BarAreaData),
    aboveBarData: dart.finalFieldType(line_chart_data.BarAreaData),
    dotData: dart.finalFieldType(line_chart_data.FlDotData),
    showingIndicators: dart.finalFieldType(core.List$(core.int)),
    dashArray: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    shadow: dart.finalFieldType(ui.Shadow),
    isStepLineChart: dart.finalFieldType(core.bool),
    lineChartStepData: dart.finalFieldType(line_chart_data.LineChartStepData)
  }));
  var stepDirection$ = dart.privateName(line_chart_data, "LineChartStepData.stepDirection");
  const Object_EquatableMixin$36$10 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$10.new = function() {
  }).prototype = Object_EquatableMixin$36$10.prototype;
  dart.applyMixin(Object_EquatableMixin$36$10, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartStepData = class LineChartStepData extends Object_EquatableMixin$36$10 {
    get stepDirection() {
      return this[stepDirection$];
    }
    set stepDirection(value) {
      super.stepDirection = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 464, 51, "a");
      if (b == null) dart.nullFailed(I[41], 464, 72, "b");
      if (t == null) dart.nullFailed(I[41], 464, 82, "t");
      return new line_chart_data.LineChartStepData.new({stepDirection: dart.nullCheck(ui.lerpDouble(a.stepDirection, b.stepDirection, t))});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.stepDirection]);
    }
  };
  (line_chart_data.LineChartStepData.new = function(opts) {
    let stepDirection = opts && 'stepDirection' in opts ? opts.stepDirection : 0.5;
    if (stepDirection == null) dart.nullFailed(I[41], 461, 27, "stepDirection");
    this[stepDirection$] = stepDirection;
    ;
  }).prototype = line_chart_data.LineChartStepData.prototype;
  dart.addTypeTests(line_chart_data.LineChartStepData);
  dart.addTypeCaches(line_chart_data.LineChartStepData);
  dart.setGetterSignature(line_chart_data.LineChartStepData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineChartStepData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.LineChartStepData, I[42]);
  dart.setFieldSignature(line_chart_data.LineChartStepData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartStepData.__proto__),
    stepDirection: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(line_chart_data.LineChartStepData, {
    /*line_chart_data.LineChartStepData.stepDirectionForward*/get stepDirectionForward() {
      return 0;
    },
    /*line_chart_data.LineChartStepData.stepDirectionMiddle*/get stepDirectionMiddle() {
      return 0.5;
    },
    /*line_chart_data.LineChartStepData.stepDirectionBackward*/get stepDirectionBackward() {
      return 1;
    }
  }, false);
  var show$1 = dart.privateName(line_chart_data, "BarAreaData.show");
  var colors$1 = dart.privateName(line_chart_data, "BarAreaData.colors");
  var gradientFrom$0 = dart.privateName(line_chart_data, "BarAreaData.gradientFrom");
  var gradientTo$0 = dart.privateName(line_chart_data, "BarAreaData.gradientTo");
  var gradientColorStops$ = dart.privateName(line_chart_data, "BarAreaData.gradientColorStops");
  var spotsLine$ = dart.privateName(line_chart_data, "BarAreaData.spotsLine");
  var cutOffY$ = dart.privateName(line_chart_data, "BarAreaData.cutOffY");
  var applyCutOffY$ = dart.privateName(line_chart_data, "BarAreaData.applyCutOffY");
  const Object_EquatableMixin$36$11 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$11.new = function() {
  }).prototype = Object_EquatableMixin$36$11.prototype;
  dart.applyMixin(Object_EquatableMixin$36$11, equatable_mixin.EquatableMixin);
  line_chart_data.BarAreaData = class BarAreaData extends Object_EquatableMixin$36$11 {
    get show() {
      return this[show$1];
    }
    set show(value) {
      super.show = value;
    }
    get colors() {
      return this[colors$1];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$0];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$0];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get gradientColorStops() {
      return this[gradientColorStops$];
    }
    set gradientColorStops(value) {
      super.gradientColorStops = value;
    }
    get spotsLine() {
      return this[spotsLine$];
    }
    set spotsLine(value) {
      super.spotsLine = value;
    }
    get cutOffY() {
      return this[cutOffY$];
    }
    set cutOffY(value) {
      super.cutOffY = value;
    }
    get applyCutOffY() {
      return this[applyCutOffY$];
    }
    set applyCutOffY(value) {
      super.applyCutOffY = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 540, 39, "a");
      if (b == null) dart.nullFailed(I[41], 540, 54, "b");
      if (t == null) dart.nullFailed(I[41], 540, 64, "t");
      return new line_chart_data.BarAreaData.new({show: b.show, gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), spotsLine: line_chart_data.BarAreaSpotsLine.lerp(a.spotsLine, b.spotsLine, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.gradientColorStops, b.gradientColorStops, t), cutOffY: ui.lerpDouble(a.cutOffY, b.cutOffY, t), applyCutOffY: b.applyCutOffY});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.colors, this.gradientFrom, this.gradientTo, this.gradientColorStops, this.spotsLine, this.cutOffY, this.applyCutOffY]);
    }
  };
  (line_chart_data.BarAreaData.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    let spotsLine = opts && 'spotsLine' in opts ? opts.spotsLine : null;
    let cutOffY = opts && 'cutOffY' in opts ? opts.cutOffY : null;
    let applyCutOffY = opts && 'applyCutOffY' in opts ? opts.applyCutOffY : null;
    this[show$1] = (t23 = show, t23 == null ? false : t23);
    this[colors$1] = (t23$ = colors, t23$ == null ? T.JSArrayOfColor().of([colors$.Colors.blueGrey]) : t23$);
    this[gradientFrom$0] = (t23$0 = gradientFrom, t23$0 == null ? C[77] || CT.C77 : t23$0);
    this[gradientTo$0] = (t23$1 = gradientTo, t23$1 == null ? C[78] || CT.C78 : t23$1);
    this[gradientColorStops$] = gradientColorStops;
    this[spotsLine$] = (t23$2 = spotsLine, t23$2 == null ? new line_chart_data.BarAreaSpotsLine.new() : t23$2);
    this[cutOffY$] = (t23$3 = cutOffY, t23$3 == null ? 0.0 : t23$3);
    this[applyCutOffY$] = (t23$4 = applyCutOffY, t23$4 == null ? false : t23$4);
    if (!(applyCutOffY === true ? cutOffY != null : true)) dart.assertFailed(null, I[41], 537, 16, "applyCutOffY == true ? cutOffY != null : true");
    ;
  }).prototype = line_chart_data.BarAreaData.prototype;
  dart.addTypeTests(line_chart_data.BarAreaData);
  dart.addTypeCaches(line_chart_data.BarAreaData);
  dart.setGetterSignature(line_chart_data.BarAreaData, () => ({
    __proto__: dart.getGetters(line_chart_data.BarAreaData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.BarAreaData, I[42]);
  dart.setFieldSignature(line_chart_data.BarAreaData, () => ({
    __proto__: dart.getFields(line_chart_data.BarAreaData.__proto__),
    show: dart.finalFieldType(core.bool),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    gradientFrom: dart.finalFieldType(ui.Offset),
    gradientTo: dart.finalFieldType(ui.Offset),
    gradientColorStops: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    spotsLine: dart.finalFieldType(line_chart_data.BarAreaSpotsLine),
    cutOffY: dart.finalFieldType(core.double),
    applyCutOffY: dart.finalFieldType(core.bool)
  }));
  var fromIndex$ = dart.privateName(line_chart_data, "BetweenBarsData.fromIndex");
  var toIndex$ = dart.privateName(line_chart_data, "BetweenBarsData.toIndex");
  var colors$2 = dart.privateName(line_chart_data, "BetweenBarsData.colors");
  var gradientFrom$1 = dart.privateName(line_chart_data, "BetweenBarsData.gradientFrom");
  var gradientTo$1 = dart.privateName(line_chart_data, "BetweenBarsData.gradientTo");
  var gradientColorStops$0 = dart.privateName(line_chart_data, "BetweenBarsData.gradientColorStops");
  const Object_EquatableMixin$36$12 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$12.new = function() {
  }).prototype = Object_EquatableMixin$36$12.prototype;
  dart.applyMixin(Object_EquatableMixin$36$12, equatable_mixin.EquatableMixin);
  line_chart_data.BetweenBarsData = class BetweenBarsData extends Object_EquatableMixin$36$12 {
    get fromIndex() {
      return this[fromIndex$];
    }
    set fromIndex(value) {
      super.fromIndex = value;
    }
    get toIndex() {
      return this[toIndex$];
    }
    set toIndex(value) {
      super.toIndex = value;
    }
    get colors() {
      return this[colors$2];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$1];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$1];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get gradientColorStops() {
      return this[gradientColorStops$0];
    }
    set gradientColorStops(value) {
      super.gradientColorStops = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 608, 47, "a");
      if (b == null) dart.nullFailed(I[41], 608, 66, "b");
      if (t == null) dart.nullFailed(I[41], 608, 76, "t");
      return new line_chart_data.BetweenBarsData.new({fromIndex: b.fromIndex, toIndex: b.toIndex, gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.gradientColorStops, b.gradientColorStops, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.fromIndex, this.toIndex, this.colors, this.gradientFrom, this.gradientTo, this.gradientColorStops]);
    }
  };
  (line_chart_data.BetweenBarsData.new = function(opts) {
    let t23, t23$, t23$0;
    let fromIndex = opts && 'fromIndex' in opts ? opts.fromIndex : null;
    if (fromIndex == null) dart.nullFailed(I[41], 594, 18, "fromIndex");
    let toIndex = opts && 'toIndex' in opts ? opts.toIndex : null;
    if (toIndex == null) dart.nullFailed(I[41], 595, 18, "toIndex");
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    this[fromIndex$] = fromIndex;
    this[toIndex$] = toIndex;
    this[colors$2] = (t23 = colors, t23 == null ? C[80] || CT.C80 : t23);
    this[gradientFrom$1] = (t23$ = gradientFrom, t23$ == null ? C[77] || CT.C77 : t23$);
    this[gradientTo$1] = (t23$0 = gradientTo, t23$0 == null ? C[78] || CT.C78 : t23$0);
    this[gradientColorStops$0] = gradientColorStops;
    ;
  }).prototype = line_chart_data.BetweenBarsData.prototype;
  dart.addTypeTests(line_chart_data.BetweenBarsData);
  dart.addTypeCaches(line_chart_data.BetweenBarsData);
  dart.setGetterSignature(line_chart_data.BetweenBarsData, () => ({
    __proto__: dart.getGetters(line_chart_data.BetweenBarsData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.BetweenBarsData, I[42]);
  dart.setFieldSignature(line_chart_data.BetweenBarsData, () => ({
    __proto__: dart.getFields(line_chart_data.BetweenBarsData.__proto__),
    fromIndex: dart.finalFieldType(core.int),
    toIndex: dart.finalFieldType(core.int),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    gradientFrom: dart.finalFieldType(ui.Offset),
    gradientTo: dart.finalFieldType(ui.Offset),
    gradientColorStops: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var show$2 = dart.privateName(line_chart_data, "BarAreaSpotsLine.show");
  var flLineStyle$ = dart.privateName(line_chart_data, "BarAreaSpotsLine.flLineStyle");
  var checkToShowSpotLine$ = dart.privateName(line_chart_data, "BarAreaSpotsLine.checkToShowSpotLine");
  var applyCutOffY$0 = dart.privateName(line_chart_data, "BarAreaSpotsLine.applyCutOffY");
  const Object_EquatableMixin$36$13 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$13.new = function() {
  }).prototype = Object_EquatableMixin$36$13.prototype;
  dart.applyMixin(Object_EquatableMixin$36$13, equatable_mixin.EquatableMixin);
  line_chart_data.BarAreaSpotsLine = class BarAreaSpotsLine extends Object_EquatableMixin$36$13 {
    get show() {
      return this[show$2];
    }
    set show(value) {
      super.show = value;
    }
    get flLineStyle() {
      return this[flLineStyle$];
    }
    set flLineStyle(value) {
      super.flLineStyle = value;
    }
    get checkToShowSpotLine() {
      return this[checkToShowSpotLine$];
    }
    set checkToShowSpotLine(value) {
      super.checkToShowSpotLine = value;
    }
    get applyCutOffY() {
      return this[applyCutOffY$0];
    }
    set applyCutOffY(value) {
      super.applyCutOffY = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 659, 49, "a");
      if (b == null) dart.nullFailed(I[41], 659, 69, "b");
      if (t == null) dart.nullFailed(I[41], 659, 79, "t");
      return new line_chart_data.BarAreaSpotsLine.new({show: b.show, checkToShowSpotLine: b.checkToShowSpotLine, flLineStyle: axis_chart_data.FlLine.lerp(a.flLineStyle, b.flLineStyle, t), applyCutOffY: b.applyCutOffY});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.flLineStyle, this.checkToShowSpotLine, this.applyCutOffY]);
    }
  };
  (line_chart_data.BarAreaSpotsLine.new = function(opts) {
    let t23, t23$, t23$0, t23$1;
    let show = opts && 'show' in opts ? opts.show : null;
    let flLineStyle = opts && 'flLineStyle' in opts ? opts.flLineStyle : null;
    let checkToShowSpotLine = opts && 'checkToShowSpotLine' in opts ? opts.checkToShowSpotLine : null;
    let applyCutOffY = opts && 'applyCutOffY' in opts ? opts.applyCutOffY : null;
    this[show$2] = (t23 = show, t23 == null ? false : t23);
    this[flLineStyle$] = (t23$ = flLineStyle, t23$ == null ? new axis_chart_data.FlLine.new() : t23$);
    this[checkToShowSpotLine$] = (t23$0 = checkToShowSpotLine, t23$0 == null ? C[93] || CT.C93 : t23$0);
    this[applyCutOffY$0] = (t23$1 = applyCutOffY, t23$1 == null ? true : t23$1);
    ;
  }).prototype = line_chart_data.BarAreaSpotsLine.prototype;
  dart.addTypeTests(line_chart_data.BarAreaSpotsLine);
  dart.addTypeCaches(line_chart_data.BarAreaSpotsLine);
  dart.setGetterSignature(line_chart_data.BarAreaSpotsLine, () => ({
    __proto__: dart.getGetters(line_chart_data.BarAreaSpotsLine.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.BarAreaSpotsLine, I[42]);
  dart.setFieldSignature(line_chart_data.BarAreaSpotsLine, () => ({
    __proto__: dart.getFields(line_chart_data.BarAreaSpotsLine.__proto__),
    show: dart.finalFieldType(core.bool),
    flLineStyle: dart.finalFieldType(axis_chart_data.FlLine),
    checkToShowSpotLine: dart.finalFieldType(dart.fnType(core.bool, [axis_chart_data.FlSpot])),
    applyCutOffY: dart.finalFieldType(core.bool)
  }));
  var show$3 = dart.privateName(line_chart_data, "FlDotData.show");
  var checkToShowDot$ = dart.privateName(line_chart_data, "FlDotData.checkToShowDot");
  var getDotPainter$ = dart.privateName(line_chart_data, "FlDotData.getDotPainter");
  const Object_EquatableMixin$36$14 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$14.new = function() {
  }).prototype = Object_EquatableMixin$36$14.prototype;
  dart.applyMixin(Object_EquatableMixin$36$14, equatable_mixin.EquatableMixin);
  line_chart_data.FlDotData = class FlDotData extends Object_EquatableMixin$36$14 {
    get show() {
      return this[show$3];
    }
    set show(value) {
      super.show = value;
    }
    get checkToShowDot() {
      return this[checkToShowDot$];
    }
    set checkToShowDot(value) {
      super.checkToShowDot = value;
    }
    get getDotPainter() {
      return this[getDotPainter$];
    }
    set getDotPainter(value) {
      super.getDotPainter = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 764, 35, "a");
      if (b == null) dart.nullFailed(I[41], 764, 48, "b");
      if (t == null) dart.nullFailed(I[41], 764, 58, "t");
      return new line_chart_data.FlDotData.new({show: b.show, checkToShowDot: b.checkToShowDot, getDotPainter: b.getDotPainter});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.checkToShowDot, this.getDotPainter]);
    }
  };
  (line_chart_data.FlDotData.new = function(opts) {
    let t23, t23$, t23$0;
    let show = opts && 'show' in opts ? opts.show : null;
    let checkToShowDot = opts && 'checkToShowDot' in opts ? opts.checkToShowDot : null;
    let getDotPainter = opts && 'getDotPainter' in opts ? opts.getDotPainter : null;
    this[show$3] = (t23 = show, t23 == null ? true : t23);
    this[checkToShowDot$] = (t23$ = checkToShowDot, t23$ == null ? C[94] || CT.C94 : t23$);
    this[getDotPainter$] = (t23$0 = getDotPainter, t23$0 == null ? C[95] || CT.C95 : t23$0);
    ;
  }).prototype = line_chart_data.FlDotData.prototype;
  dart.addTypeTests(line_chart_data.FlDotData);
  dart.addTypeCaches(line_chart_data.FlDotData);
  dart.setGetterSignature(line_chart_data.FlDotData, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.FlDotData, I[42]);
  dart.setFieldSignature(line_chart_data.FlDotData, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotData.__proto__),
    show: dart.finalFieldType(core.bool),
    checkToShowDot: dart.finalFieldType(dart.fnType(core.bool, [axis_chart_data.FlSpot, line_chart_data.LineChartBarData])),
    getDotPainter: dart.finalFieldType(dart.fnType(line_chart_data.FlDotPainter, [axis_chart_data.FlSpot, core.double, line_chart_data.LineChartBarData, core.int]))
  }));
  const Object_EquatableMixin$36$15 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$15.new = function() {
  }).prototype = Object_EquatableMixin$36$15.prototype;
  dart.applyMixin(Object_EquatableMixin$36$15, equatable_mixin.EquatableMixin);
  line_chart_data.FlDotPainter = class FlDotPainter extends Object_EquatableMixin$36$15 {};
  (line_chart_data.FlDotPainter.new = function() {
    ;
  }).prototype = line_chart_data.FlDotPainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotPainter);
  dart.addTypeCaches(line_chart_data.FlDotPainter);
  dart.setLibraryUri(line_chart_data.FlDotPainter, I[42]);
  var color$1 = dart.privateName(line_chart_data, "FlDotCirclePainter.color");
  var radius$1 = dart.privateName(line_chart_data, "FlDotCirclePainter.radius");
  var strokeColor$ = dart.privateName(line_chart_data, "FlDotCirclePainter.strokeColor");
  var strokeWidth$ = dart.privateName(line_chart_data, "FlDotCirclePainter.strokeWidth");
  line_chart_data.FlDotCirclePainter = class FlDotCirclePainter extends line_chart_data.FlDotPainter {
    get color() {
      return this[color$1];
    }
    set color(value) {
      this[color$1] = value;
    }
    get radius() {
      return this[radius$1];
    }
    set radius(value) {
      this[radius$1] = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      this[strokeColor$] = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      this[strokeWidth$] = value;
    }
    draw(canvas, spot, offsetInCanvas) {
      let t23, t23$;
      if (canvas == null) dart.nullFailed(I[41], 822, 20, "canvas");
      if (spot == null) dart.nullFailed(I[41], 822, 35, "spot");
      if (offsetInCanvas == null) dart.nullFailed(I[41], 822, 48, "offsetInCanvas");
      if (this.strokeWidth !== 0.0 && this.strokeColor.opacity !== 0.0) {
        canvas.drawCircle(offsetInCanvas, dart.notNull(this.radius) + dart.notNull(this.strokeWidth) / 2, (t23 = ui.Paint.new(), (() => {
          t23.color = this.strokeColor;
          t23.strokeWidth = this.strokeWidth;
          t23.style = ui.PaintingStyle.stroke;
          return t23;
        })()));
      }
      canvas.drawCircle(offsetInCanvas, this.radius, (t23$ = ui.Paint.new(), (() => {
        t23$.color = this.color;
        t23$.style = ui.PaintingStyle.fill;
        return t23$;
      })()));
    }
    getSize(spot) {
      if (spot == null) dart.nullFailed(I[41], 842, 23, "spot");
      return new ui.Size.new(dart.notNull(this.radius) * 2, dart.notNull(this.radius) * 2);
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.color, this.radius, this.strokeColor, this.strokeWidth]);
    }
  };
  (line_chart_data.FlDotCirclePainter.new = function(opts) {
    let t23, t23$, t23$0, t23$1;
    let color = opts && 'color' in opts ? opts.color : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[color$1] = (t23 = color, t23 == null ? colors$.Colors.green : t23);
    this[radius$1] = (t23$ = radius, t23$ == null ? 4.0 : t23$);
    this[strokeColor$] = (t23$0 = strokeColor, t23$0 == null ? color_extension['ColorExtension|darken'](colors$.Colors.green) : t23$0);
    this[strokeWidth$] = (t23$1 = strokeWidth, t23$1 == null ? 1.0 : t23$1);
    ;
  }).prototype = line_chart_data.FlDotCirclePainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotCirclePainter);
  dart.addTypeCaches(line_chart_data.FlDotCirclePainter);
  dart.setMethodSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getMethods(line_chart_data.FlDotCirclePainter.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, axis_chart_data.FlSpot, ui.Offset]),
    getSize: dart.fnType(ui.Size, [axis_chart_data.FlSpot])
  }));
  dart.setGetterSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotCirclePainter.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.FlDotCirclePainter, I[42]);
  dart.setFieldSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotCirclePainter.__proto__),
    color: dart.fieldType(ui.Color),
    radius: dart.fieldType(core.double),
    strokeColor: dart.fieldType(ui.Color),
    strokeWidth: dart.fieldType(core.double)
  }));
  var color$2 = dart.privateName(line_chart_data, "FlDotSquarePainter.color");
  var size$ = dart.privateName(line_chart_data, "FlDotSquarePainter.size");
  var strokeColor$0 = dart.privateName(line_chart_data, "FlDotSquarePainter.strokeColor");
  var strokeWidth$0 = dart.privateName(line_chart_data, "FlDotSquarePainter.strokeWidth");
  line_chart_data.FlDotSquarePainter = class FlDotSquarePainter extends line_chart_data.FlDotPainter {
    get color() {
      return this[color$2];
    }
    set color(value) {
      this[color$2] = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      this[size$] = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      this[strokeColor$0] = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      this[strokeWidth$0] = value;
    }
    draw(canvas, spot, offsetInCanvas) {
      let t23, t23$;
      if (canvas == null) dart.nullFailed(I[41], 888, 20, "canvas");
      if (spot == null) dart.nullFailed(I[41], 888, 35, "spot");
      if (offsetInCanvas == null) dart.nullFailed(I[41], 888, 48, "offsetInCanvas");
      if (this.strokeWidth !== 0.0 && this.strokeColor.opacity !== 0.0) {
        canvas.drawRect(new ui.Rect.fromCircle({center: offsetInCanvas, radius: dart.notNull(this.size) / 2 + dart.notNull(this.strokeWidth) / 2}), (t23 = ui.Paint.new(), (() => {
          t23.color = this.strokeColor;
          t23.strokeWidth = this.strokeWidth;
          t23.style = ui.PaintingStyle.stroke;
          return t23;
        })()));
      }
      canvas.drawRect(new ui.Rect.fromCircle({center: offsetInCanvas, radius: dart.notNull(this.size) / 2}), (t23$ = ui.Paint.new(), (() => {
        t23$.color = this.color;
        t23$.style = ui.PaintingStyle.fill;
        return t23$;
      })()));
    }
    getSize(spot) {
      if (spot == null) dart.nullFailed(I[41], 912, 23, "spot");
      return new ui.Size.new(this.size, this.size);
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.color, this.size, this.strokeColor, this.strokeWidth]);
    }
  };
  (line_chart_data.FlDotSquarePainter.new = function(opts) {
    let t23, t23$, t23$0, t23$1;
    let color = opts && 'color' in opts ? opts.color : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[color$2] = (t23 = color, t23 == null ? colors$.Colors.green : t23);
    this[size$] = (t23$ = size, t23$ == null ? 4.0 : t23$);
    this[strokeColor$0] = (t23$0 = strokeColor, t23$0 == null ? color_extension['ColorExtension|darken'](colors$.Colors.green) : t23$0);
    this[strokeWidth$0] = (t23$1 = strokeWidth, t23$1 == null ? 1.0 : t23$1);
    ;
  }).prototype = line_chart_data.FlDotSquarePainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotSquarePainter);
  dart.addTypeCaches(line_chart_data.FlDotSquarePainter);
  dart.setMethodSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getMethods(line_chart_data.FlDotSquarePainter.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, axis_chart_data.FlSpot, ui.Offset]),
    getSize: dart.fnType(ui.Size, [axis_chart_data.FlSpot])
  }));
  dart.setGetterSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotSquarePainter.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.FlDotSquarePainter, I[42]);
  dart.setFieldSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotSquarePainter.__proto__),
    color: dart.fieldType(ui.Color),
    size: dart.fieldType(core.double),
    strokeColor: dart.fieldType(ui.Color),
    strokeWidth: dart.fieldType(core.double)
  }));
  var color$3 = dart.privateName(line_chart_data, "FlDotCrossPainter.color");
  var size$0 = dart.privateName(line_chart_data, "FlDotCrossPainter.size");
  var width$ = dart.privateName(line_chart_data, "FlDotCrossPainter.width");
  line_chart_data.FlDotCrossPainter = class FlDotCrossPainter extends line_chart_data.FlDotPainter {
    get color() {
      return this[color$3];
    }
    set color(value) {
      this[color$3] = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      this[size$0] = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      this[width$] = value;
    }
    draw(canvas, spot, offsetInCanvas) {
      let t23, t23$;
      if (canvas == null) dart.nullFailed(I[41], 950, 20, "canvas");
      if (spot == null) dart.nullFailed(I[41], 950, 35, "spot");
      if (offsetInCanvas == null) dart.nullFailed(I[41], 950, 48, "offsetInCanvas");
      let path = (t23 = ui.Path.new(), (() => {
        t23.moveTo(offsetInCanvas.dx, offsetInCanvas.dy);
        t23.relativeMoveTo(-dart.notNull(this.size) / 2, -dart.notNull(this.size) / 2);
        t23.relativeLineTo(this.size, this.size);
        t23.moveTo(offsetInCanvas.dx, offsetInCanvas.dy);
        t23.relativeMoveTo(dart.notNull(this.size) / 2, -dart.notNull(this.size) / 2);
        t23.relativeLineTo(-dart.notNull(this.size), this.size);
        return t23;
      })());
      let paint = (t23$ = ui.Paint.new(), (() => {
        t23$.style = ui.PaintingStyle.stroke;
        t23$.strokeWidth = this.width;
        t23$.color = this.color;
        return t23$;
      })());
      canvas.drawPath(path, paint);
    }
    getSize(spot) {
      if (spot == null) dart.nullFailed(I[41], 969, 23, "spot");
      return new ui.Size.new(this.size, this.size);
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.color, this.size, this.width]);
    }
  };
  (line_chart_data.FlDotCrossPainter.new = function(opts) {
    let t23, t23$, t23$0;
    let color = opts && 'color' in opts ? opts.color : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let width = opts && 'width' in opts ? opts.width : null;
    this[color$3] = (t23 = color, t23 == null ? colors$.Colors.green : t23);
    this[size$0] = (t23$ = size, t23$ == null ? 8.0 : t23$);
    this[width$] = (t23$0 = width, t23$0 == null ? 2.0 : t23$0);
    ;
  }).prototype = line_chart_data.FlDotCrossPainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotCrossPainter);
  dart.addTypeCaches(line_chart_data.FlDotCrossPainter);
  dart.setMethodSignature(line_chart_data.FlDotCrossPainter, () => ({
    __proto__: dart.getMethods(line_chart_data.FlDotCrossPainter.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, axis_chart_data.FlSpot, ui.Offset]),
    getSize: dart.fnType(ui.Size, [axis_chart_data.FlSpot])
  }));
  dart.setGetterSignature(line_chart_data.FlDotCrossPainter, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotCrossPainter.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.FlDotCrossPainter, I[42]);
  dart.setFieldSignature(line_chart_data.FlDotCrossPainter, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotCrossPainter.__proto__),
    color: dart.fieldType(ui.Color),
    size: dart.fieldType(core.double),
    width: dart.fieldType(core.double)
  }));
  var y$0 = dart.privateName(line_chart_data, "HorizontalLine.y");
  var image$ = dart.privateName(line_chart_data, "HorizontalLine.image");
  var sizedPicture$ = dart.privateName(line_chart_data, "HorizontalLine.sizedPicture");
  var label$ = dart.privateName(line_chart_data, "HorizontalLine.label");
  var color$4 = dart.privateName(axis_chart_data, "FlLine.color");
  var strokeWidth$1 = dart.privateName(axis_chart_data, "FlLine.strokeWidth");
  var dashArray$0 = dart.privateName(axis_chart_data, "FlLine.dashArray");
  const Object_EquatableMixin$36$16 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$16.new = function() {
  }).prototype = Object_EquatableMixin$36$16.prototype;
  dart.applyMixin(Object_EquatableMixin$36$16, equatable_mixin.EquatableMixin);
  axis_chart_data.FlLine = class FlLine extends Object_EquatableMixin$36$16 {
    get color() {
      return this[color$4];
    }
    set color(value) {
      super.color = value;
    }
    get strokeWidth() {
      return this[strokeWidth$1];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get dashArray() {
      return this[dashArray$0];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 564, 29, "a");
      if (b == null) dart.nullFailed(I[6], 564, 39, "b");
      if (t == null) dart.nullFailed(I[6], 564, 49, "t");
      return new axis_chart_data.FlLine.new({color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.color, this.strokeWidth, this.dashArray]);
    }
  };
  (axis_chart_data.FlLine.new = function(opts) {
    let t23, t23$;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    this[color$4] = (t23 = color, t23 == null ? colors$.Colors.black : t23);
    this[strokeWidth$1] = (t23$ = strokeWidth, t23$ == null ? 2.0 : t23$);
    this[dashArray$0] = dashArray;
    ;
  }).prototype = axis_chart_data.FlLine.prototype;
  dart.addTypeTests(axis_chart_data.FlLine);
  dart.addTypeCaches(axis_chart_data.FlLine);
  dart.setGetterSignature(axis_chart_data.FlLine, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlLine.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.FlLine, I[9]);
  dart.setFieldSignature(axis_chart_data.FlLine, () => ({
    __proto__: dart.getFields(axis_chart_data.FlLine.__proto__),
    color: dart.finalFieldType(ui.Color),
    strokeWidth: dart.finalFieldType(core.double),
    dashArray: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  const FlLine_EquatableMixin$36 = class FlLine_EquatableMixin extends axis_chart_data.FlLine {};
  (FlLine_EquatableMixin$36.new = function(opts) {
    FlLine_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = FlLine_EquatableMixin$36.prototype;
  dart.applyMixin(FlLine_EquatableMixin$36, equatable_mixin.EquatableMixin);
  line_chart_data.HorizontalLine = class HorizontalLine extends FlLine_EquatableMixin$36 {
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      this[image$] = value;
    }
    get sizedPicture() {
      return this[sizedPicture$];
    }
    set sizedPicture(value) {
      this[sizedPicture$] = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 1032, 45, "a");
      if (b == null) dart.nullFailed(I[41], 1032, 63, "b");
      if (t == null) dart.nullFailed(I[41], 1032, 73, "t");
      return new line_chart_data.HorizontalLine.new({y: dart.nullCheck(ui.lerpDouble(a.y, b.y, t)), label: line_chart_data.HorizontalLineLabel.lerp(a.label, b.label, t), color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), image: b.image, sizedPicture: b.sizedPicture});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.y, this.label, this.color, this.strokeWidth, this.dashArray, this.image, this.sizedPicture]);
    }
  };
  (line_chart_data.HorizontalLine.new = function(opts) {
    let t23, t23$, t23$0;
    let y = opts && 'y' in opts ? opts.y : null;
    if (y == null) dart.nullFailed(I[41], 1021, 19, "y");
    let label = opts && 'label' in opts ? opts.label : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let sizedPicture = opts && 'sizedPicture' in opts ? opts.sizedPicture : null;
    this[y$0] = y;
    this[image$] = image;
    this[sizedPicture$] = sizedPicture;
    this[label$] = (t23 = label, t23 == null ? new line_chart_data.HorizontalLineLabel.new() : t23);
    line_chart_data.HorizontalLine.__proto__.new.call(this, {color: (t23$ = color, t23$ == null ? colors$.Colors.black : t23$), strokeWidth: (t23$0 = strokeWidth, t23$0 == null ? 2.0 : t23$0), dashArray: dashArray});
    ;
  }).prototype = line_chart_data.HorizontalLine.prototype;
  dart.addTypeTests(line_chart_data.HorizontalLine);
  dart.addTypeCaches(line_chart_data.HorizontalLine);
  dart.setLibraryUri(line_chart_data.HorizontalLine, I[42]);
  dart.setFieldSignature(line_chart_data.HorizontalLine, () => ({
    __proto__: dart.getFields(line_chart_data.HorizontalLine.__proto__),
    y: dart.finalFieldType(core.double),
    image: dart.fieldType(dart.nullable(ui.Image)),
    sizedPicture: dart.fieldType(dart.nullable(line_chart_data.SizedPicture)),
    label: dart.finalFieldType(line_chart_data.HorizontalLineLabel)
  }));
  var x$0 = dart.privateName(line_chart_data, "VerticalLine.x");
  var image$0 = dart.privateName(line_chart_data, "VerticalLine.image");
  var sizedPicture$0 = dart.privateName(line_chart_data, "VerticalLine.sizedPicture");
  var label$0 = dart.privateName(line_chart_data, "VerticalLine.label");
  const FlLine_EquatableMixin$36$ = class FlLine_EquatableMixin extends axis_chart_data.FlLine {};
  (FlLine_EquatableMixin$36$.new = function(opts) {
    FlLine_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = FlLine_EquatableMixin$36$.prototype;
  dart.applyMixin(FlLine_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.VerticalLine = class VerticalLine extends FlLine_EquatableMixin$36$ {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get image() {
      return this[image$0];
    }
    set image(value) {
      this[image$0] = value;
    }
    get sizedPicture() {
      return this[sizedPicture$0];
    }
    set sizedPicture(value) {
      this[sizedPicture$0] = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 1096, 41, "a");
      if (b == null) dart.nullFailed(I[41], 1096, 57, "b");
      if (t == null) dart.nullFailed(I[41], 1096, 67, "t");
      return new line_chart_data.VerticalLine.new({x: dart.nullCheck(ui.lerpDouble(a.x, b.x, t)), label: line_chart_data.VerticalLineLabel.lerp(a.label, b.label, t), color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), image: b.image, sizedPicture: b.sizedPicture});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.x, this.label, this.color, this.strokeWidth, this.dashArray, this.image, this.sizedPicture]);
    }
  };
  (line_chart_data.VerticalLine.new = function(opts) {
    let t23, t23$, t23$0;
    let x = opts && 'x' in opts ? opts.x : null;
    if (x == null) dart.nullFailed(I[41], 1085, 19, "x");
    let label = opts && 'label' in opts ? opts.label : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let sizedPicture = opts && 'sizedPicture' in opts ? opts.sizedPicture : null;
    this[x$0] = x;
    this[image$0] = image;
    this[sizedPicture$0] = sizedPicture;
    this[label$0] = (t23 = label, t23 == null ? new line_chart_data.VerticalLineLabel.new() : t23);
    line_chart_data.VerticalLine.__proto__.new.call(this, {color: (t23$ = color, t23$ == null ? colors$.Colors.black : t23$), strokeWidth: (t23$0 = strokeWidth, t23$0 == null ? 2.0 : t23$0), dashArray: dashArray});
    ;
  }).prototype = line_chart_data.VerticalLine.prototype;
  dart.addTypeTests(line_chart_data.VerticalLine);
  dart.addTypeCaches(line_chart_data.VerticalLine);
  dart.setLibraryUri(line_chart_data.VerticalLine, I[42]);
  dart.setFieldSignature(line_chart_data.VerticalLine, () => ({
    __proto__: dart.getFields(line_chart_data.VerticalLine.__proto__),
    x: dart.finalFieldType(core.double),
    image: dart.fieldType(dart.nullable(ui.Image)),
    sizedPicture: dart.fieldType(dart.nullable(line_chart_data.SizedPicture)),
    label: dart.finalFieldType(line_chart_data.VerticalLineLabel)
  }));
  var show$4 = dart.privateName(line_chart_data, "FlLineLabel.show");
  var padding$ = dart.privateName(line_chart_data, "FlLineLabel.padding");
  var style$ = dart.privateName(line_chart_data, "FlLineLabel.style");
  var alignment$0 = dart.privateName(line_chart_data, "FlLineLabel.alignment");
  const Object_EquatableMixin$36$17 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$17.new = function() {
  }).prototype = Object_EquatableMixin$36$17.prototype;
  dart.applyMixin(Object_EquatableMixin$36$17, equatable_mixin.EquatableMixin);
  line_chart_data.FlLineLabel = class FlLineLabel extends Object_EquatableMixin$36$17 {
    get show() {
      return this[show$4];
    }
    set show(value) {
      super.show = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.FlLineLabel.new = function(opts) {
    let show = opts && 'show' in opts ? opts.show : null;
    if (show == null) dart.nullFailed(I[41], 1140, 22, "show");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    if (padding == null) dart.nullFailed(I[41], 1140, 42, "padding");
    let style = opts && 'style' in opts ? opts.style : null;
    if (style == null) dart.nullFailed(I[41], 1140, 65, "style");
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[41], 1140, 86, "alignment");
    this[show$4] = show;
    this[padding$] = padding;
    this[style$] = style;
    this[alignment$0] = alignment;
    ;
  }).prototype = line_chart_data.FlLineLabel.prototype;
  dart.addTypeTests(line_chart_data.FlLineLabel);
  dart.addTypeCaches(line_chart_data.FlLineLabel);
  dart.setGetterSignature(line_chart_data.FlLineLabel, () => ({
    __proto__: dart.getGetters(line_chart_data.FlLineLabel.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.FlLineLabel, I[42]);
  dart.setFieldSignature(line_chart_data.FlLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.FlLineLabel.__proto__),
    show: dart.finalFieldType(core.bool),
    padding: dart.finalFieldType(edge_insets.EdgeInsetsGeometry),
    style: dart.finalFieldType(text_style.TextStyle),
    alignment: dart.finalFieldType(alignment$.Alignment)
  }));
  var labelResolver$ = dart.privateName(line_chart_data, "HorizontalLineLabel.labelResolver");
  const FlLineLabel_EquatableMixin$36 = class FlLineLabel_EquatableMixin extends line_chart_data.FlLineLabel {};
  (FlLineLabel_EquatableMixin$36.new = function(opts) {
    FlLineLabel_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = FlLineLabel_EquatableMixin$36.prototype;
  dart.applyMixin(FlLineLabel_EquatableMixin$36, equatable_mixin.EquatableMixin);
  line_chart_data.HorizontalLineLabel = class HorizontalLineLabel extends FlLineLabel_EquatableMixin$36 {
    get labelResolver() {
      return this[labelResolver$];
    }
    set labelResolver(value) {
      super.labelResolver = value;
    }
    static defaultLineLabelResolver(line) {
      if (line == null) dart.nullFailed(I[41], 1158, 57, "line");
      return line.y[$toStringAsFixed](1);
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 1186, 55, "a");
      if (b == null) dart.nullFailed(I[41], 1186, 78, "b");
      if (t == null) dart.nullFailed(I[41], 1186, 88, "t");
      return new line_chart_data.HorizontalLineLabel.new({padding: edge_insets.EdgeInsets.lerp(edge_insets.EdgeInsets.as(a.padding), edge_insets.EdgeInsets.as(b.padding), t), style: text_style.TextStyle.lerp(a.style, b.style, t), alignment: alignment$.Alignment.lerp(a.alignment, b.alignment, t), labelResolver: b.labelResolver, show: b.show});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.labelResolver, this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.HorizontalLineLabel.new = function(opts) {
    let t23, t23$, t23$0, t23$1;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let show = opts && 'show' in opts ? opts.show : false;
    if (show == null) dart.nullFailed(I[41], 1170, 10, "show");
    let labelResolver = opts && 'labelResolver' in opts ? opts.labelResolver : null;
    this[labelResolver$] = (t23 = labelResolver, t23 == null ? C[96] || CT.C96 : t23);
    line_chart_data.HorizontalLineLabel.__proto__.new.call(this, {show: show, padding: (t23$ = padding, t23$ == null ? C[97] || CT.C97 : t23$), style: (t23$0 = style, t23$0 == null ? C[98] || CT.C98 : t23$0), alignment: (t23$1 = alignment, t23$1 == null ? alignment$.Alignment.topLeft : t23$1)});
    ;
  }).prototype = line_chart_data.HorizontalLineLabel.prototype;
  dart.addTypeTests(line_chart_data.HorizontalLineLabel);
  dart.addTypeCaches(line_chart_data.HorizontalLineLabel);
  dart.setLibraryUri(line_chart_data.HorizontalLineLabel, I[42]);
  dart.setFieldSignature(line_chart_data.HorizontalLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.HorizontalLineLabel.__proto__),
    labelResolver: dart.finalFieldType(dart.fnType(core.String, [line_chart_data.HorizontalLine]))
  }));
  var labelResolver$0 = dart.privateName(line_chart_data, "VerticalLineLabel.labelResolver");
  const FlLineLabel_EquatableMixin$36$ = class FlLineLabel_EquatableMixin extends line_chart_data.FlLineLabel {};
  (FlLineLabel_EquatableMixin$36$.new = function(opts) {
    FlLineLabel_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = FlLineLabel_EquatableMixin$36$.prototype;
  dart.applyMixin(FlLineLabel_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.VerticalLineLabel = class VerticalLineLabel extends FlLineLabel_EquatableMixin$36$ {
    get labelResolver() {
      return this[labelResolver$0];
    }
    set labelResolver(value) {
      super.labelResolver = value;
    }
    static defaultLineLabelResolver(line) {
      if (line == null) dart.nullFailed(I[41], 1213, 55, "line");
      return line.x[$toStringAsFixed](1);
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 1241, 51, "a");
      if (b == null) dart.nullFailed(I[41], 1241, 72, "b");
      if (t == null) dart.nullFailed(I[41], 1241, 82, "t");
      return new line_chart_data.VerticalLineLabel.new({padding: edge_insets.EdgeInsets.lerp(edge_insets.EdgeInsets.as(a.padding), edge_insets.EdgeInsets.as(b.padding), t), style: text_style.TextStyle.lerp(a.style, b.style, t), alignment: alignment$.Alignment.lerp(a.alignment, b.alignment, t), labelResolver: b.labelResolver, show: b.show});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.labelResolver, this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.VerticalLineLabel.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let labelResolver = opts && 'labelResolver' in opts ? opts.labelResolver : null;
    this[labelResolver$0] = (t23 = labelResolver, t23 == null ? C[99] || CT.C99 : t23);
    line_chart_data.VerticalLineLabel.__proto__.new.call(this, {show: (t23$ = show, t23$ == null ? false : t23$), padding: (t23$0 = padding, t23$0 == null ? C[97] || CT.C97 : t23$0), style: (t23$1 = style, t23$1 == null ? C[98] || CT.C98 : t23$1), alignment: (t23$2 = alignment, t23$2 == null ? alignment$.Alignment.bottomRight : t23$2)});
    ;
  }).prototype = line_chart_data.VerticalLineLabel.prototype;
  dart.addTypeTests(line_chart_data.VerticalLineLabel);
  dart.addTypeCaches(line_chart_data.VerticalLineLabel);
  dart.setLibraryUri(line_chart_data.VerticalLineLabel, I[42]);
  dart.setFieldSignature(line_chart_data.VerticalLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.VerticalLineLabel.__proto__),
    labelResolver: dart.finalFieldType(dart.fnType(core.String, [line_chart_data.VerticalLine]))
  }));
  var picture$ = dart.privateName(line_chart_data, "SizedPicture.picture");
  var width$0 = dart.privateName(line_chart_data, "SizedPicture.width");
  var height$ = dart.privateName(line_chart_data, "SizedPicture.height");
  const Object_EquatableMixin$36$18 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$18.new = function() {
  }).prototype = Object_EquatableMixin$36$18.prototype;
  dart.applyMixin(Object_EquatableMixin$36$18, equatable_mixin.EquatableMixin);
  line_chart_data.SizedPicture = class SizedPicture extends Object_EquatableMixin$36$18 {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      this[picture$] = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      this[width$0] = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      this[height$] = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.picture, this.width, this.height]);
    }
  };
  (line_chart_data.SizedPicture.new = function(picture, width, height) {
    if (picture == null) dart.nullFailed(I[41], 1292, 21, "picture");
    if (width == null) dart.nullFailed(I[41], 1292, 35, "width");
    if (height == null) dart.nullFailed(I[41], 1292, 47, "height");
    this[picture$] = picture;
    this[width$0] = width;
    this[height$] = height;
    ;
  }).prototype = line_chart_data.SizedPicture.prototype;
  dart.addTypeTests(line_chart_data.SizedPicture);
  dart.addTypeCaches(line_chart_data.SizedPicture);
  dart.setGetterSignature(line_chart_data.SizedPicture, () => ({
    __proto__: dart.getGetters(line_chart_data.SizedPicture.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.SizedPicture, I[42]);
  dart.setFieldSignature(line_chart_data.SizedPicture, () => ({
    __proto__: dart.getFields(line_chart_data.SizedPicture.__proto__),
    picture: dart.fieldType(ui.Picture),
    width: dart.fieldType(core.int),
    height: dart.fieldType(core.int)
  }));
  var horizontalLines$ = dart.privateName(line_chart_data, "ExtraLinesData.horizontalLines");
  var verticalLines$ = dart.privateName(line_chart_data, "ExtraLinesData.verticalLines");
  var extraLinesOnTop$ = dart.privateName(line_chart_data, "ExtraLinesData.extraLinesOnTop");
  const Object_EquatableMixin$36$19 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$19.new = function() {
  }).prototype = Object_EquatableMixin$36$19.prototype;
  dart.applyMixin(Object_EquatableMixin$36$19, equatable_mixin.EquatableMixin);
  line_chart_data.ExtraLinesData = class ExtraLinesData extends Object_EquatableMixin$36$19 {
    get horizontalLines() {
      return this[horizontalLines$];
    }
    set horizontalLines(value) {
      super.horizontalLines = value;
    }
    get verticalLines() {
      return this[verticalLines$];
    }
    set verticalLines(value) {
      super.verticalLines = value;
    }
    get extraLinesOnTop() {
      return this[extraLinesOnTop$];
    }
    set extraLinesOnTop(value) {
      super.extraLinesOnTop = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[41], 1326, 45, "a");
      if (b == null) dart.nullFailed(I[41], 1326, 63, "b");
      if (t == null) dart.nullFailed(I[41], 1326, 73, "t");
      return new line_chart_data.ExtraLinesData.new({extraLinesOnTop: b.extraLinesOnTop, horizontalLines: lerp.lerpHorizontalLineList(a.horizontalLines, b.horizontalLines, t), verticalLines: lerp.lerpVerticalLineList(a.verticalLines, b.verticalLines, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.horizontalLines, this.verticalLines, this.extraLinesOnTop]);
    }
  };
  (line_chart_data.ExtraLinesData.new = function(opts) {
    let t23, t23$, t23$0;
    let horizontalLines = opts && 'horizontalLines' in opts ? opts.horizontalLines : null;
    let verticalLines = opts && 'verticalLines' in opts ? opts.verticalLines : null;
    let extraLinesOnTop = opts && 'extraLinesOnTop' in opts ? opts.extraLinesOnTop : null;
    this[horizontalLines$] = (t23 = horizontalLines, t23 == null ? C[100] || CT.C100 : t23);
    this[verticalLines$] = (t23$ = verticalLines, t23$ == null ? C[101] || CT.C101 : t23$);
    this[extraLinesOnTop$] = (t23$0 = extraLinesOnTop, t23$0 == null ? true : t23$0);
    ;
  }).prototype = line_chart_data.ExtraLinesData.prototype;
  dart.addTypeTests(line_chart_data.ExtraLinesData);
  dart.addTypeCaches(line_chart_data.ExtraLinesData);
  dart.setGetterSignature(line_chart_data.ExtraLinesData, () => ({
    __proto__: dart.getGetters(line_chart_data.ExtraLinesData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.ExtraLinesData, I[42]);
  dart.setFieldSignature(line_chart_data.ExtraLinesData, () => ({
    __proto__: dart.getFields(line_chart_data.ExtraLinesData.__proto__),
    horizontalLines: dart.finalFieldType(core.List$(line_chart_data.HorizontalLine)),
    verticalLines: dart.finalFieldType(core.List$(line_chart_data.VerticalLine)),
    extraLinesOnTop: dart.finalFieldType(core.bool)
  }));
  var touchTooltipData$0 = dart.privateName(line_chart_data, "LineTouchData.touchTooltipData");
  var getTouchedSpotIndicator$ = dart.privateName(line_chart_data, "LineTouchData.getTouchedSpotIndicator");
  var touchSpotThreshold$1 = dart.privateName(line_chart_data, "LineTouchData.touchSpotThreshold");
  var handleBuiltInTouches$0 = dart.privateName(line_chart_data, "LineTouchData.handleBuiltInTouches");
  var getTouchLineStart$ = dart.privateName(line_chart_data, "LineTouchData.getTouchLineStart");
  var getTouchLineEnd$ = dart.privateName(line_chart_data, "LineTouchData.getTouchLineEnd");
  var touchCallback$6 = dart.privateName(line_chart_data, "LineTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$1 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$1.new = function(enabled) {
    FlTouchData_EquatableMixin$36$1.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$1.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$1, equatable_mixin.EquatableMixin);
  line_chart_data.LineTouchData = class LineTouchData extends FlTouchData_EquatableMixin$36$1 {
    get touchTooltipData() {
      return this[touchTooltipData$0];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get getTouchedSpotIndicator() {
      return this[getTouchedSpotIndicator$];
    }
    set getTouchedSpotIndicator(value) {
      super.getTouchedSpotIndicator = value;
    }
    get touchSpotThreshold() {
      return this[touchSpotThreshold$1];
    }
    set touchSpotThreshold(value) {
      super.touchSpotThreshold = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$0];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get getTouchLineStart() {
      return this[getTouchLineStart$];
    }
    set getTouchLineStart(value) {
      super.getTouchLineStart = value;
    }
    get getTouchLineEnd() {
      return this[getTouchLineEnd$];
    }
    set getTouchLineEnd(value) {
      super.getTouchLineEnd = value;
    }
    get touchCallback() {
      return this[touchCallback$6];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let getTouchedSpotIndicator = opts && 'getTouchedSpotIndicator' in opts ? opts.getTouchedSpotIndicator : null;
      let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
      let getTouchLineStart = opts && 'getTouchLineStart' in opts ? opts.getTouchLineStart : null;
      let getTouchLineEnd = opts && 'getTouchLineEnd' in opts ? opts.getTouchLineEnd : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new line_chart_data.LineTouchData.new({enabled: (t23 = enabled, t23 == null ? this.enabled : t23), touchTooltipData: (t23$ = touchTooltipData, t23$ == null ? this.touchTooltipData : t23$), getTouchedSpotIndicator: (t23$0 = getTouchedSpotIndicator, t23$0 == null ? this.getTouchedSpotIndicator : t23$0), touchSpotThreshold: (t23$1 = touchSpotThreshold, t23$1 == null ? this.touchSpotThreshold : t23$1), getTouchLineStart: (t23$2 = getTouchLineStart, t23$2 == null ? this.getTouchLineStart : t23$2), getTouchLineEnd: (t23$3 = getTouchLineEnd, t23$3 == null ? this.getTouchLineEnd : t23$3), handleBuiltInTouches: (t23$4 = handleBuiltInTouches, t23$4 == null ? this.handleBuiltInTouches : t23$4), touchCallback: (t23$5 = touchCallback, t23$5 == null ? this.touchCallback : t23$5)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.touchTooltipData, this.getTouchedSpotIndicator, this.touchSpotThreshold, this.handleBuiltInTouches, this.getTouchLineStart, this.getTouchLineEnd, this.touchCallback, this.enabled]);
    }
  };
  (line_chart_data.LineTouchData.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let getTouchedSpotIndicator = opts && 'getTouchedSpotIndicator' in opts ? opts.getTouchedSpotIndicator : null;
    let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let getTouchLineStart = opts && 'getTouchLineStart' in opts ? opts.getTouchLineStart : null;
    let getTouchLineEnd = opts && 'getTouchLineEnd' in opts ? opts.getTouchLineEnd : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$0] = (t23 = touchTooltipData, t23 == null ? new line_chart_data.LineTouchTooltipData.new() : t23);
    this[getTouchedSpotIndicator$] = (t23$ = getTouchedSpotIndicator, t23$ == null ? C[102] || CT.C102 : t23$);
    this[touchSpotThreshold$1] = (t23$0 = touchSpotThreshold, t23$0 == null ? 10.0 : t23$0);
    this[handleBuiltInTouches$0] = (t23$1 = handleBuiltInTouches, t23$1 == null ? true : t23$1);
    this[getTouchLineStart$] = (t23$2 = getTouchLineStart, t23$2 == null ? C[103] || CT.C103 : t23$2);
    this[getTouchLineEnd$] = (t23$3 = getTouchLineEnd, t23$3 == null ? C[104] || CT.C104 : t23$3);
    this[touchCallback$6] = touchCallback;
    line_chart_data.LineTouchData.__proto__.new.call(this, (t23$4 = enabled, t23$4 == null ? true : t23$4));
    ;
  }).prototype = line_chart_data.LineTouchData.prototype;
  dart.addTypeTests(line_chart_data.LineTouchData);
  dart.addTypeCaches(line_chart_data.LineTouchData);
  dart.setMethodSignature(line_chart_data.LineTouchData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineTouchData.__proto__),
    copyWith: dart.fnType(line_chart_data.LineTouchData, [], {enabled: dart.nullable(core.bool), getTouchLineEnd: dart.nullable(dart.fnType(core.double, [line_chart_data.LineChartBarData, core.int])), getTouchLineStart: dart.nullable(dart.fnType(core.double, [line_chart_data.LineChartBarData, core.int])), getTouchedSpotIndicator: dart.nullable(dart.fnType(core.List$(dart.nullable(line_chart_data.TouchedSpotIndicatorData)), [line_chart_data.LineChartBarData, core.List$(core.int)])), handleBuiltInTouches: dart.nullable(core.bool), touchCallback: dart.nullable(dart.fnType(dart.dynamic, [line_chart_data.LineTouchResponse])), touchSpotThreshold: dart.nullable(core.double), touchTooltipData: dart.nullable(line_chart_data.LineTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(line_chart_data.LineTouchData, I[42]);
  dart.setFieldSignature(line_chart_data.LineTouchData, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(line_chart_data.LineTouchTooltipData),
    getTouchedSpotIndicator: dart.finalFieldType(dart.fnType(core.List$(dart.nullable(line_chart_data.TouchedSpotIndicatorData)), [line_chart_data.LineChartBarData, core.List$(core.int)])),
    touchSpotThreshold: dart.finalFieldType(core.double),
    handleBuiltInTouches: dart.finalFieldType(core.bool),
    getTouchLineStart: dart.finalFieldType(dart.fnType(core.double, [line_chart_data.LineChartBarData, core.int])),
    getTouchLineEnd: dart.finalFieldType(dart.fnType(core.double, [line_chart_data.LineChartBarData, core.int])),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [line_chart_data.LineTouchResponse])))
  }));
  var tooltipBgColor$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipPadding");
  var tooltipMargin$ = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipMargin");
  var maxContentWidth$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.maxContentWidth");
  var getTooltipItems$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.getTooltipItems");
  var fitInsideHorizontally$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.fitInsideVertically");
  var showOnTopOfTheChartBoxArea$ = dart.privateName(line_chart_data, "LineTouchTooltipData.showOnTopOfTheChartBoxArea");
  const Object_EquatableMixin$36$20 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$20.new = function() {
  }).prototype = Object_EquatableMixin$36$20.prototype;
  dart.applyMixin(Object_EquatableMixin$36$20, equatable_mixin.EquatableMixin);
  line_chart_data.LineTouchTooltipData = class LineTouchTooltipData extends Object_EquatableMixin$36$20 {
    get tooltipBgColor() {
      return this[tooltipBgColor$0];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$0];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$0];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get tooltipMargin() {
      return this[tooltipMargin$];
    }
    set tooltipMargin(value) {
      super.tooltipMargin = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$0];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItems() {
      return this[getTooltipItems$0];
    }
    set getTooltipItems(value) {
      super.getTooltipItems = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$0];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$0];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get showOnTopOfTheChartBoxArea() {
      return this[showOnTopOfTheChartBoxArea$];
    }
    set showOnTopOfTheChartBoxArea(value) {
      super.showOnTopOfTheChartBoxArea = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.tooltipMargin, this.maxContentWidth, this.getTooltipItems, this.fitInsideHorizontally, this.fitInsideVertically, this.showOnTopOfTheChartBoxArea]);
    }
  };
  (line_chart_data.LineTouchTooltipData.new = function(opts) {
    let t23, t23$, t23$0, t23$1, t23$2, t23$3, t23$4, t23$5, t23$6;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let tooltipMargin = opts && 'tooltipMargin' in opts ? opts.tooltipMargin : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItems = opts && 'getTooltipItems' in opts ? opts.getTooltipItems : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    let showOnTopOfTheChartBoxArea = opts && 'showOnTopOfTheChartBoxArea' in opts ? opts.showOnTopOfTheChartBoxArea : null;
    this[tooltipBgColor$0] = (t23 = tooltipBgColor, t23 == null ? colors$.Colors.white : t23);
    this[tooltipRoundedRadius$0] = (t23$ = tooltipRoundedRadius, t23$ == null ? 4.0 : t23$);
    this[tooltipPadding$0] = (t23$0 = tooltipPadding, t23$0 == null ? C[37] || CT.C37 : t23$0);
    this[tooltipMargin$] = (t23$1 = tooltipMargin, t23$1 == null ? 16.0 : t23$1);
    this[maxContentWidth$0] = (t23$2 = maxContentWidth, t23$2 == null ? 120.0 : t23$2);
    this[getTooltipItems$0] = (t23$3 = getTooltipItems, t23$3 == null ? C[105] || CT.C105 : t23$3);
    this[fitInsideHorizontally$0] = (t23$4 = fitInsideHorizontally, t23$4 == null ? false : t23$4);
    this[fitInsideVertically$0] = (t23$5 = fitInsideVertically, t23$5 == null ? false : t23$5);
    this[showOnTopOfTheChartBoxArea$] = (t23$6 = showOnTopOfTheChartBoxArea, t23$6 == null ? false : t23$6);
    ;
  }).prototype = line_chart_data.LineTouchTooltipData.prototype;
  dart.addTypeTests(line_chart_data.LineTouchTooltipData);
  dart.addTypeCaches(line_chart_data.LineTouchTooltipData);
  dart.setGetterSignature(line_chart_data.LineTouchTooltipData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineTouchTooltipData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.LineTouchTooltipData, I[42]);
  dart.setFieldSignature(line_chart_data.LineTouchTooltipData, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(ui.Color),
    tooltipRoundedRadius: dart.finalFieldType(core.double),
    tooltipPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    tooltipMargin: dart.finalFieldType(core.double),
    maxContentWidth: dart.finalFieldType(core.double),
    getTooltipItems: dart.finalFieldType(dart.fnType(core.List$(dart.nullable(line_chart_data.LineTooltipItem)), [core.List$(line_chart_data.LineBarSpot)])),
    fitInsideHorizontally: dart.finalFieldType(core.bool),
    fitInsideVertically: dart.finalFieldType(core.bool),
    showOnTopOfTheChartBoxArea: dart.finalFieldType(core.bool)
  }));
  var bar$ = dart.privateName(line_chart_data, "LineBarSpot.bar");
  var barIndex$ = dart.privateName(line_chart_data, "LineBarSpot.barIndex");
  var spotIndex = dart.privateName(line_chart_data, "LineBarSpot.spotIndex");
  const FlSpot_EquatableMixin$36$ = class FlSpot_EquatableMixin extends axis_chart_data.FlSpot {};
  (FlSpot_EquatableMixin$36$.new = function(x, y) {
    FlSpot_EquatableMixin$36$.__proto__.new.call(this, x, y);
  }).prototype = FlSpot_EquatableMixin$36$.prototype;
  dart.applyMixin(FlSpot_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.LineBarSpot = class LineBarSpot extends FlSpot_EquatableMixin$36$ {
    get bar() {
      return this[bar$];
    }
    set bar(value) {
      super.bar = value;
    }
    get barIndex() {
      return this[barIndex$];
    }
    set barIndex(value) {
      super.barIndex = value;
    }
    get spotIndex() {
      return this[spotIndex];
    }
    set spotIndex(value) {
      super.spotIndex = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.bar, this.barIndex, this.spotIndex, this.x, this.y]);
    }
  };
  (line_chart_data.LineBarSpot.new = function(bar, barIndex, spot) {
    if (bar == null) dart.nullFailed(I[41], 1603, 10, "bar");
    if (barIndex == null) dart.nullFailed(I[41], 1604, 10, "barIndex");
    if (spot == null) dart.nullFailed(I[41], 1605, 12, "spot");
    this[bar$] = bar;
    this[barIndex$] = barIndex;
    this[spotIndex] = bar.spots[$indexOf](spot);
    line_chart_data.LineBarSpot.__proto__.new.call(this, spot.x, spot.y);
    ;
  }).prototype = line_chart_data.LineBarSpot.prototype;
  dart.addTypeTests(line_chart_data.LineBarSpot);
  dart.addTypeCaches(line_chart_data.LineBarSpot);
  dart.setLibraryUri(line_chart_data.LineBarSpot, I[42]);
  dart.setFieldSignature(line_chart_data.LineBarSpot, () => ({
    __proto__: dart.getFields(line_chart_data.LineBarSpot.__proto__),
    bar: dart.finalFieldType(line_chart_data.LineChartBarData),
    barIndex: dart.finalFieldType(core.int),
    spotIndex: dart.finalFieldType(core.int)
  }));
  var text$0 = dart.privateName(line_chart_data, "LineTooltipItem.text");
  var textStyle$0 = dart.privateName(line_chart_data, "LineTooltipItem.textStyle");
  var textAlign$0 = dart.privateName(line_chart_data, "LineTooltipItem.textAlign");
  var textDirection$0 = dart.privateName(line_chart_data, "LineTooltipItem.textDirection");
  var children$0 = dart.privateName(line_chart_data, "LineTooltipItem.children");
  var _name$ = dart.privateName(ui, "_name");
  const Object_EquatableMixin$36$21 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$21.new = function() {
  }).prototype = Object_EquatableMixin$36$21.prototype;
  dart.applyMixin(Object_EquatableMixin$36$21, equatable_mixin.EquatableMixin);
  line_chart_data.LineTooltipItem = class LineTooltipItem extends Object_EquatableMixin$36$21 {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textAlign() {
      return this[textAlign$0];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.text, this.textStyle, this.textAlign, this.textDirection, this.children]);
    }
  };
  (line_chart_data.LineTooltipItem.new = function(text, textStyle, opts) {
    if (text == null) dart.nullFailed(I[41], 1640, 10, "text");
    if (textStyle == null) dart.nullFailed(I[41], 1641, 10, "textStyle");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[106] || CT.C106;
    if (textAlign == null) dart.nullFailed(I[41], 1642, 10, "textAlign");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : C[107] || CT.C107;
    if (textDirection == null) dart.nullFailed(I[41], 1643, 10, "textDirection");
    let children = opts && 'children' in opts ? opts.children : null;
    this[text$0] = text;
    this[textStyle$0] = textStyle;
    this[textAlign$0] = textAlign;
    this[textDirection$0] = textDirection;
    this[children$0] = children;
    ;
  }).prototype = line_chart_data.LineTooltipItem.prototype;
  dart.addTypeTests(line_chart_data.LineTooltipItem);
  dart.addTypeCaches(line_chart_data.LineTooltipItem);
  dart.setGetterSignature(line_chart_data.LineTooltipItem, () => ({
    __proto__: dart.getGetters(line_chart_data.LineTooltipItem.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.LineTooltipItem, I[42]);
  dart.setFieldSignature(line_chart_data.LineTooltipItem, () => ({
    __proto__: dart.getFields(line_chart_data.LineTooltipItem.__proto__),
    text: dart.finalFieldType(core.String),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textDirection: dart.finalFieldType(ui.TextDirection),
    children: dart.finalFieldType(dart.nullable(core.List$(text_span.TextSpan)))
  }));
  var indicatorBelowLine$ = dart.privateName(line_chart_data, "TouchedSpotIndicatorData.indicatorBelowLine");
  var touchedSpotDotData$ = dart.privateName(line_chart_data, "TouchedSpotIndicatorData.touchedSpotDotData");
  const Object_EquatableMixin$36$22 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$22.new = function() {
  }).prototype = Object_EquatableMixin$36$22.prototype;
  dart.applyMixin(Object_EquatableMixin$36$22, equatable_mixin.EquatableMixin);
  line_chart_data.TouchedSpotIndicatorData = class TouchedSpotIndicatorData extends Object_EquatableMixin$36$22 {
    get indicatorBelowLine() {
      return this[indicatorBelowLine$];
    }
    set indicatorBelowLine(value) {
      super.indicatorBelowLine = value;
    }
    get touchedSpotDotData() {
      return this[touchedSpotDotData$];
    }
    set touchedSpotDotData(value) {
      super.touchedSpotDotData = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.indicatorBelowLine, this.touchedSpotDotData]);
    }
  };
  (line_chart_data.TouchedSpotIndicatorData.new = function(indicatorBelowLine, touchedSpotDotData) {
    if (indicatorBelowLine == null) dart.nullFailed(I[41], 1673, 33, "indicatorBelowLine");
    if (touchedSpotDotData == null) dart.nullFailed(I[41], 1673, 58, "touchedSpotDotData");
    this[indicatorBelowLine$] = indicatorBelowLine;
    this[touchedSpotDotData$] = touchedSpotDotData;
    ;
  }).prototype = line_chart_data.TouchedSpotIndicatorData.prototype;
  dart.addTypeTests(line_chart_data.TouchedSpotIndicatorData);
  dart.addTypeCaches(line_chart_data.TouchedSpotIndicatorData);
  dart.setGetterSignature(line_chart_data.TouchedSpotIndicatorData, () => ({
    __proto__: dart.getGetters(line_chart_data.TouchedSpotIndicatorData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.TouchedSpotIndicatorData, I[42]);
  dart.setFieldSignature(line_chart_data.TouchedSpotIndicatorData, () => ({
    __proto__: dart.getFields(line_chart_data.TouchedSpotIndicatorData.__proto__),
    indicatorBelowLine: dart.finalFieldType(axis_chart_data.FlLine),
    touchedSpotDotData: dart.finalFieldType(line_chart_data.FlDotData)
  }));
  var showingSpots$ = dart.privateName(line_chart_data, "ShowingTooltipIndicators.showingSpots");
  const Object_EquatableMixin$36$23 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$23.new = function() {
  }).prototype = Object_EquatableMixin$36$23.prototype;
  dart.applyMixin(Object_EquatableMixin$36$23, equatable_mixin.EquatableMixin);
  line_chart_data.ShowingTooltipIndicators = class ShowingTooltipIndicators extends Object_EquatableMixin$36$23 {
    get showingSpots() {
      return this[showingSpots$];
    }
    set showingSpots(value) {
      super.showingSpots = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.showingSpots]);
    }
  };
  (line_chart_data.ShowingTooltipIndicators.new = function(showingSpots) {
    if (showingSpots == null) dart.nullFailed(I[41], 1690, 46, "showingSpots");
    this[showingSpots$] = showingSpots;
    ;
  }).prototype = line_chart_data.ShowingTooltipIndicators.prototype;
  dart.addTypeTests(line_chart_data.ShowingTooltipIndicators);
  dart.addTypeCaches(line_chart_data.ShowingTooltipIndicators);
  dart.setGetterSignature(line_chart_data.ShowingTooltipIndicators, () => ({
    __proto__: dart.getGetters(line_chart_data.ShowingTooltipIndicators.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_data.ShowingTooltipIndicators, I[42]);
  dart.setFieldSignature(line_chart_data.ShowingTooltipIndicators, () => ({
    __proto__: dart.getFields(line_chart_data.ShowingTooltipIndicators.__proto__),
    showingSpots: dart.finalFieldType(core.List$(line_chart_data.LineBarSpot))
  }));
  var lineBarSpots$ = dart.privateName(line_chart_data, "LineTouchResponse.lineBarSpots");
  line_chart_data.LineTouchResponse = class LineTouchResponse extends base_chart_data.BaseTouchResponse {
    get lineBarSpots() {
      return this[lineBarSpots$];
    }
    set lineBarSpots(value) {
      super.lineBarSpots = value;
    }
    copyWith(opts) {
      let t23, t23$, t23$0;
      let lineBarSpots = opts && 'lineBarSpots' in opts ? opts.lineBarSpots : null;
      let touchInput = opts && 'touchInput' in opts ? opts.touchInput : null;
      let clickHappened = opts && 'clickHappened' in opts ? opts.clickHappened : null;
      return new line_chart_data.LineTouchResponse.new((t23 = lineBarSpots, t23 == null ? this.lineBarSpots : t23), (t23$ = touchInput, t23$ == null ? this.touchInput : t23$), (t23$0 = clickHappened, t23$0 == null ? this.clickHappened : t23$0));
    }
  };
  (line_chart_data.LineTouchResponse.new = function(lineBarSpots, touchInput, clickHappened) {
    if (touchInput == null) dart.nullFailed(I[41], 1715, 18, "touchInput");
    if (clickHappened == null) dart.nullFailed(I[41], 1716, 10, "clickHappened");
    this[lineBarSpots$] = lineBarSpots;
    line_chart_data.LineTouchResponse.__proto__.new.call(this, touchInput, clickHappened);
    ;
  }).prototype = line_chart_data.LineTouchResponse.prototype;
  dart.addTypeTests(line_chart_data.LineTouchResponse);
  dart.addTypeCaches(line_chart_data.LineTouchResponse);
  dart.setMethodSignature(line_chart_data.LineTouchResponse, () => ({
    __proto__: dart.getMethods(line_chart_data.LineTouchResponse.__proto__),
    copyWith: dart.fnType(line_chart_data.LineTouchResponse, [], {clickHappened: dart.nullable(core.bool), lineBarSpots: dart.nullable(core.List$(line_chart_data.LineBarSpot)), touchInput: dart.nullable(events.PointerEvent)}, {})
  }));
  dart.setLibraryUri(line_chart_data.LineTouchResponse, I[42]);
  dart.setFieldSignature(line_chart_data.LineTouchResponse, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchResponse.__proto__),
    lineBarSpots: dart.finalFieldType(dart.nullable(core.List$(line_chart_data.LineBarSpot)))
  }));
  line_chart_data.LineChartDataTween = class LineChartDataTween extends tween.Tween$(line_chart_data.LineChartData) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[41], 1741, 29, "t");
      return dart.nullCheck(this.begin).lerp(dart.nullCheck(this.begin), dart.nullCheck(this.end), t);
    }
  };
  (line_chart_data.LineChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    if (begin == null) dart.nullFailed(I[41], 1736, 46, "begin");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[41], 1736, 76, "end");
    line_chart_data.LineChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = line_chart_data.LineChartDataTween.prototype;
  dart.addTypeTests(line_chart_data.LineChartDataTween);
  dart.addTypeCaches(line_chart_data.LineChartDataTween);
  dart.setLibraryUri(line_chart_data.LineChartDataTween, I[42]);
  line_chart_data.showAllSpotsBelowLine = function showAllSpotsBelowLine(spot) {
    if (spot == null) dart.nullFailed(I[41], 685, 35, "spot");
    return true;
  };
  line_chart_data._defaultGetDotColor = function _defaultGetDotColor(_, xPercentage, bar) {
    if (_ == null) dart.nullFailed(I[41], 699, 34, "_");
    if (xPercentage == null) dart.nullFailed(I[41], 699, 44, "xPercentage");
    if (bar == null) dart.nullFailed(I[41], 699, 74, "bar");
    if (dart.test(bar.colors[$isEmpty]) || dart.test(bar.colors[$isEmpty])) {
      return colors$.Colors.green;
    } else if (bar.colors[$length] === 1) {
      return bar.colors[$_get](0);
    } else {
      return utils.lerpGradient(bar.colors, line_chart_helper['LineChartDataExtension|getSafeColorStops'](bar), dart.notNull(xPercentage) / 100);
    }
  };
  line_chart_data._defaultGetDotStrokeColor = function _defaultGetDotStrokeColor(spot, xPercentage, bar) {
    if (spot == null) dart.nullFailed(I[41], 711, 40, "spot");
    if (xPercentage == null) dart.nullFailed(I[41], 711, 53, "xPercentage");
    if (bar == null) dart.nullFailed(I[41], 711, 83, "bar");
    let color = null;
    if (dart.test(bar.colors[$isEmpty]) || dart.test(bar.colors[$isEmpty])) {
      color = colors$.Colors.green;
    } else if (bar.colors[$length] === 1) {
      color = bar.colors[$_get](0);
    } else {
      color = utils.lerpGradient(bar.colors, line_chart_helper['LineChartDataExtension|getSafeColorStops'](bar), dart.notNull(xPercentage) / 100);
    }
    return color_extension['ColorExtension|darken'](color);
  };
  line_chart_data._defaultGetDotPainter = function _defaultGetDotPainter(spot, xPercentage, bar, index, opts) {
    if (spot == null) dart.nullFailed(I[41], 731, 43, "spot");
    if (xPercentage == null) dart.nullFailed(I[41], 731, 56, "xPercentage");
    if (bar == null) dart.nullFailed(I[41], 731, 86, "bar");
    if (index == null) dart.nullFailed(I[41], 731, 95, "index");
    let size = opts && 'size' in opts ? opts.size : null;
    return new line_chart_data.FlDotCirclePainter.new({radius: size, color: line_chart_data._defaultGetDotColor(spot, xPercentage, bar), strokeColor: line_chart_data._defaultGetDotStrokeColor(spot, xPercentage, bar)});
  };
  line_chart_data.showAllDots = function showAllDots(spot, barData) {
    if (spot == null) dart.nullFailed(I[41], 989, 25, "spot");
    if (barData == null) dart.nullFailed(I[41], 989, 48, "barData");
    return true;
  };
  line_chart_data.defaultTouchedIndicators = function defaultTouchedIndicators(barData, indicators) {
    if (barData == null) dart.nullFailed(I[41], 1455, 22, "barData");
    if (indicators == null) dart.nullFailed(I[41], 1455, 41, "indicators");
    return indicators[$map](line_chart_data.TouchedSpotIndicatorData, dart.fn(index => {
      if (index == null) dart.nullFailed(I[41], 1456, 30, "index");
      let lineColor = barData.colors[$_get](0);
      if (dart.test(barData.dotData.show)) {
        lineColor = line_chart_data._defaultGetDotColor(barData.spots[$_get](index), 0.0, barData);
      }
      let flLine = new axis_chart_data.FlLine.new({color: lineColor, strokeWidth: 4});
      let dotSize = 10.0;
      if (dart.test(barData.dotData.show)) {
        dotSize = 4.0 * 1.8;
      }
      let dotData = new line_chart_data.FlDotData.new({getDotPainter: dart.fn((spot, percent, bar, index) => {
          if (spot == null) dart.nullFailed(I[41], 1471, 25, "spot");
          if (percent == null) dart.nullFailed(I[41], 1471, 31, "percent");
          if (bar == null) dart.nullFailed(I[41], 1471, 40, "bar");
          if (index == null) dart.nullFailed(I[41], 1471, 45, "index");
          return line_chart_data._defaultGetDotPainter(spot, percent, bar, index, {size: dotSize});
        }, T.FlSpotAnddoubleAndLineChartBarData__ToFlDotPainter$1())});
      return new line_chart_data.TouchedSpotIndicatorData.new(flLine, dotData);
    }, T.intToTouchedSpotIndicatorData()))[$toList]();
  };
  line_chart_data.defaultGetTouchLineStart = function defaultGetTouchLineStart(barData, spotIndex) {
    if (barData == null) dart.nullFailed(I[41], 1479, 50, "barData");
    if (spotIndex == null) dart.nullFailed(I[41], 1479, 63, "spotIndex");
    return -(1 / 0);
  };
  line_chart_data.defaultGetTouchLineEnd = function defaultGetTouchLineEnd(barData, spotIndex) {
    if (barData == null) dart.nullFailed(I[41], 1484, 48, "barData");
    if (spotIndex == null) dart.nullFailed(I[41], 1484, 61, "spotIndex");
    return barData.spots[$_get](spotIndex).y;
  };
  line_chart_data.defaultLineTooltipItem = function defaultLineTooltipItem(touchedSpots) {
    if (touchedSpots == null) dart.nullFailed(I[41], 1576, 64, "touchedSpots");
    return touchedSpots[$map](line_chart_data.LineTooltipItem, dart.fn(touchedSpot => {
      if (touchedSpot == null) dart.nullFailed(I[41], 1577, 40, "touchedSpot");
      let textStyle = new text_style.TextStyle.new({color: touchedSpot.bar.colors[$_get](0), fontWeight: ui.FontWeight.bold, fontSize: 14.0});
      return new line_chart_data.LineTooltipItem.new(dart.toString(touchedSpot.y), textStyle);
    }, T.LineBarSpotToLineTooltipItem()))[$toList]();
  };
  line_chart_helper.LineChartHelper = class LineChartHelper extends core.Object {
    static calculateMaxAxisValues(lineBarsData) {
      if (lineBarsData == null) dart.nullFailed(I[43], 13, 82, "lineBarsData");
      if (dart.test(lineBarsData[$isEmpty])) {
        return new line_chart_helper.LineChartMinMaxAxisValues.new(0.0, 0.0, 0.0, 0.0);
      }
      let listWrapper = list_wrapper['ListExtension|toWrapperClass'](line_chart_data.LineChartBarData, lineBarsData);
      if (dart.test(line_chart_helper.LineChartHelper._cachedResults[$containsKey](listWrapper))) {
        return dart.nullCheck(line_chart_helper.LineChartHelper._cachedResults[$_get](listWrapper)).copyWith({readFromCache: true});
      }
      for (let i = 0; i < dart.notNull(lineBarsData[$length]); i = i + 1) {
        let lineBarChart = lineBarsData[$_get](i);
        if (dart.test(lineBarChart.spots[$isEmpty])) {
          dart.throw(core.Exception.new("spots could not be null or empty"));
        }
      }
      let minX = lineBarsData[$_get](0).spots[$_get](0).x;
      let maxX = lineBarsData[$_get](0).spots[$_get](0).x;
      let minY = lineBarsData[$_get](0).spots[$_get](0).y;
      let maxY = lineBarsData[$_get](0).spots[$_get](0).y;
      for (let i = 0; i < dart.notNull(lineBarsData[$length]); i = i + 1) {
        let barData = lineBarsData[$_get](i);
        for (let j = 0; j < dart.notNull(barData.spots[$length]); j = j + 1) {
          let spot = barData.spots[$_get](j);
          if (dart.test(spot.isNotNull())) {
            if (dart.notNull(spot.x) > dart.notNull(maxX)) {
              maxX = spot.x;
            }
            if (dart.notNull(spot.x) < dart.notNull(minX)) {
              minX = spot.x;
            }
            if (dart.notNull(spot.y) > dart.notNull(maxY)) {
              maxY = spot.y;
            }
            if (dart.notNull(spot.y) < dart.notNull(minY)) {
              minY = spot.y;
            }
          }
        }
      }
      let result = new line_chart_helper.LineChartMinMaxAxisValues.new(minX, maxX, minY, maxY);
      line_chart_helper.LineChartHelper._cachedResults[$_set](listWrapper, result);
      return result;
    }
  };
  (line_chart_helper.LineChartHelper.new = function() {
    ;
  }).prototype = line_chart_helper.LineChartHelper.prototype;
  dart.addTypeTests(line_chart_helper.LineChartHelper);
  dart.addTypeCaches(line_chart_helper.LineChartHelper);
  dart.setLibraryUri(line_chart_helper.LineChartHelper, I[44]);
  dart.defineLazy(line_chart_helper.LineChartHelper, {
    /*line_chart_helper.LineChartHelper._cachedResults*/get _cachedResults() {
      return new (T.LinkedMapOfListWrapperOfLineChartBarData$LineChartMinMaxAxisValues()).new();
    }
  }, false);
  var minX$1 = dart.privateName(line_chart_helper, "LineChartMinMaxAxisValues.minX");
  var maxX$1 = dart.privateName(line_chart_helper, "LineChartMinMaxAxisValues.maxX");
  var minY$1 = dart.privateName(line_chart_helper, "LineChartMinMaxAxisValues.minY");
  var maxY$1 = dart.privateName(line_chart_helper, "LineChartMinMaxAxisValues.maxY");
  var readFromCache$0 = dart.privateName(line_chart_helper, "LineChartMinMaxAxisValues.readFromCache");
  const Object_EquatableMixin$36$24 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$24.new = function() {
  }).prototype = Object_EquatableMixin$36$24.prototype;
  dart.applyMixin(Object_EquatableMixin$36$24, equatable_mixin.EquatableMixin);
  line_chart_helper.LineChartMinMaxAxisValues = class LineChartMinMaxAxisValues extends Object_EquatableMixin$36$24 {
    get minX() {
      return this[minX$1];
    }
    set minX(value) {
      super.minX = value;
    }
    get maxX() {
      return this[maxX$1];
    }
    set maxX(value) {
      super.maxX = value;
    }
    get minY() {
      return this[minY$1];
    }
    set minY(value) {
      super.minY = value;
    }
    get maxY() {
      return this[maxY$1];
    }
    set maxY(value) {
      super.maxY = value;
    }
    get readFromCache() {
      return this[readFromCache$0];
    }
    set readFromCache(value) {
      super.readFromCache = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.minX, this.maxX, this.minY, this.maxY, this.readFromCache]);
    }
    copyWith(opts) {
      let t23, t23$, t23$0, t23$1, t23$2;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : null;
      return new line_chart_helper.LineChartMinMaxAxisValues.new((t23 = minX, t23 == null ? this.minX : t23), (t23$ = maxX, t23$ == null ? this.maxX : t23$), (t23$0 = minY, t23$0 == null ? this.minY : t23$0), (t23$1 = maxY, t23$1 == null ? this.maxY : t23$1), {readFromCache: (t23$2 = readFromCache, t23$2 == null ? this.readFromCache : t23$2)});
    }
  };
  (line_chart_helper.LineChartMinMaxAxisValues.new = function(minX, maxX, minY, maxY, opts) {
    if (minX == null) dart.nullFailed(I[43], 75, 10, "minX");
    if (maxX == null) dart.nullFailed(I[43], 76, 10, "maxX");
    if (minY == null) dart.nullFailed(I[43], 77, 10, "minY");
    if (maxY == null) dart.nullFailed(I[43], 78, 10, "maxY");
    let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : false;
    if (readFromCache == null) dart.nullFailed(I[43], 79, 10, "readFromCache");
    this[minX$1] = minX;
    this[maxX$1] = maxX;
    this[minY$1] = minY;
    this[maxY$1] = maxY;
    this[readFromCache$0] = readFromCache;
    ;
  }).prototype = line_chart_helper.LineChartMinMaxAxisValues.prototype;
  dart.addTypeTests(line_chart_helper.LineChartMinMaxAxisValues);
  dart.addTypeCaches(line_chart_helper.LineChartMinMaxAxisValues);
  dart.setMethodSignature(line_chart_helper.LineChartMinMaxAxisValues, () => ({
    __proto__: dart.getMethods(line_chart_helper.LineChartMinMaxAxisValues.__proto__),
    copyWith: dart.fnType(line_chart_helper.LineChartMinMaxAxisValues, [], {maxX: dart.nullable(core.double), maxY: dart.nullable(core.double), minX: dart.nullable(core.double), minY: dart.nullable(core.double), readFromCache: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(line_chart_helper.LineChartMinMaxAxisValues, () => ({
    __proto__: dart.getGetters(line_chart_helper.LineChartMinMaxAxisValues.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(line_chart_helper.LineChartMinMaxAxisValues, I[44]);
  dart.setFieldSignature(line_chart_helper.LineChartMinMaxAxisValues, () => ({
    __proto__: dart.getFields(line_chart_helper.LineChartMinMaxAxisValues.__proto__),
    minX: dart.finalFieldType(core.double),
    maxX: dart.finalFieldType(core.double),
    minY: dart.finalFieldType(core.double),
    maxY: dart.finalFieldType(core.double),
    readFromCache: dart.finalFieldType(core.bool)
  }));
  line_chart_helper['LineChartDataExtension|getSafeColorStops'] = function LineChartDataExtension$124getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 103, 16, "#this");
    let stops = T.JSArrayOfdouble().of([]);
    if ($this.colorStops == null || dart.nullCheck($this.colorStops)[$length] != $this.colors[$length]) {
      $this.colors[$asMap]()[$forEach](dart.fn((index, color) => {
        if (index == null) dart.nullFailed(I[43], 107, 31, "index");
        if (color == null) dart.nullFailed(I[43], 107, 38, "color");
        let percent = 1.0 / dart.notNull($this.colors[$length]);
        stops[$add](percent * dart.notNull(index));
      }, T.intAndColorTovoid()));
    } else {
      stops = dart.nullCheck($this.colorStops);
    }
    return stops;
  };
  line_chart_helper['LineChartDataExtension|get#getSafeColorStops'] = function LineChartDataExtension$124get$35getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 103, 16, "#this");
    return dart.fn(() => line_chart_helper['LineChartDataExtension|getSafeColorStops']($this), T.VoidToListOfdouble());
  };
  line_chart_helper['BarAreaDataExtension|getSafeColorStops'] = function BarAreaDataExtension$124getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 124, 16, "#this");
    let stops = T.JSArrayOfdouble().of([]);
    if ($this.gradientColorStops == null || dart.nullCheck($this.gradientColorStops)[$length] != $this.colors[$length]) {
      $this.colors[$asMap]()[$forEach](dart.fn((index, color) => {
        if (index == null) dart.nullFailed(I[43], 128, 31, "index");
        if (color == null) dart.nullFailed(I[43], 128, 38, "color");
        let percent = 1.0 / dart.notNull($this.colors[$length]);
        stops[$add](percent * dart.notNull(index));
      }, T.intAndColorTovoid()));
    } else {
      stops = dart.nullCheck($this.gradientColorStops);
    }
    return stops;
  };
  line_chart_helper['BarAreaDataExtension|get#getSafeColorStops'] = function BarAreaDataExtension$124get$35getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 124, 16, "#this");
    return dart.fn(() => line_chart_helper['BarAreaDataExtension|getSafeColorStops']($this), T.VoidToListOfdouble());
  };
  line_chart_helper['BetweenBarsDataExtension|getSafeColorStops'] = function BetweenBarsDataExtension$124getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 145, 16, "#this");
    let stops = T.JSArrayOfdouble().of([]);
    if ($this.gradientColorStops == null || dart.nullCheck($this.gradientColorStops)[$length] != $this.colors[$length]) {
      $this.colors[$asMap]()[$forEach](dart.fn((index, color) => {
        if (index == null) dart.nullFailed(I[43], 149, 31, "index");
        if (color == null) dart.nullFailed(I[43], 149, 38, "color");
        let percent = 1.0 / dart.notNull($this.colors[$length]);
        stops[$add](percent * dart.notNull(index));
      }, T.intAndColorTovoid()));
    } else {
      stops = dart.nullCheck($this.gradientColorStops);
    }
    return stops;
  };
  line_chart_helper['BetweenBarsDataExtension|get#getSafeColorStops'] = function BetweenBarsDataExtension$124get$35getSafeColorStops($this) {
    if ($this == null) dart.nullFailed(I[43], 145, 16, "#this");
    return dart.fn(() => line_chart_helper['BetweenBarsDataExtension|getSafeColorStops']($this), T.VoidToListOfdouble());
  };
  canvas_extension['DashedLine|drawDashedLine'] = function DashedLine$124drawDashedLine($this, from, to, painter, dashArray) {
    if ($this == null) dart.nullFailed(I[45], 9, 8, "#this");
    if (from == null) dart.nullFailed(I[45], 9, 30, "from");
    if (to == null) dart.nullFailed(I[45], 9, 43, "to");
    if (painter == null) dart.nullFailed(I[45], 9, 53, "painter");
    let path = ui.Path.new();
    path.moveTo(from.dx, from.dy);
    path.lineTo(to.dx, to.dy);
    path = path_extension['DashedPath|toDashedPath'](path, dashArray);
    $this.drawPath(path, painter);
  };
  canvas_extension['DashedLine|get#drawDashedLine'] = function DashedLine$124get$35drawDashedLine($this) {
    if ($this == null) dart.nullFailed(I[45], 9, 8, "#this");
    return dart.fn((from, to, painter, dashArray) => {
      if (from == null) dart.nullFailed(I[45], 9, 30, "from");
      if (to == null) dart.nullFailed(I[45], 9, 43, "to");
      if (painter == null) dart.nullFailed(I[45], 9, 53, "painter");
      return canvas_extension['DashedLine|drawDashedLine']($this, from, to, painter, dashArray);
    }, T.OffsetAndOffsetAndPaint__Tovoid());
  };
  var __LineChartPainter__barPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_barPaint");
  var __LineChartPainter__barAreaPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_barAreaPaint");
  var __LineChartPainter__barAreaLinesPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_barAreaLinesPaint");
  var __LineChartPainter__clearBarAreaPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_clearBarAreaPaint");
  var __LineChartPainter__extraLinesPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_extraLinesPaint");
  var __LineChartPainter__touchLinePaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_touchLinePaint");
  var __LineChartPainter__bgTouchTooltipPaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_bgTouchTooltipPaint");
  var __LineChartPainter__imagePaint = dart.privateName(line_chart_painter, "_#LineChartPainter#_imagePaint");
  var _barPaint = dart.privateName(line_chart_painter, "_barPaint");
  var _barAreaPaint = dart.privateName(line_chart_painter, "_barAreaPaint");
  var _barAreaLinesPaint = dart.privateName(line_chart_painter, "_barAreaLinesPaint");
  var _clearBarAreaPaint = dart.privateName(line_chart_painter, "_clearBarAreaPaint");
  var _extraLinesPaint = dart.privateName(line_chart_painter, "_extraLinesPaint");
  var _touchLinePaint = dart.privateName(line_chart_painter, "_touchLinePaint");
  var _bgTouchTooltipPaint$ = dart.privateName(line_chart_painter, "_bgTouchTooltipPaint");
  var _imagePaint = dart.privateName(line_chart_painter, "_imagePaint");
  var _clipToBorder = dart.privateName(line_chart_painter, "_clipToBorder");
  var _drawBetweenBarsArea = dart.privateName(line_chart_painter, "_drawBetweenBarsArea");
  var _drawExtraLines = dart.privateName(line_chart_painter, "_drawExtraLines");
  var _drawBarLine = dart.privateName(line_chart_painter, "_drawBarLine");
  var _drawDots = dart.privateName(line_chart_painter, "_drawDots");
  var _drawTouchedSpotsIndicator = dart.privateName(line_chart_painter, "_drawTouchedSpotsIndicator");
  var _drawTitles$0 = dart.privateName(line_chart_painter, "_drawTitles");
  var _drawTouchTooltip$ = dart.privateName(line_chart_painter, "_drawTouchTooltip");
  var _generateBarPath = dart.privateName(line_chart_painter, "_generateBarPath");
  var _generateBelowBarPath = dart.privateName(line_chart_painter, "_generateBelowBarPath");
  var _generateAboveBarPath = dart.privateName(line_chart_painter, "_generateAboveBarPath");
  var _drawBelowBar = dart.privateName(line_chart_painter, "_drawBelowBar");
  var _drawAboveBar = dart.privateName(line_chart_painter, "_drawAboveBar");
  var _drawBarShadow = dart.privateName(line_chart_painter, "_drawBarShadow");
  var _drawBar = dart.privateName(line_chart_painter, "_drawBar");
  var _drawBetweenBar = dart.privateName(line_chart_painter, "_drawBetweenBar");
  var _getBarLineXLength = dart.privateName(line_chart_painter, "_getBarLineXLength");
  var _generateStepBarPath = dart.privateName(line_chart_painter, "_generateStepBarPath");
  var _generateNormalBarPath = dart.privateName(line_chart_painter, "_generateNormalBarPath");
  var _getNearestTouchedSpot = dart.privateName(line_chart_painter, "_getNearestTouchedSpot");
  line_chart_painter.LineChartPainter = class LineChartPainter extends axis_chart_painter.AxisChartPainter$(line_chart_data.LineChartData) {
    get [_barPaint]() {
      let t31;
      t31 = this[__LineChartPainter__barPaint];
      return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_barPaint")) : t31;
    }
    set [_barPaint](t31) {
      if (t31 == null) dart.nullFailed(I[46], 23, 14, "null");
      this[__LineChartPainter__barPaint] = t31;
    }
    get [_barAreaPaint]() {
      let t32;
      t32 = this[__LineChartPainter__barAreaPaint];
      return t32 == null ? dart.throw(new _internal.LateError.fieldNI("_barAreaPaint")) : t32;
    }
    set [_barAreaPaint](t32) {
      if (t32 == null) dart.nullFailed(I[46], 24, 7, "null");
      this[__LineChartPainter__barAreaPaint] = t32;
    }
    get [_barAreaLinesPaint]() {
      let t33;
      t33 = this[__LineChartPainter__barAreaLinesPaint];
      return t33 == null ? dart.throw(new _internal.LateError.fieldNI("_barAreaLinesPaint")) : t33;
    }
    set [_barAreaLinesPaint](t33) {
      if (t33 == null) dart.nullFailed(I[46], 25, 7, "null");
      this[__LineChartPainter__barAreaLinesPaint] = t33;
    }
    get [_clearBarAreaPaint]() {
      let t34;
      t34 = this[__LineChartPainter__clearBarAreaPaint];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("_clearBarAreaPaint")) : t34;
    }
    set [_clearBarAreaPaint](t34) {
      if (t34 == null) dart.nullFailed(I[46], 26, 7, "null");
      this[__LineChartPainter__clearBarAreaPaint] = t34;
    }
    get [_extraLinesPaint]() {
      let t35;
      t35 = this[__LineChartPainter__extraLinesPaint];
      return t35 == null ? dart.throw(new _internal.LateError.fieldNI("_extraLinesPaint")) : t35;
    }
    set [_extraLinesPaint](t35) {
      if (t35 == null) dart.nullFailed(I[46], 27, 7, "null");
      this[__LineChartPainter__extraLinesPaint] = t35;
    }
    get [_touchLinePaint]() {
      let t36;
      t36 = this[__LineChartPainter__touchLinePaint];
      return t36 == null ? dart.throw(new _internal.LateError.fieldNI("_touchLinePaint")) : t36;
    }
    set [_touchLinePaint](t36) {
      if (t36 == null) dart.nullFailed(I[46], 28, 7, "null");
      this[__LineChartPainter__touchLinePaint] = t36;
    }
    get [_bgTouchTooltipPaint$]() {
      let t37;
      t37 = this[__LineChartPainter__bgTouchTooltipPaint];
      return t37 == null ? dart.throw(new _internal.LateError.fieldNI("_bgTouchTooltipPaint")) : t37;
    }
    set [_bgTouchTooltipPaint$](t37) {
      if (t37 == null) dart.nullFailed(I[46], 29, 7, "null");
      this[__LineChartPainter__bgTouchTooltipPaint] = t37;
    }
    get [_imagePaint]() {
      let t38;
      t38 = this[__LineChartPainter__imagePaint];
      return t38 == null ? dart.throw(new _internal.LateError.fieldNI("_imagePaint")) : t38;
    }
    set [_imagePaint](t38) {
      if (t38 == null) dart.nullFailed(I[46], 30, 7, "null");
      this[__LineChartPainter__imagePaint] = t38;
    }
    paint(canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 67, 28, "canvasWrapper");
      T.PaintHolderOfLineChartData().as(holder);
      if (holder == null) dart.nullFailed(I[46], 67, 70, "holder");
      let data = holder.data;
      if (dart.test(data.lineBarsData[$isEmpty])) {
        return;
      }
      if (dart.test(data.clipData.any)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, -40.0, dart.notNull(canvasWrapper.size.width) + 40, dart.notNull(canvasWrapper.size.height) + 40), ui.Paint.new());
        this[_clipToBorder](canvasWrapper, holder);
      }
      super.paint(canvasWrapper, holder);
      for (let betweenBarsData of data.betweenBarsData) {
        this[_drawBetweenBarsArea](canvasWrapper, data, betweenBarsData, holder);
      }
      if (!dart.test(data.extraLinesData.extraLinesOnTop)) {
        this[_drawExtraLines](canvasWrapper, holder);
      }
      for (let i = 0; i < dart.notNull(data.lineBarsData[$length]); i = i + 1) {
        let barData = data.lineBarsData[$_get](i);
        if (!dart.test(barData.show)) {
          continue;
        }
        this[_drawBarLine](canvasWrapper, barData, holder);
        this[_drawDots](canvasWrapper, barData, holder);
        if (dart.test(data.extraLinesData.extraLinesOnTop)) {
          this[_drawExtraLines](canvasWrapper, holder);
        }
        this[_drawTouchedSpotsIndicator](canvasWrapper, barData, holder);
      }
      if (dart.test(data.clipData.any)) {
        canvasWrapper.restore();
      }
      this.drawAxisTitles(canvasWrapper, holder);
      this[_drawTitles$0](canvasWrapper, holder);
      for (let i = 0; i < dart.notNull(data.showingTooltipIndicators[$length]); i = i + 1) {
        let tooltipSpots = data.showingTooltipIndicators[$_get](i);
        let showingBarSpots = tooltipSpots.showingSpots;
        if (dart.test(showingBarSpots[$isEmpty])) {
          continue;
        }
        let barSpots = T.ListOfLineBarSpot().of(showingBarSpots);
        let topSpot = barSpots[$_get](0);
        for (let barSpot of barSpots) {
          if (dart.notNull(barSpot.y) > dart.notNull(topSpot.y)) {
            topSpot = barSpot;
          }
        }
        tooltipSpots = new line_chart_data.ShowingTooltipIndicators.new(barSpots);
        this[_drawTouchTooltip$](canvasWrapper, data.lineTouchData.touchTooltipData, topSpot, tooltipSpots, holder);
      }
    }
    [_clipToBorder](canvasWrapper, holder) {
      let t39, t39$, t39$0, t39$1, t39$2, t39$3, t39$4, t39$5;
      if (canvasWrapper == null) dart.nullFailed(I[46], 144, 36, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[46], 144, 78, "holder");
      let data = holder.data;
      let size = canvasWrapper.size;
      let clip = data.clipData;
      let usableSize = this.getChartUsableDrawSize(size, holder);
      let border = dart.test(data.borderData.show) ? data.borderData.border : null;
      let left = 0.0;
      let top = 0.0;
      let right = size.width;
      let bottom = size.height;
      if (dart.test(clip.left)) {
        let borderWidth = (t39$ = (t39 = border, t39 == null ? null : t39.left.width), t39$ == null ? 0.0 : t39$);
        left = dart.notNull(this.getLeftOffsetDrawSize(holder)) - dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.top)) {
        let borderWidth = (t39$1 = (t39$0 = border, t39$0 == null ? null : t39$0.top.width), t39$1 == null ? 0.0 : t39$1);
        top = dart.notNull(this.getTopOffsetDrawSize(holder)) - dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.right)) {
        let borderWidth = (t39$3 = (t39$2 = border, t39$2 == null ? null : t39$2.right.width), t39$3 == null ? 0.0 : t39$3);
        right = dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(usableSize.width) + dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.bottom)) {
        let borderWidth = (t39$5 = (t39$4 = border, t39$4 == null ? null : t39$4.bottom.width), t39$5 == null ? 0.0 : t39$5);
        bottom = dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(usableSize.height) + dart.notNull(borderWidth) / 2;
      }
      canvasWrapper.clipRect(new ui.Rect.fromLTRB(left, top, right, bottom));
    }
    [_drawBarLine](canvasWrapper, barData, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 177, 21, "canvasWrapper");
      if (barData == null) dart.nullFailed(I[46], 177, 53, "barData");
      if (holder == null) dart.nullFailed(I[46], 177, 89, "holder");
      let viewSize = canvasWrapper.size;
      let barList = T.JSArrayOfListOfFlSpot().of([T.JSArrayOfFlSpot().of([])]);
      for (let spot of barData.spots) {
        if (dart.test(spot.isNotNull())) {
          barList[$last][$add](spot);
        } else if (dart.test(barList[$last][$isNotEmpty])) {
          barList[$add](T.JSArrayOfFlSpot().of([]));
        }
      }
      if (dart.test(barList[$last][$isEmpty])) {
        barList[$removeLast]();
      }
      for (let bar of barList) {
        let barPath = this[_generateBarPath](viewSize, barData, bar, holder);
        let belowBarPath = this[_generateBelowBarPath](viewSize, barData, barPath, bar, holder);
        let completelyFillBelowBarPath = this[_generateBelowBarPath](viewSize, barData, barPath, bar, holder, {fillCompletely: true});
        let aboveBarPath = this[_generateAboveBarPath](viewSize, barData, barPath, bar, holder);
        let completelyFillAboveBarPath = this[_generateAboveBarPath](viewSize, barData, barPath, bar, holder, {fillCompletely: true});
        this[_drawBelowBar](canvasWrapper, belowBarPath, completelyFillAboveBarPath, holder, barData);
        this[_drawAboveBar](canvasWrapper, aboveBarPath, completelyFillBelowBarPath, holder, barData);
        this[_drawBarShadow](canvasWrapper, barPath, barData);
        this[_drawBar](canvasWrapper, barPath, barData, holder);
      }
    }
    [_drawBetweenBarsArea](canvasWrapper, data, betweenBarsData, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 216, 43, "canvasWrapper");
      if (data == null) dart.nullFailed(I[46], 216, 72, "data");
      if (betweenBarsData == null) dart.nullFailed(I[46], 217, 23, "betweenBarsData");
      if (holder == null) dart.nullFailed(I[46], 217, 67, "holder");
      let viewSize = canvasWrapper.size;
      let fromBarData = data.lineBarsData[$_get](betweenBarsData.fromIndex);
      let toBarData = data.lineBarsData[$_get](betweenBarsData.toIndex);
      let spots = T.JSArrayOfFlSpot().of([]);
      spots[$addAll](toBarData.spots[$reversed][$toList]());
      let fromBarPath = this[_generateBarPath](viewSize, fromBarData, fromBarData.spots, holder);
      let barPath = this[_generateBarPath](viewSize, toBarData.copyWith({spots: spots}), toBarData.copyWith({spots: spots}).spots, holder, {appendToPath: fromBarPath});
      this[_drawBetweenBar](canvasWrapper, barPath, betweenBarsData, holder);
    }
    [_drawDots](canvasWrapper, barData, holder) {
      let t41, t40, t39, t43, t42, t41$, t40$, t39$;
      if (canvasWrapper == null) dart.nullFailed(I[46], 242, 19, "canvasWrapper");
      if (barData == null) dart.nullFailed(I[46], 243, 22, "barData");
      if (holder == null) dart.nullFailed(I[46], 244, 32, "holder");
      if (!dart.test(barData.dotData.show) || dart.test(barData.spots[$isEmpty])) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size, holder);
      let barXDelta = this[_getBarLineXLength](barData, viewSize, holder);
      for (let i = 0; i < dart.notNull(barData.spots[$length]); i = i + 1) {
        let spot = barData.spots[$_get](i);
        if (dart.test(spot.isNotNull()) && dart.test((t39 = barData.dotData, t40 = spot, t41 = barData, t39.checkToShowDot(t40, t41)))) {
          let x = this.getPixelX(spot.x, viewSize, holder);
          let y = this.getPixelY(spot.y, viewSize, holder);
          let xPercentInLine = (dart.notNull(x) - dart.notNull(this.getLeftOffsetDrawSize(holder))) / dart.notNull(barXDelta) * 100;
          let painter = (t39$ = barData.dotData, t40$ = spot, t41$ = xPercentInLine, t42 = barData, t43 = i, t39$.getDotPainter(t40$, t41$, t42, t43));
          canvasWrapper.drawDot(painter, spot, new ui.Offset.new(x, y));
        }
      }
    }
    [_drawTouchedSpotsIndicator](canvasWrapper, barData, holder) {
      let t41, t40, t39, t47, t46, t45, t44, t43, t45$, t44$, t43$, t45$0, t44$0, t43$0;
      if (canvasWrapper == null) dart.nullFailed(I[46], 269, 19, "canvasWrapper");
      if (barData == null) dart.nullFailed(I[46], 270, 22, "barData");
      if (holder == null) dart.nullFailed(I[46], 271, 32, "holder");
      if (dart.test(barData.showingIndicators[$isEmpty])) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      let barXDelta = this[_getBarLineXLength](barData, viewSize, holder);
      let data = holder.data;
      let indicatorsData = (t39 = data.lineTouchData, t40 = barData, t41 = barData.showingIndicators, t39.getTouchedSpotIndicator(t40, t41));
      if (indicatorsData[$length] != barData.showingIndicators[$length]) {
        dart.throw(core.Exception.new("indicatorsData and touchedSpotOffsets size should be same"));
      }
      for (let i = 0; i < dart.notNull(barData.showingIndicators[$length]); i = i + 1) {
        let indicatorData = indicatorsData[$_get](i);
        let index = barData.showingIndicators[$_get](i);
        let spot = barData.spots[$_get](index);
        if (indicatorData == null) {
          continue;
        }
        let touchedSpot = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getPixelY(spot.y, chartViewSize, holder));
        let showingDots = indicatorData.touchedSpotDotData.show;
        let dotHeight = 0.0;
        let dotPainter = null;
        function dotPainter$35get() {
          let t40;
          t40 = dotPainter;
          return t40 == null ? dart.throw(new _internal.LateError.localNI("dotPainter")) : t40;
        }
        dart.fn(dotPainter$35get, T.VoidToFlDotPainter());
        function dotPainter$35set(t41) {
          if (t41 == null) dart.nullFailed(I[46], 307, 25, "null");
          return dotPainter = t41;
        }
        dart.fn(dotPainter$35set, T.FlDotPainterTodynamic());
        if (dart.test(showingDots)) {
          let xPercentInLine = (dart.notNull(touchedSpot.dx) - dart.notNull(this.getLeftOffsetDrawSize(holder))) / dart.notNull(barXDelta) * 100;
          dotPainter$35set((t43 = indicatorData.touchedSpotDotData, t44 = spot, t45 = xPercentInLine, t46 = barData, t47 = index, t43.getDotPainter(t44, t45, t46, t47)));
          dotHeight = dotPainter$35get().getSize(spot).height;
        }
        let lineStartY = math.min(core.double, data.maxY, math.max(core.double, data.minY, (t43$ = data.lineTouchData, t44$ = barData, t45$ = index, t43$.getTouchLineStart(t44$, t45$))));
        let lineEndY = math.min(core.double, data.maxY, math.max(core.double, data.minY, (t43$0 = data.lineTouchData, t44$0 = barData, t45$0 = index, t43$0.getTouchLineEnd(t44$0, t45$0))));
        let lineStart = new ui.Offset.new(touchedSpot.dx, this.getPixelY(lineStartY, chartViewSize, holder));
        let lineEnd = new ui.Offset.new(touchedSpot.dx, this.getPixelY(lineEndY, chartViewSize, holder));
        let dotMinY = dart.notNull(touchedSpot.dy) - dart.notNull(dotHeight) / 2;
        let dotMaxY = dart.notNull(touchedSpot.dy) + dart.notNull(dotHeight) / 2;
        if (dart.notNull(lineEnd.dy) > dotMinY && dart.notNull(lineEnd.dy) < dotMaxY) {
          if (dart.notNull(lineStart.dy) < dart.notNull(lineEnd.dy)) {
            lineEnd = lineEnd['-'](new ui.Offset.new(0.0, dart.notNull(lineEnd.dy) - dotMinY));
          } else {
            lineEnd = lineEnd['+'](new ui.Offset.new(0.0, dotMaxY - dart.notNull(lineEnd.dy)));
          }
        }
        this[_touchLinePaint].color = indicatorData.indicatorBelowLine.color;
        this[_touchLinePaint].strokeWidth = indicatorData.indicatorBelowLine.strokeWidth;
        paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_touchLinePaint]);
        canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, lineStart, lineEnd, this[_touchLinePaint], indicatorData.indicatorBelowLine.dashArray);
        if (dart.test(showingDots)) {
          canvasWrapper.drawDot(dotPainter$35get(), spot, touchedSpot);
        }
      }
    }
    [_generateBarPath](viewSize, barData, barSpots, holder, opts) {
      if (viewSize == null) dart.nullFailed(I[46], 350, 30, "viewSize");
      if (barData == null) dart.nullFailed(I[46], 350, 57, "barData");
      if (barSpots == null) dart.nullFailed(I[46], 350, 79, "barSpots");
      if (holder == null) dart.nullFailed(I[46], 351, 34, "holder");
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      if (dart.test(barData.isStepLineChart)) {
        return this[_generateStepBarPath](viewSize, barData, barSpots, holder, {appendToPath: appendToPath});
      } else {
        return this[_generateNormalBarPath](viewSize, barData, barSpots, holder, {appendToPath: appendToPath});
      }
    }
    [_generateNormalBarPath](viewSize, barData, barSpots, holder, opts) {
      let t43;
      if (viewSize == null) dart.nullFailed(I[46], 369, 36, "viewSize");
      if (barData == null) dart.nullFailed(I[46], 369, 63, "barData");
      if (barSpots == null) dart.nullFailed(I[46], 369, 85, "barSpots");
      if (holder == null) dart.nullFailed(I[46], 370, 34, "holder");
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      viewSize = this.getChartUsableDrawSize(viewSize, holder);
      let path = (t43 = appendToPath, t43 == null ? ui.Path.new() : t43);
      let size = barSpots[$length];
      let temp = C[77] || CT.C77;
      let x = this.getPixelX(barSpots[$_get](0).x, viewSize, holder);
      let y = this.getPixelY(barSpots[$_get](0).y, viewSize, holder);
      if (appendToPath == null) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
      for (let i = 1; i < dart.notNull(size); i = i + 1) {
        let current = new ui.Offset.new(this.getPixelX(barSpots[$_get](i).x, viewSize, holder), this.getPixelY(barSpots[$_get](i).y, viewSize, holder));
        let previous = new ui.Offset.new(this.getPixelX(barSpots[$_get](i - 1).x, viewSize, holder), this.getPixelY(barSpots[$_get](i - 1).y, viewSize, holder));
        let next = new ui.Offset.new(this.getPixelX(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).x, viewSize, holder), this.getPixelY(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).y, viewSize, holder));
        let controlPoint1 = previous['+'](temp);
        let smoothness = dart.test(barData.isCurved) ? barData.curveSmoothness : 0.0;
        temp = next['-'](previous)['/'](2.0)['*'](smoothness);
        if (dart.test(barData.preventCurveOverShooting)) {
          if (dart.notNull(next['-'](current).dy) <= dart.notNull(barData.preventCurveOvershootingThreshold) || dart.notNull(current['-'](previous).dy) <= dart.notNull(barData.preventCurveOvershootingThreshold)) {
            temp = new ui.Offset.new(temp.dx, 0.0);
          }
          if (dart.notNull(next['-'](current).dx) <= dart.notNull(barData.preventCurveOvershootingThreshold) || dart.notNull(current['-'](previous).dx) <= dart.notNull(barData.preventCurveOvershootingThreshold)) {
            temp = new ui.Offset.new(0.0, temp.dy);
          }
        }
        let controlPoint2 = current['-'](temp);
        path.cubicTo(controlPoint1.dx, controlPoint1.dy, controlPoint2.dx, controlPoint2.dy, current.dx, current.dy);
      }
      return path;
    }
    [_generateStepBarPath](viewSize, barData, barSpots, holder, opts) {
      let t43;
      if (viewSize == null) dart.nullFailed(I[46], 440, 34, "viewSize");
      if (barData == null) dart.nullFailed(I[46], 440, 61, "barData");
      if (barSpots == null) dart.nullFailed(I[46], 440, 83, "barSpots");
      if (holder == null) dart.nullFailed(I[46], 441, 34, "holder");
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      viewSize = this.getChartUsableDrawSize(viewSize, holder);
      let path = (t43 = appendToPath, t43 == null ? ui.Path.new() : t43);
      let size = barSpots[$length];
      let x = this.getPixelX(barSpots[$_get](0).x, viewSize, holder);
      let y = this.getPixelY(barSpots[$_get](0).y, viewSize, holder);
      if (appendToPath == null) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
      for (let i = 0; i < dart.notNull(size); i = i + 1) {
        let current = new ui.Offset.new(this.getPixelX(barSpots[$_get](i).x, viewSize, holder), this.getPixelY(barSpots[$_get](i).y, viewSize, holder));
        let next = new ui.Offset.new(this.getPixelX(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).x, viewSize, holder), this.getPixelY(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).y, viewSize, holder));
        let stepDirection = barData.lineChartStepData.stepDirection;
        if (current.dy == next.dy) {
          path.lineTo(next.dx, next.dy);
        } else {
          let deltaX = dart.notNull(next.dx) - dart.notNull(current.dx);
          path.lineTo(dart.notNull(current.dx) + deltaX - deltaX * dart.notNull(stepDirection), current.dy);
          path.lineTo(dart.notNull(current.dx) + deltaX - deltaX * dart.notNull(stepDirection), next.dy);
          path.lineTo(next.dx, next.dy);
        }
      }
      return path;
    }
    [_generateBelowBarPath](viewSize, barData, barPath, barSpots, holder, opts) {
      if (viewSize == null) dart.nullFailed(I[46], 488, 35, "viewSize");
      if (barData == null) dart.nullFailed(I[46], 488, 62, "barData");
      if (barPath == null) dart.nullFailed(I[46], 488, 76, "barPath");
      if (barSpots == null) dart.nullFailed(I[46], 489, 20, "barSpots");
      if (holder == null) dart.nullFailed(I[46], 489, 57, "holder");
      let fillCompletely = opts && 'fillCompletely' in opts ? opts.fillCompletely : false;
      if (fillCompletely == null) dart.nullFailed(I[46], 490, 13, "fillCompletely");
      let belowBarPath = ui.Path.from(barPath);
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      let x = this.getPixelX(barSpots[$_get](dart.notNull(barSpots[$length]) - 1).x, chartViewSize, holder);
      let y = null;
      if (!dart.test(fillCompletely) && dart.test(barData.belowBarData.applyCutOffY)) {
        y = this.getPixelY(barData.belowBarData.cutOffY, chartViewSize, holder);
      } else {
        y = dart.notNull(chartViewSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
      }
      belowBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize, holder);
      if (!dart.test(fillCompletely) && dart.test(barData.belowBarData.applyCutOffY)) {
        y = this.getPixelY(barData.belowBarData.cutOffY, chartViewSize, holder);
      } else {
        y = dart.notNull(chartViewSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
      }
      belowBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize, holder);
      y = this.getPixelY(barSpots[$_get](0).y, chartViewSize, holder);
      belowBarPath.lineTo(x, y);
      belowBarPath.close();
      return belowBarPath;
    }
    [_generateAboveBarPath](viewSize, barData, barPath, barSpots, holder, opts) {
      if (viewSize == null) dart.nullFailed(I[46], 527, 35, "viewSize");
      if (barData == null) dart.nullFailed(I[46], 527, 62, "barData");
      if (barPath == null) dart.nullFailed(I[46], 527, 76, "barPath");
      if (barSpots == null) dart.nullFailed(I[46], 528, 20, "barSpots");
      if (holder == null) dart.nullFailed(I[46], 528, 57, "holder");
      let fillCompletely = opts && 'fillCompletely' in opts ? opts.fillCompletely : false;
      if (fillCompletely == null) dart.nullFailed(I[46], 529, 13, "fillCompletely");
      let aboveBarPath = ui.Path.from(barPath);
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      let x = this.getPixelX(barSpots[$_get](dart.notNull(barSpots[$length]) - 1).x, chartViewSize, holder);
      let y = null;
      if (!dart.test(fillCompletely) && dart.test(barData.aboveBarData.applyCutOffY)) {
        y = this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize, holder);
      } else {
        y = this.getTopOffsetDrawSize(holder);
      }
      aboveBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize, holder);
      if (!dart.test(fillCompletely) && dart.test(barData.aboveBarData.applyCutOffY)) {
        y = this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize, holder);
      } else {
        y = this.getTopOffsetDrawSize(holder);
      }
      aboveBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize, holder);
      y = this.getPixelY(barSpots[$_get](0).y, chartViewSize, holder);
      aboveBarPath.lineTo(x, y);
      aboveBarPath.close();
      return aboveBarPath;
    }
    [_drawBelowBar](canvasWrapper, belowBarPath, filledAboveBarPath, holder, barData) {
      let t44, t43;
      if (canvasWrapper == null) dart.nullFailed(I[46], 565, 36, "canvasWrapper");
      if (belowBarPath == null) dart.nullFailed(I[46], 565, 56, "belowBarPath");
      if (filledAboveBarPath == null) dart.nullFailed(I[46], 565, 75, "filledAboveBarPath");
      if (holder == null) dart.nullFailed(I[46], 566, 34, "holder");
      if (barData == null) dart.nullFailed(I[46], 566, 59, "barData");
      if (!dart.test(barData.belowBarData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      if (barData.belowBarData.colors[$length] === 1) {
        this[_barAreaPaint].color = barData.belowBarData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let from = barData.belowBarData.gradientFrom;
        let to = barData.belowBarData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.belowBarData.colors, line_chart_helper['BarAreaDataExtension|getSafeColorStops'](barData.belowBarData));
      }
      if (dart.test(barData.belowBarData.applyCutOffY)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      canvasWrapper.drawPath(belowBarPath, this[_barAreaPaint]);
      if (dart.test(barData.belowBarData.applyCutOffY)) {
        canvasWrapper.drawPath(filledAboveBarPath, this[_clearBarAreaPaint]);
        canvasWrapper.restore();
      }
      if (dart.test(barData.belowBarData.spotsLine.show)) {
        for (let spot of barData.spots) {
          if (dart.test((t43 = barData.belowBarData.spotsLine, t44 = spot, t43.checkToShowSpotLine(t44)))) {
            let from = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getPixelY(spot.y, chartViewSize, holder));
            let bottomPadding = dart.notNull(this.getExtraNeededVerticalSpace(holder)) - dart.notNull(this.getTopOffsetDrawSize(holder));
            let to = null;
            if (dart.test(barData.belowBarData.spotsLine.applyCutOffY) && dart.test(barData.belowBarData.applyCutOffY)) {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getPixelY(barData.belowBarData.cutOffY, chartViewSize, holder));
            } else {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), dart.notNull(viewSize.height) - bottomPadding);
            }
            this[_barAreaLinesPaint].color = barData.belowBarData.spotsLine.flLineStyle.color;
            this[_barAreaLinesPaint].strokeWidth = barData.belowBarData.spotsLine.flLineStyle.strokeWidth;
            paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_barAreaLinesPaint]);
            canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_barAreaLinesPaint], barData.belowBarData.spotsLine.flLineStyle.dashArray);
          }
        }
      }
    }
    [_drawAboveBar](canvasWrapper, aboveBarPath, filledBelowBarPath, holder, barData) {
      let t44, t43;
      if (canvasWrapper == null) dart.nullFailed(I[46], 647, 36, "canvasWrapper");
      if (aboveBarPath == null) dart.nullFailed(I[46], 647, 56, "aboveBarPath");
      if (filledBelowBarPath == null) dart.nullFailed(I[46], 647, 75, "filledBelowBarPath");
      if (holder == null) dart.nullFailed(I[46], 648, 34, "holder");
      if (barData == null) dart.nullFailed(I[46], 648, 59, "barData");
      if (!dart.test(barData.aboveBarData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      if (barData.aboveBarData.colors[$length] === 1) {
        this[_barAreaPaint].color = barData.aboveBarData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let from = barData.aboveBarData.gradientFrom;
        let to = barData.aboveBarData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.aboveBarData.colors, line_chart_helper['BarAreaDataExtension|getSafeColorStops'](barData.aboveBarData));
      }
      if (dart.test(barData.aboveBarData.applyCutOffY)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      canvasWrapper.drawPath(aboveBarPath, this[_barAreaPaint]);
      if (dart.test(barData.aboveBarData.applyCutOffY)) {
        canvasWrapper.drawPath(filledBelowBarPath, this[_clearBarAreaPaint]);
        canvasWrapper.restore();
      }
      if (dart.test(barData.aboveBarData.spotsLine.show)) {
        for (let spot of barData.spots) {
          if (dart.test((t43 = barData.aboveBarData.spotsLine, t44 = spot, t43.checkToShowSpotLine(t44)))) {
            let from = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getPixelY(spot.y, chartViewSize, holder));
            let to = null;
            if (dart.test(barData.aboveBarData.spotsLine.applyCutOffY) && dart.test(barData.aboveBarData.applyCutOffY)) {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize, holder));
            } else {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize, holder), this.getTopOffsetDrawSize(holder));
            }
            this[_barAreaLinesPaint].color = barData.aboveBarData.spotsLine.flLineStyle.color;
            this[_barAreaLinesPaint].strokeWidth = barData.aboveBarData.spotsLine.flLineStyle.strokeWidth;
            paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_barAreaLinesPaint]);
            canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_barAreaLinesPaint], barData.aboveBarData.spotsLine.flLineStyle.dashArray);
          }
        }
      }
    }
    [_drawBetweenBar](canvasWrapper, aboveBarPath, betweenBarsData, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 725, 38, "canvasWrapper");
      if (aboveBarPath == null) dart.nullFailed(I[46], 725, 58, "aboveBarPath");
      if (betweenBarsData == null) dart.nullFailed(I[46], 726, 23, "betweenBarsData");
      if (holder == null) dart.nullFailed(I[46], 726, 67, "holder");
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      if (betweenBarsData.colors[$length] === 1) {
        this[_barAreaPaint].color = betweenBarsData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let from = betweenBarsData.gradientFrom;
        let to = betweenBarsData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), betweenBarsData.colors, line_chart_helper['BetweenBarsDataExtension|getSafeColorStops'](betweenBarsData));
      }
      canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      canvasWrapper.drawPath(aboveBarPath, this[_barAreaPaint]);
      canvasWrapper.restore();
    }
    [_drawBarShadow](canvasWrapper, barPath, barData) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 760, 37, "canvasWrapper");
      if (barPath == null) dart.nullFailed(I[46], 760, 57, "barPath");
      if (barData == null) dart.nullFailed(I[46], 760, 83, "barData");
      if (!dart.test(barData.show) || barData.shadow.color.opacity === 0.0) {
        return;
      }
      this[_barPaint].strokeCap = dart.test(barData.isStrokeCapRound) ? ui.StrokeCap.round : ui.StrokeCap.butt;
      this[_barPaint].color = barData.shadow.color;
      this[_barPaint].shader = null;
      this[_barPaint].strokeWidth = barData.barWidth;
      this[_barPaint].color = barData.shadow.color;
      this[_barPaint].maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, line_chart_painter.LineChartPainter.convertRadiusToSigma(barData.shadow.blurRadius));
      barPath = path_extension['DashedPath|toDashedPath'](barPath, barData.dashArray);
      barPath = barPath.shift(barData.shadow.offset);
      canvasWrapper.drawPath(barPath, this[_barPaint]);
    }
    static convertRadiusToSigma(radius) {
      if (radius == null) dart.nullFailed(I[46], 783, 45, "radius");
      return dart.notNull(radius) * 0.57735 + 0.5;
    }
    [_drawBar](canvasWrapper, barPath, barData, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[46], 789, 19, "canvasWrapper");
      if (barPath == null) dart.nullFailed(I[46], 790, 10, "barPath");
      if (barData == null) dart.nullFailed(I[46], 791, 22, "barData");
      if (holder == null) dart.nullFailed(I[46], 792, 32, "holder");
      if (!dart.test(barData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      this[_barPaint].strokeCap = dart.test(barData.isStrokeCapRound) ? ui.StrokeCap.round : ui.StrokeCap.butt;
      if (barData.colors[$length] === 1) {
        this[_barPaint].color = barData.colors[$_get](0);
        this[_barPaint].shader = null;
      } else {
        let from = barData.gradientFrom;
        let to = barData.gradientTo;
        this[_barPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.colors, line_chart_helper['LineChartDataExtension|getSafeColorStops'](barData));
      }
      this[_barPaint].maskFilter = null;
      this[_barPaint].strokeWidth = barData.barWidth;
      paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_barPaint]);
      barPath = path_extension['DashedPath|toDashedPath'](barPath, barData.dashArray);
      canvasWrapper.drawPath(barPath, this[_barPaint]);
    }
    [_drawTitles$0](canvasWrapper, holder) {
      let t43, t48, t47, t46, t45, t44, t43$, t44$, t43$0, t44$0, t43$1, t43$2, t48$, t47$, t46$, t45$, t44$1, t43$3, t44$2, t43$4, t44$3, t43$5, t43$6, t48$0, t47$0, t46$0, t45$0, t44$4, t43$7, t44$5, t43$8, t44$6, t43$9, t43$10, t48$1, t47$1, t46$1, t45$1, t44$7, t43$11, t44$8, t43$12, t44$9, t43$13;
      if (canvasWrapper == null) dart.nullFailed(I[46], 835, 34, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[46], 835, 76, "holder");
      let targetData = holder.targetData;
      let data = holder.data;
      if (!dart.test(targetData.titlesData.show)) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size, holder);
      let leftTitles = targetData.titlesData.leftTitles;
      let leftInterval = (t43 = leftTitles.interval, t43 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t43);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t43$ = leftTitles, t44 = data.minY, t45 = data.maxY, t46 = leftTitles, t47 = leftInterval, t48 = verticalSeek, t43$.checkToShowTitle(t44, t45, t46, t47, t48)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, viewSize, holder);
            let text = (t43$0 = leftTitles, t44$ = verticalSeek, t43$0.getTitles(t44$));
            let span = new text_span.TextSpan.new({style: (t43$1 = leftTitles, t44$0 = verticalSeek, t43$1.getTextStyles(t44$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: leftTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = targetData.titlesData.topTitles;
      let topInterval = (t43$2 = topTitles.interval, t43$2 == null ? utils.getEfficientInterval(viewSize.width, data.horizontalDiff) : t43$2);
      if (dart.test(topTitles.showTitles)) {
        let horizontalSeek = data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(data.maxX)) {
          if (dart.test((t43$3 = topTitles, t44$1 = data.minX, t45$ = data.maxX, t46$ = topTitles, t47$ = topInterval, t48$ = horizontalSeek, t43$3.checkToShowTitle(t44$1, t45$, t46$, t47$, t48$)))) {
            let x = this.getPixelX(horizontalSeek, viewSize, holder);
            let y = this.getTopOffsetDrawSize(holder);
            let text = (t43$4 = topTitles, t44$2 = horizontalSeek, t43$4.getTitles(t44$2));
            let span = new text_span.TextSpan.new({style: (t43$5 = topTitles, t44$3 = horizontalSeek, t43$5.getTextStyles(t44$3)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: topTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = dart.notNull(y) - (dart.notNull(topTitles.margin) + dart.notNull(tp.height));
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) - dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(topInterval) && data.maxX != horizontalSeek) {
            horizontalSeek = data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(topInterval);
          }
        }
      }
      let rightTitles = targetData.titlesData.rightTitles;
      let rightInterval = (t43$6 = rightTitles.interval, t43$6 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t43$6);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t43$7 = rightTitles, t44$4 = data.minY, t45$0 = data.maxY, t46$0 = rightTitles, t47$0 = rightInterval, t48$0 = verticalSeek, t43$7.checkToShowTitle(t44$4, t45$0, t46$0, t47$0, t48$0)))) {
            let x = dart.notNull(viewSize.width) + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, viewSize, holder);
            let text = (t43$8 = rightTitles, t44$5 = verticalSeek, t43$8.getTitles(t44$5));
            let span = new text_span.TextSpan.new({style: (t43$9 = rightTitles, t44$6 = verticalSeek, t43$9.getTextStyles(t44$6)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: rightTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = targetData.titlesData.bottomTitles;
      let bottomInterval = (t43$10 = bottomTitles.interval, t43$10 == null ? utils.getEfficientInterval(viewSize.width, data.horizontalDiff) : t43$10);
      if (dart.test(bottomTitles.showTitles)) {
        let horizontalSeek = data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(data.maxX)) {
          if (dart.test((t43$11 = bottomTitles, t44$7 = data.minX, t45$1 = data.maxX, t46$1 = bottomTitles, t47$1 = bottomInterval, t48$1 = horizontalSeek, t43$11.checkToShowTitle(t44$7, t45$1, t46$1, t47$1, t48$1)))) {
            let x = this.getPixelX(horizontalSeek, viewSize, holder);
            let y = dart.notNull(viewSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder));
            let text = (t43$12 = bottomTitles, t44$8 = horizontalSeek, t43$12.getTitles(t44$8));
            let span = new text_span.TextSpan.new({style: (t43$13 = bottomTitles, t44$9 = horizontalSeek, t43$13.getTextStyles(t44$9)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: bottomTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = y + dart.notNull(bottomTitles.margin);
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(bottomInterval) && data.maxX != horizontalSeek) {
            horizontalSeek = data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(bottomInterval);
          }
        }
      }
    }
    [_drawExtraLines](canvasWrapper, holder) {
      let t44, t43, t44$, t43$;
      if (canvasWrapper == null) dart.nullFailed(I[46], 1003, 38, "canvasWrapper");
      if (holder == null) dart.nullFailed(I[46], 1003, 80, "holder");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
      if (dart.test(data.extraLinesData.horizontalLines[$isNotEmpty])) {
        for (let line of data.extraLinesData.horizontalLines) {
          let leftChartPadding = this.getLeftOffsetDrawSize(holder);
          let from = new ui.Offset.new(leftChartPadding, this.getPixelY(line.y, chartUsableSize, holder));
          let rightChartPadding = dart.notNull(this.getExtraNeededHorizontalSpace(holder)) - dart.notNull(this.getLeftOffsetDrawSize(holder));
          let to = new ui.Offset.new(dart.notNull(viewSize.width) - rightChartPadding, this.getPixelY(line.y, chartUsableSize, holder));
          this[_extraLinesPaint].color = line.color;
          this[_extraLinesPaint].strokeWidth = line.strokeWidth;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_extraLinesPaint]);
          canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_extraLinesPaint], line.dashArray);
          if (line.sizedPicture != null) {
            let centerX = dart.notNull(dart.nullCheck(line.sizedPicture).width) / 2;
            let centerY = dart.notNull(dart.nullCheck(line.sizedPicture).height) / 2;
            let xPosition = dart.notNull(leftChartPadding) - centerX;
            let yPosition = dart.notNull(to.dy) - centerY;
            canvasWrapper.save();
            canvasWrapper.translate(xPosition, yPosition);
            canvasWrapper.drawPicture(dart.nullCheck(line.sizedPicture).picture);
            canvasWrapper.restore();
          }
          if (line.image != null) {
            let centerX = dart.notNull(dart.nullCheck(line.image).width) / 2;
            let centerY = dart.notNull(dart.nullCheck(line.image).height) / 2;
            let centeredImageOffset = new ui.Offset.new(dart.notNull(leftChartPadding) - centerX, dart.notNull(to.dy) - centerY);
            canvasWrapper.drawImage(dart.nullCheck(line.image), centeredImageOffset, this[_imagePaint]);
          }
          if (dart.test(line.label.show)) {
            let label = line.label;
            let style = new text_style.TextStyle.new({fontSize: 11.0, color: line.color}).merge(label.style);
            let padding = edge_insets.EdgeInsets.as(label.padding);
            let span = new text_span.TextSpan.new({text: (t43 = label, t44 = line, t43.labelResolver(t44)), style: style});
            let tp = new text_painter.TextPainter.new({text: span, textDirection: ui.TextDirection.ltr});
            tp.layout();
            canvasWrapper.drawText(tp, label.alignment.withinRect(new ui.Rect.fromLTRB(dart.notNull(from.dx) + dart.notNull(padding.left), dart.notNull(from.dy) - dart.notNull(padding.bottom) - dart.notNull(tp.height), dart.notNull(to.dx) - dart.notNull(padding.right) - dart.notNull(tp.width), dart.notNull(to.dy) + dart.notNull(padding.top))));
          }
        }
      }
      if (dart.test(data.extraLinesData.verticalLines[$isNotEmpty])) {
        for (let line of data.extraLinesData.verticalLines) {
          let topChartPadding = this.getTopOffsetDrawSize(holder);
          let from = new ui.Offset.new(this.getPixelX(line.x, chartUsableSize, holder), topChartPadding);
          let bottomChartPadding = dart.notNull(this.getExtraNeededVerticalSpace(holder)) - dart.notNull(this.getTopOffsetDrawSize(holder));
          let to = new ui.Offset.new(this.getPixelX(line.x, chartUsableSize, holder), dart.notNull(viewSize.height) - bottomChartPadding);
          this[_extraLinesPaint].color = line.color;
          this[_extraLinesPaint].strokeWidth = line.strokeWidth;
          paint_extension['ColorExtension|transparentIfWidthIsZero'](this[_extraLinesPaint]);
          canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_extraLinesPaint], line.dashArray);
          if (line.sizedPicture != null) {
            let centerX = dart.notNull(dart.nullCheck(line.sizedPicture).width) / 2;
            let centerY = dart.notNull(dart.nullCheck(line.sizedPicture).height) / 2;
            let xPosition = dart.notNull(to.dx) - centerX;
            let yPosition = dart.notNull(viewSize.height) - bottomChartPadding - centerY;
            canvasWrapper.save();
            canvasWrapper.translate(xPosition, yPosition);
            canvasWrapper.drawPicture(dart.nullCheck(line.sizedPicture).picture);
            canvasWrapper.restore();
          }
          if (line.image != null) {
            let centerX = dart.notNull(dart.nullCheck(line.image).width) / 2;
            let centerY = dart.notNull(dart.nullCheck(line.image).height) / 2;
            let centeredImageOffset = new ui.Offset.new(dart.notNull(to.dx) - centerX, dart.notNull(viewSize.height) - bottomChartPadding - centerY);
            canvasWrapper.drawImage(dart.nullCheck(line.image), centeredImageOffset, this[_imagePaint]);
          }
          if (dart.test(line.label.show)) {
            let label = line.label;
            let style = new text_style.TextStyle.new({fontSize: 11.0, color: line.color}).merge(label.style);
            let padding = edge_insets.EdgeInsets.as(label.padding);
            let span = new text_span.TextSpan.new({text: (t43$ = label, t44$ = line, t43$.labelResolver(t44$)), style: style});
            let tp = new text_painter.TextPainter.new({text: span, textDirection: ui.TextDirection.ltr});
            tp.layout();
            canvasWrapper.drawText(tp, label.alignment.withinRect(new ui.Rect.fromLTRB(dart.notNull(to.dx) - dart.notNull(padding.right) - dart.notNull(tp.width), dart.notNull(from.dy) + dart.notNull(padding.top) - dart.notNull(topChartPadding), dart.notNull(from.dx) + dart.notNull(padding.left), dart.notNull(to.dy) - dart.notNull(padding.bottom) + bottomChartPadding)));
          }
        }
      }
    }
    [_drawTouchTooltip$](canvasWrapper, tooltipData, showOnSpot, showingTooltipSpots, holder) {
      let t44, t43;
      if (canvasWrapper == null) dart.nullFailed(I[46], 1144, 21, "canvasWrapper");
      if (tooltipData == null) dart.nullFailed(I[46], 1145, 28, "tooltipData");
      if (showOnSpot == null) dart.nullFailed(I[46], 1146, 14, "showOnSpot");
      if (showingTooltipSpots == null) dart.nullFailed(I[46], 1147, 32, "showingTooltipSpots");
      if (holder == null) dart.nullFailed(I[46], 1148, 34, "holder");
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
      let drawingTextPainters = T.JSArrayOfTextPainter().of([]);
      let tooltipItems = (t43 = tooltipData, t44 = showingTooltipSpots.showingSpots, t43.getTooltipItems(t44));
      if (tooltipItems[$length] != showingTooltipSpots.showingSpots[$length]) {
        dart.throw(core.Exception.new("tooltipItems and touchedSpots size should be same"));
      }
      for (let i = 0; i < dart.notNull(showingTooltipSpots.showingSpots[$length]); i = i + 1) {
        let tooltipItem = tooltipItems[$_get](i);
        if (tooltipItem == null) {
          continue;
        }
        let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text, children: tooltipItem.children});
        let tp = new text_painter.TextPainter.new({text: span, textAlign: tooltipItem.textAlign, textDirection: tooltipItem.textDirection, textScaleFactor: holder.textScale});
        tp.layout({maxWidth: tooltipData.maxContentWidth});
        drawingTextPainters[$add](tp);
      }
      if (dart.test(drawingTextPainters[$isEmpty])) {
        return;
      }
      let biggerWidth = 0.0;
      let sumTextsHeight = 0.0;
      for (let tp of drawingTextPainters) {
        if (dart.notNull(tp.width) > dart.notNull(biggerWidth)) {
          biggerWidth = tp.width;
        }
        sumTextsHeight = sumTextsHeight + dart.notNull(tp.height);
      }
      sumTextsHeight = sumTextsHeight + (dart.notNull(drawingTextPainters[$length]) - 1) * 4;
      let mostTopOffset = new ui.Offset.new(this.getPixelX(showOnSpot.x, chartUsableSize, holder), this.getPixelY(showOnSpot.y, chartUsableSize, holder));
      let tooltipWidth = dart.notNull(biggerWidth) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = sumTextsHeight + dart.notNull(tooltipData.tooltipPadding.vertical);
      let tooltipTopPosition = null;
      if (dart.test(tooltipData.showOnTopOfTheChartBoxArea)) {
        tooltipTopPosition = 0 - tooltipHeight - dart.notNull(tooltipData.tooltipMargin);
      } else {
        tooltipTopPosition = dart.notNull(mostTopOffset.dy) - tooltipHeight - dart.notNull(tooltipData.tooltipMargin);
      }
      let rect = new ui.Rect.fromLTWH(dart.notNull(mostTopOffset.dx) - tooltipWidth / 2, tooltipTopPosition, tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint$].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint$]);
      let topPosSeek = tooltipData.tooltipPadding.top;
      for (let tp of drawingTextPainters) {
        let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(tp.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(topPosSeek));
        canvasWrapper.drawText(tp, drawOffset);
        topPosSeek = dart.notNull(topPosSeek) + dart.notNull(tp.height);
        topPosSeek = dart.notNull(topPosSeek) + 4;
      }
    }
    [_getBarLineXLength](barData, chartUsableSize, holder) {
      if (barData == null) dart.nullFailed(I[46], 1293, 22, "barData");
      if (chartUsableSize == null) dart.nullFailed(I[46], 1294, 10, "chartUsableSize");
      if (holder == null) dart.nullFailed(I[46], 1295, 32, "holder");
      if (dart.test(barData.spots[$isEmpty])) {
        return 0.0;
      }
      let firstSpot = barData.spots[$_get](0);
      let firstSpotX = this.getPixelX(firstSpot.x, chartUsableSize, holder);
      let lastSpot = barData.spots[$_get](dart.notNull(barData.spots[$length]) - 1);
      let lastSpotX = this.getPixelX(lastSpot.x, chartUsableSize, holder);
      return dart.notNull(lastSpotX) - dart.notNull(firstSpotX);
    }
    getExtraNeededHorizontalSpace(holder) {
      T.PaintHolderOfLineChartData().as(holder);
      if (holder == null) dart.nullFailed(I[46], 1316, 67, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededHorizontalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let leftSide = data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace(holder) {
      T.PaintHolderOfLineChartData().as(holder);
      if (holder == null) dart.nullFailed(I[46], 1339, 65, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededVerticalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let topSide = data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
        let bottomSide = data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize(holder) {
      T.PaintHolderOfLineChartData().as(holder);
      if (holder == null) dart.nullFailed(I[46], 1360, 59, "holder");
      let data = holder.data;
      let sum = super.getLeftOffsetDrawSize(holder);
      let leftTitles = data.titlesData.leftTitles;
      if (dart.test(data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize(holder) {
      T.PaintHolderOfLineChartData().as(holder);
      if (holder == null) dart.nullFailed(I[46], 1375, 58, "holder");
      let data = holder.data;
      let sum = super.getTopOffsetDrawSize(holder);
      let topTitles = data.titlesData.topTitles;
      if (dart.test(data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, size, holder) {
      if (touchInput == null) dart.nullFailed(I[46], 1393, 18, "touchInput");
      if (size == null) dart.nullFailed(I[46], 1394, 10, "size");
      if (holder == null) dart.nullFailed(I[46], 1395, 32, "holder");
      let data = holder.data;
      let touchedSpots = T.JSArrayOfLineBarSpot().of([]);
      for (let i = 0; i < dart.notNull(data.lineBarsData[$length]); i = i + 1) {
        let barData = data.lineBarsData[$_get](i);
        let foundTouchedSpot = this[_getNearestTouchedSpot](size, touchInput.localPosition, barData, i, holder);
        if (foundTouchedSpot != null) {
          touchedSpots[$add](foundTouchedSpot);
        }
      }
      return dart.test(touchedSpots[$isEmpty]) ? null : touchedSpots;
    }
    [_getNearestTouchedSpot](viewSize, touchedPoint, barData, barDataPosition, holder) {
      if (viewSize == null) dart.nullFailed(I[46], 1419, 44, "viewSize");
      if (touchedPoint == null) dart.nullFailed(I[46], 1419, 61, "touchedPoint");
      if (barData == null) dart.nullFailed(I[46], 1419, 92, "barData");
      if (barDataPosition == null) dart.nullFailed(I[46], 1420, 11, "barDataPosition");
      if (holder == null) dart.nullFailed(I[46], 1420, 55, "holder");
      let data = holder.data;
      if (!dart.test(barData.show)) {
        return null;
      }
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      for (let i = 0; i < dart.notNull(barData.spots[$length]); i = i + 1) {
        let spot = barData.spots[$_get](i);
        if (dart.test(spot.isNotNull())) {
          if ((dart.notNull(touchedPoint.dx) - dart.notNull(this.getPixelX(spot.x, chartViewSize, holder)))[$abs]() <= dart.notNull(data.lineTouchData.touchSpotThreshold)) {
            return new line_chart_data.LineBarSpot.new(barData, barDataPosition, spot);
          }
        }
      }
      return null;
    }
  };
  (line_chart_painter.LineChartPainter.new = function() {
    let t31, t31$, t31$0, t31$1, t31$2, t31$3, t31$4;
    this[__LineChartPainter__barPaint] = null;
    this[__LineChartPainter__barAreaPaint] = null;
    this[__LineChartPainter__barAreaLinesPaint] = null;
    this[__LineChartPainter__clearBarAreaPaint] = null;
    this[__LineChartPainter__extraLinesPaint] = null;
    this[__LineChartPainter__touchLinePaint] = null;
    this[__LineChartPainter__bgTouchTooltipPaint] = null;
    this[__LineChartPainter__imagePaint] = null;
    line_chart_painter.LineChartPainter.__proto__.new.call(this);
    this[_barPaint] = (t31 = ui.Paint.new(), (() => {
      t31.style = ui.PaintingStyle.stroke;
      return t31;
    })());
    this[_barAreaPaint] = (t31$ = ui.Paint.new(), (() => {
      t31$.style = ui.PaintingStyle.fill;
      return t31$;
    })());
    this[_barAreaLinesPaint] = (t31$0 = ui.Paint.new(), (() => {
      t31$0.style = ui.PaintingStyle.stroke;
      return t31$0;
    })());
    this[_clearBarAreaPaint] = (t31$1 = ui.Paint.new(), (() => {
      t31$1.style = ui.PaintingStyle.fill;
      t31$1.color = C[27] || CT.C27;
      t31$1.blendMode = ui.BlendMode.dstIn;
      return t31$1;
    })());
    this[_extraLinesPaint] = (t31$2 = ui.Paint.new(), (() => {
      t31$2.style = ui.PaintingStyle.stroke;
      return t31$2;
    })());
    this[_touchLinePaint] = (t31$3 = ui.Paint.new(), (() => {
      t31$3.style = ui.PaintingStyle.stroke;
      t31$3.color = colors$.Colors.black;
      return t31$3;
    })());
    this[_bgTouchTooltipPaint$] = (t31$4 = ui.Paint.new(), (() => {
      t31$4.style = ui.PaintingStyle.fill;
      t31$4.color = colors$.Colors.white;
      return t31$4;
    })());
    this[_imagePaint] = ui.Paint.new();
  }).prototype = line_chart_painter.LineChartPainter.prototype;
  dart.addTypeTests(line_chart_painter.LineChartPainter);
  dart.addTypeCaches(line_chart_painter.LineChartPainter);
  dart.setMethodSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getMethods(line_chart_painter.LineChartPainter.__proto__),
    [_clipToBorder]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawBarLine]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, line_chart_data.LineChartBarData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawBetweenBarsArea]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, line_chart_data.LineChartData, line_chart_data.BetweenBarsData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawDots]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, line_chart_data.LineChartBarData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawTouchedSpotsIndicator]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, line_chart_data.LineChartBarData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_generateBarPath]: dart.fnType(ui.Path, [ui.Size, line_chart_data.LineChartBarData, core.List$(axis_chart_data.FlSpot), base_chart_painter.PaintHolder$(line_chart_data.LineChartData)], {appendToPath: dart.nullable(ui.Path)}, {}),
    [_generateNormalBarPath]: dart.fnType(ui.Path, [ui.Size, line_chart_data.LineChartBarData, core.List$(axis_chart_data.FlSpot), base_chart_painter.PaintHolder$(line_chart_data.LineChartData)], {appendToPath: dart.nullable(ui.Path)}, {}),
    [_generateStepBarPath]: dart.fnType(ui.Path, [ui.Size, line_chart_data.LineChartBarData, core.List$(axis_chart_data.FlSpot), base_chart_painter.PaintHolder$(line_chart_data.LineChartData)], {appendToPath: dart.nullable(ui.Path)}, {}),
    [_generateBelowBarPath]: dart.fnType(ui.Path, [ui.Size, line_chart_data.LineChartBarData, ui.Path, core.List$(axis_chart_data.FlSpot), base_chart_painter.PaintHolder$(line_chart_data.LineChartData)], {fillCompletely: core.bool}, {}),
    [_generateAboveBarPath]: dart.fnType(ui.Path, [ui.Size, line_chart_data.LineChartBarData, ui.Path, core.List$(axis_chart_data.FlSpot), base_chart_painter.PaintHolder$(line_chart_data.LineChartData)], {fillCompletely: core.bool}, {}),
    [_drawBelowBar]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, ui.Path, ui.Path, base_chart_painter.PaintHolder$(line_chart_data.LineChartData), line_chart_data.LineChartBarData]),
    [_drawAboveBar]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, ui.Path, ui.Path, base_chart_painter.PaintHolder$(line_chart_data.LineChartData), line_chart_data.LineChartBarData]),
    [_drawBetweenBar]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, ui.Path, line_chart_data.BetweenBarsData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawBarShadow]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, ui.Path, line_chart_data.LineChartBarData]),
    [_drawBar]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, ui.Path, line_chart_data.LineChartBarData, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawTitles$0]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawExtraLines]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_drawTouchTooltip$]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, line_chart_data.LineTouchTooltipData, axis_chart_data.FlSpot, line_chart_data.ShowingTooltipIndicators, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_getBarLineXLength]: dart.fnType(core.double, [line_chart_data.LineChartBarData, ui.Size, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    handleTouch: dart.fnType(dart.nullable(core.List$(line_chart_data.LineBarSpot)), [events.PointerEvent, ui.Size, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)]),
    [_getNearestTouchedSpot]: dart.fnType(dart.nullable(line_chart_data.LineBarSpot), [ui.Size, ui.Offset, line_chart_data.LineChartBarData, core.int, base_chart_painter.PaintHolder$(line_chart_data.LineChartData)])
  }));
  dart.setGetterSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getGetters(line_chart_painter.LineChartPainter.__proto__),
    [_barPaint]: ui.Paint,
    [_barAreaPaint]: ui.Paint,
    [_barAreaLinesPaint]: ui.Paint,
    [_clearBarAreaPaint]: ui.Paint,
    [_extraLinesPaint]: ui.Paint,
    [_touchLinePaint]: ui.Paint,
    [_bgTouchTooltipPaint$]: ui.Paint,
    [_imagePaint]: ui.Paint
  }));
  dart.setSetterSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getSetters(line_chart_painter.LineChartPainter.__proto__),
    [_barPaint]: ui.Paint,
    [_barAreaPaint]: ui.Paint,
    [_barAreaLinesPaint]: ui.Paint,
    [_clearBarAreaPaint]: ui.Paint,
    [_extraLinesPaint]: ui.Paint,
    [_touchLinePaint]: ui.Paint,
    [_bgTouchTooltipPaint$]: ui.Paint,
    [_imagePaint]: ui.Paint
  }));
  dart.setLibraryUri(line_chart_painter.LineChartPainter, I[47]);
  dart.setFieldSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getFields(line_chart_painter.LineChartPainter.__proto__),
    [__LineChartPainter__barPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__barAreaPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__barAreaLinesPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__clearBarAreaPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__extraLinesPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__touchLinePaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__bgTouchTooltipPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__LineChartPainter__imagePaint]: dart.fieldType(dart.nullable(ui.Paint))
  }));
  var show$5 = dart.privateName(axis_chart_data, "FlAxisTitleData.show");
  var leftTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.leftTitle");
  var topTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.topTitle");
  var rightTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.rightTitle");
  var bottomTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.bottomTitle");
  const Object_EquatableMixin$36$25 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$25.new = function() {
  }).prototype = Object_EquatableMixin$36$25.prototype;
  dart.applyMixin(Object_EquatableMixin$36$25, equatable_mixin.EquatableMixin);
  axis_chart_data.FlAxisTitleData = class FlAxisTitleData extends Object_EquatableMixin$36$25 {
    get show() {
      return this[show$5];
    }
    set show(value) {
      super.show = value;
    }
    get leftTitle() {
      return this[leftTitle$];
    }
    set leftTitle(value) {
      super.leftTitle = value;
    }
    get topTitle() {
      return this[topTitle$];
    }
    set topTitle(value) {
      super.topTitle = value;
    }
    get rightTitle() {
      return this[rightTitle$];
    }
    set rightTitle(value) {
      super.rightTitle = value;
    }
    get bottomTitle() {
      return this[bottomTitle$];
    }
    set bottomTitle(value) {
      super.bottomTitle = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 99, 47, "a");
      if (b == null) dart.nullFailed(I[6], 99, 66, "b");
      if (t == null) dart.nullFailed(I[6], 99, 76, "t");
      return new axis_chart_data.FlAxisTitleData.new({show: b.show, leftTitle: axis_chart_data.AxisTitle.lerp(a.leftTitle, b.leftTitle, t), rightTitle: axis_chart_data.AxisTitle.lerp(a.rightTitle, b.rightTitle, t), bottomTitle: axis_chart_data.AxisTitle.lerp(a.bottomTitle, b.bottomTitle, t), topTitle: axis_chart_data.AxisTitle.lerp(a.topTitle, b.topTitle, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.leftTitle, this.topTitle, this.rightTitle, this.bottomTitle]);
    }
  };
  (axis_chart_data.FlAxisTitleData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2;
    let show = opts && 'show' in opts ? opts.show : null;
    let leftTitle = opts && 'leftTitle' in opts ? opts.leftTitle : null;
    let topTitle = opts && 'topTitle' in opts ? opts.topTitle : null;
    let rightTitle = opts && 'rightTitle' in opts ? opts.rightTitle : null;
    let bottomTitle = opts && 'bottomTitle' in opts ? opts.bottomTitle : null;
    this[show$5] = (t43 = show, t43 == null ? true : t43);
    this[leftTitle$] = (t43$ = leftTitle, t43$ == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t43$);
    this[topTitle$] = (t43$0 = topTitle, t43$0 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t43$0);
    this[rightTitle$] = (t43$1 = rightTitle, t43$1 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t43$1);
    this[bottomTitle$] = (t43$2 = bottomTitle, t43$2 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t43$2);
    ;
  }).prototype = axis_chart_data.FlAxisTitleData.prototype;
  dart.addTypeTests(axis_chart_data.FlAxisTitleData);
  dart.addTypeCaches(axis_chart_data.FlAxisTitleData);
  dart.setGetterSignature(axis_chart_data.FlAxisTitleData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlAxisTitleData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.FlAxisTitleData, I[9]);
  dart.setFieldSignature(axis_chart_data.FlAxisTitleData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlAxisTitleData.__proto__),
    show: dart.finalFieldType(core.bool),
    leftTitle: dart.finalFieldType(axis_chart_data.AxisTitle),
    topTitle: dart.finalFieldType(axis_chart_data.AxisTitle),
    rightTitle: dart.finalFieldType(axis_chart_data.AxisTitle),
    bottomTitle: dart.finalFieldType(axis_chart_data.AxisTitle)
  }));
  var showTitle$0 = dart.privateName(axis_chart_data, "AxisTitle.showTitle");
  var titleText$ = dart.privateName(axis_chart_data, "AxisTitle.titleText");
  var reservedSize$ = dart.privateName(axis_chart_data, "AxisTitle.reservedSize");
  var textStyle$1 = dart.privateName(axis_chart_data, "AxisTitle.textStyle");
  var textAlign$1 = dart.privateName(axis_chart_data, "AxisTitle.textAlign");
  var textDirection$1 = dart.privateName(axis_chart_data, "AxisTitle.textDirection");
  var margin$ = dart.privateName(axis_chart_data, "AxisTitle.margin");
  const Object_EquatableMixin$36$26 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$26.new = function() {
  }).prototype = Object_EquatableMixin$36$26.prototype;
  dart.applyMixin(Object_EquatableMixin$36$26, equatable_mixin.EquatableMixin);
  axis_chart_data.AxisTitle = class AxisTitle extends Object_EquatableMixin$36$26 {
    get showTitle() {
      return this[showTitle$0];
    }
    set showTitle(value) {
      super.showTitle = value;
    }
    get titleText() {
      return this[titleText$];
    }
    set titleText(value) {
      super.titleText = value;
    }
    get reservedSize() {
      return this[reservedSize$];
    }
    set reservedSize(value) {
      super.reservedSize = value;
    }
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textAlign() {
      return this[textAlign$1];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 173, 35, "a");
      if (b == null) dart.nullFailed(I[6], 173, 48, "b");
      if (t == null) dart.nullFailed(I[6], 173, 58, "t");
      return new axis_chart_data.AxisTitle.new({showTitle: b.showTitle, titleText: b.titleText, reservedSize: ui.lerpDouble(a.reservedSize, b.reservedSize, t), textStyle: text_style.TextStyle.lerp(a.textStyle.copyWith({fontSize: a.textStyle.fontSize}), b.textStyle.copyWith({fontSize: b.textStyle.fontSize}), t), textDirection: b.textDirection, textAlign: b.textAlign, margin: ui.lerpDouble(a.margin, b.margin, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.showTitle, this.titleText, this.reservedSize, this.textStyle, this.textAlign, this.margin]);
    }
  };
  (axis_chart_data.AxisTitle.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4;
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let reservedSize = opts && 'reservedSize' in opts ? opts.reservedSize : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    this[showTitle$0] = (t43 = showTitle, t43 == null ? false : t43);
    this[titleText$] = (t43$ = titleText, t43$ == null ? "" : t43$);
    this[reservedSize$] = (t43$0 = reservedSize, t43$0 == null ? 14.0 : t43$0);
    this[textStyle$1] = (t43$1 = textStyle, t43$1 == null ? C[108] || CT.C108 : t43$1);
    this[textDirection$1] = (t43$2 = textDirection, t43$2 == null ? ui.TextDirection.ltr : t43$2);
    this[textAlign$1] = (t43$3 = textAlign, t43$3 == null ? ui.TextAlign.center : t43$3);
    this[margin$] = (t43$4 = margin, t43$4 == null ? 4.0 : t43$4);
    ;
  }).prototype = axis_chart_data.AxisTitle.prototype;
  dart.addTypeTests(axis_chart_data.AxisTitle);
  dart.addTypeCaches(axis_chart_data.AxisTitle);
  dart.setGetterSignature(axis_chart_data.AxisTitle, () => ({
    __proto__: dart.getGetters(axis_chart_data.AxisTitle.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.AxisTitle, I[9]);
  dart.setFieldSignature(axis_chart_data.AxisTitle, () => ({
    __proto__: dart.getFields(axis_chart_data.AxisTitle.__proto__),
    showTitle: dart.finalFieldType(core.bool),
    titleText: dart.finalFieldType(core.String),
    reservedSize: dart.finalFieldType(core.double),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textDirection: dart.finalFieldType(ui.TextDirection),
    margin: dart.finalFieldType(core.double)
  }));
  var show$6 = dart.privateName(axis_chart_data, "FlTitlesData.show");
  var leftTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.leftTitles");
  var topTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.topTitles");
  var rightTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.rightTitles");
  var bottomTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.bottomTitles");
  const Object_EquatableMixin$36$27 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$27.new = function() {
  }).prototype = Object_EquatableMixin$36$27.prototype;
  dart.applyMixin(Object_EquatableMixin$36$27, equatable_mixin.EquatableMixin);
  axis_chart_data.FlTitlesData = class FlTitlesData extends Object_EquatableMixin$36$27 {
    get show() {
      return this[show$6];
    }
    set show(value) {
      super.show = value;
    }
    get leftTitles() {
      return this[leftTitles$];
    }
    set leftTitles(value) {
      super.leftTitles = value;
    }
    get topTitles() {
      return this[topTitles$];
    }
    set topTitles(value) {
      super.topTitles = value;
    }
    get rightTitles() {
      return this[rightTitles$];
    }
    set rightTitles(value) {
      super.rightTitles = value;
    }
    get bottomTitles() {
      return this[bottomTitles$];
    }
    set bottomTitles(value) {
      super.bottomTitles = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 220, 41, "a");
      if (b == null) dart.nullFailed(I[6], 220, 57, "b");
      if (t == null) dart.nullFailed(I[6], 220, 67, "t");
      return new axis_chart_data.FlTitlesData.new({show: b.show, leftTitles: axis_chart_data.SideTitles.lerp(a.leftTitles, b.leftTitles, t), rightTitles: axis_chart_data.SideTitles.lerp(a.rightTitles, b.rightTitles, t), bottomTitles: axis_chart_data.SideTitles.lerp(a.bottomTitles, b.bottomTitles, t), topTitles: axis_chart_data.SideTitles.lerp(a.topTitles, b.topTitles, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.leftTitles, this.topTitles, this.rightTitles, this.bottomTitles]);
    }
  };
  (axis_chart_data.FlTitlesData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2;
    let show = opts && 'show' in opts ? opts.show : null;
    let leftTitles = opts && 'leftTitles' in opts ? opts.leftTitles : null;
    let topTitles = opts && 'topTitles' in opts ? opts.topTitles : null;
    let rightTitles = opts && 'rightTitles' in opts ? opts.rightTitles : null;
    let bottomTitles = opts && 'bottomTitles' in opts ? opts.bottomTitles : null;
    this[show$6] = (t43 = show, t43 == null ? true : t43);
    this[leftTitles$] = (t43$ = leftTitles, t43$ == null ? new axis_chart_data.SideTitles.new({reservedSize: 40.0, showTitles: true}) : t43$);
    this[topTitles$] = (t43$0 = topTitles, t43$0 == null ? new axis_chart_data.SideTitles.new({reservedSize: 6.0}) : t43$0);
    this[rightTitles$] = (t43$1 = rightTitles, t43$1 == null ? new axis_chart_data.SideTitles.new({reservedSize: 40.0}) : t43$1);
    this[bottomTitles$] = (t43$2 = bottomTitles, t43$2 == null ? new axis_chart_data.SideTitles.new({reservedSize: 22.0, showTitles: true}) : t43$2);
    ;
  }).prototype = axis_chart_data.FlTitlesData.prototype;
  dart.addTypeTests(axis_chart_data.FlTitlesData);
  dart.addTypeCaches(axis_chart_data.FlTitlesData);
  dart.setGetterSignature(axis_chart_data.FlTitlesData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlTitlesData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.FlTitlesData, I[9]);
  dart.setFieldSignature(axis_chart_data.FlTitlesData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlTitlesData.__proto__),
    show: dart.finalFieldType(core.bool),
    leftTitles: dart.finalFieldType(axis_chart_data.SideTitles),
    topTitles: dart.finalFieldType(axis_chart_data.SideTitles),
    rightTitles: dart.finalFieldType(axis_chart_data.SideTitles),
    bottomTitles: dart.finalFieldType(axis_chart_data.SideTitles)
  }));
  var showTitles$ = dart.privateName(axis_chart_data, "SideTitles.showTitles");
  var getTitles$ = dart.privateName(axis_chart_data, "SideTitles.getTitles");
  var reservedSize$0 = dart.privateName(axis_chart_data, "SideTitles.reservedSize");
  var getTextStyles$ = dart.privateName(axis_chart_data, "SideTitles.getTextStyles");
  var textDirection$2 = dart.privateName(axis_chart_data, "SideTitles.textDirection");
  var margin$0 = dart.privateName(axis_chart_data, "SideTitles.margin");
  var interval$ = dart.privateName(axis_chart_data, "SideTitles.interval");
  var rotateAngle$ = dart.privateName(axis_chart_data, "SideTitles.rotateAngle");
  var checkToShowTitle$ = dart.privateName(axis_chart_data, "SideTitles.checkToShowTitle");
  const Object_EquatableMixin$36$28 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$28.new = function() {
  }).prototype = Object_EquatableMixin$36$28.prototype;
  dart.applyMixin(Object_EquatableMixin$36$28, equatable_mixin.EquatableMixin);
  axis_chart_data.SideTitles = class SideTitles extends Object_EquatableMixin$36$28 {
    get showTitles() {
      return this[showTitles$];
    }
    set showTitles(value) {
      super.showTitles = value;
    }
    get getTitles() {
      return this[getTitles$];
    }
    set getTitles(value) {
      super.getTitles = value;
    }
    get reservedSize() {
      return this[reservedSize$0];
    }
    set reservedSize(value) {
      super.reservedSize = value;
    }
    get getTextStyles() {
      return this[getTextStyles$];
    }
    set getTextStyles(value) {
      super.getTextStyles = value;
    }
    get textDirection() {
      return this[textDirection$2];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get margin() {
      return this[margin$0];
    }
    set margin(value) {
      super.margin = value;
    }
    get interval() {
      return this[interval$];
    }
    set interval(value) {
      super.interval = value;
    }
    get rotateAngle() {
      return this[rotateAngle$];
    }
    set rotateAngle(value) {
      super.rotateAngle = value;
    }
    get checkToShowTitle() {
      return this[checkToShowTitle$];
    }
    set checkToShowTitle(value) {
      super.checkToShowTitle = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 314, 37, "a");
      if (b == null) dart.nullFailed(I[6], 314, 51, "b");
      if (t == null) dart.nullFailed(I[6], 314, 61, "t");
      return new axis_chart_data.SideTitles.new({showTitles: b.showTitles, getTitles: b.getTitles, reservedSize: ui.lerpDouble(a.reservedSize, b.reservedSize, t), getTextStyles: b.getTextStyles, textDirection: b.textDirection, margin: ui.lerpDouble(a.margin, b.margin, t), interval: ui.lerpDouble(a.interval, b.interval, t), rotateAngle: ui.lerpDouble(a.rotateAngle, b.rotateAngle, t), checkToShowTitle: b.checkToShowTitle});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.showTitles, this.getTitles, this.reservedSize, this.getTextStyles, this.margin, this.interval, this.rotateAngle, this.checkToShowTitle]);
    }
  };
  (axis_chart_data.SideTitles.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5;
    let showTitles = opts && 'showTitles' in opts ? opts.showTitles : null;
    let getTitles = opts && 'getTitles' in opts ? opts.getTitles : null;
    let reservedSize = opts && 'reservedSize' in opts ? opts.reservedSize : null;
    let getTextStyles = opts && 'getTextStyles' in opts ? opts.getTextStyles : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let rotateAngle = opts && 'rotateAngle' in opts ? opts.rotateAngle : null;
    let checkToShowTitle = opts && 'checkToShowTitle' in opts ? opts.checkToShowTitle : null;
    this[showTitles$] = (t43 = showTitles, t43 == null ? false : t43);
    this[getTitles$] = (t43$ = getTitles, t43$ == null ? C[109] || CT.C109 : t43$);
    this[reservedSize$0] = (t43$0 = reservedSize, t43$0 == null ? 22.0 : t43$0);
    this[getTextStyles$] = (t43$1 = getTextStyles, t43$1 == null ? C[110] || CT.C110 : t43$1);
    this[textDirection$2] = (t43$2 = textDirection, t43$2 == null ? ui.TextDirection.ltr : t43$2);
    this[margin$0] = (t43$3 = margin, t43$3 == null ? 6.0 : t43$3);
    this[interval$] = interval;
    this[rotateAngle$] = (t43$4 = rotateAngle, t43$4 == null ? 0.0 : t43$4);
    this[checkToShowTitle$] = (t43$5 = checkToShowTitle, t43$5 == null ? C[111] || CT.C111 : t43$5);
    if (interval === 0) {
      dart.throw(new core.ArgumentError.new("SideTitles.interval couldn't be zero"));
    }
  }).prototype = axis_chart_data.SideTitles.prototype;
  dart.addTypeTests(axis_chart_data.SideTitles);
  dart.addTypeCaches(axis_chart_data.SideTitles);
  dart.setGetterSignature(axis_chart_data.SideTitles, () => ({
    __proto__: dart.getGetters(axis_chart_data.SideTitles.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.SideTitles, I[9]);
  dart.setFieldSignature(axis_chart_data.SideTitles, () => ({
    __proto__: dart.getFields(axis_chart_data.SideTitles.__proto__),
    showTitles: dart.finalFieldType(core.bool),
    getTitles: dart.finalFieldType(dart.fnType(core.String, [core.double])),
    reservedSize: dart.finalFieldType(core.double),
    getTextStyles: dart.finalFieldType(dart.fnType(text_style.TextStyle, [core.double])),
    textDirection: dart.finalFieldType(ui.TextDirection),
    margin: dart.finalFieldType(core.double),
    interval: dart.finalFieldType(dart.nullable(core.double)),
    rotateAngle: dart.finalFieldType(core.double),
    checkToShowTitle: dart.finalFieldType(dart.fnType(core.bool, [core.double, core.double, axis_chart_data.SideTitles, core.double, core.double]))
  }));
  var show$7 = dart.privateName(axis_chart_data, "FlGridData.show");
  var drawHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.drawHorizontalLine");
  var horizontalInterval$ = dart.privateName(axis_chart_data, "FlGridData.horizontalInterval");
  var getDrawingHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.getDrawingHorizontalLine");
  var checkToShowHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.checkToShowHorizontalLine");
  var drawVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.drawVerticalLine");
  var verticalInterval$ = dart.privateName(axis_chart_data, "FlGridData.verticalInterval");
  var getDrawingVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.getDrawingVerticalLine");
  var checkToShowVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.checkToShowVerticalLine");
  const Object_EquatableMixin$36$29 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$29.new = function() {
  }).prototype = Object_EquatableMixin$36$29.prototype;
  dart.applyMixin(Object_EquatableMixin$36$29, equatable_mixin.EquatableMixin);
  axis_chart_data.FlGridData = class FlGridData extends Object_EquatableMixin$36$29 {
    get show() {
      return this[show$7];
    }
    set show(value) {
      super.show = value;
    }
    get drawHorizontalLine() {
      return this[drawHorizontalLine$];
    }
    set drawHorizontalLine(value) {
      super.drawHorizontalLine = value;
    }
    get horizontalInterval() {
      return this[horizontalInterval$];
    }
    set horizontalInterval(value) {
      super.horizontalInterval = value;
    }
    get getDrawingHorizontalLine() {
      return this[getDrawingHorizontalLine$];
    }
    set getDrawingHorizontalLine(value) {
      super.getDrawingHorizontalLine = value;
    }
    get checkToShowHorizontalLine() {
      return this[checkToShowHorizontalLine$];
    }
    set checkToShowHorizontalLine(value) {
      super.checkToShowHorizontalLine = value;
    }
    get drawVerticalLine() {
      return this[drawVerticalLine$];
    }
    set drawVerticalLine(value) {
      super.drawVerticalLine = value;
    }
    get verticalInterval() {
      return this[verticalInterval$];
    }
    set verticalInterval(value) {
      super.verticalInterval = value;
    }
    get getDrawingVerticalLine() {
      return this[getDrawingVerticalLine$];
    }
    set getDrawingVerticalLine(value) {
      super.getDrawingVerticalLine = value;
    }
    get checkToShowVerticalLine() {
      return this[checkToShowVerticalLine$];
    }
    set checkToShowVerticalLine(value) {
      super.checkToShowVerticalLine = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 486, 37, "a");
      if (b == null) dart.nullFailed(I[6], 486, 51, "b");
      if (t == null) dart.nullFailed(I[6], 486, 61, "t");
      return new axis_chart_data.FlGridData.new({show: b.show, drawHorizontalLine: b.drawHorizontalLine, horizontalInterval: ui.lerpDouble(a.horizontalInterval, b.horizontalInterval, t), getDrawingHorizontalLine: b.getDrawingHorizontalLine, checkToShowHorizontalLine: b.checkToShowHorizontalLine, drawVerticalLine: b.drawVerticalLine, verticalInterval: ui.lerpDouble(a.verticalInterval, b.verticalInterval, t), getDrawingVerticalLine: b.getDrawingVerticalLine, checkToShowVerticalLine: b.checkToShowVerticalLine});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.drawHorizontalLine, this.horizontalInterval, this.getDrawingHorizontalLine, this.checkToShowHorizontalLine, this.drawVerticalLine, this.verticalInterval, this.getDrawingVerticalLine, this.checkToShowVerticalLine]);
    }
  };
  (axis_chart_data.FlGridData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4;
    let show = opts && 'show' in opts ? opts.show : null;
    let drawHorizontalLine = opts && 'drawHorizontalLine' in opts ? opts.drawHorizontalLine : null;
    let horizontalInterval = opts && 'horizontalInterval' in opts ? opts.horizontalInterval : null;
    let getDrawingHorizontalLine = opts && 'getDrawingHorizontalLine' in opts ? opts.getDrawingHorizontalLine : null;
    let checkToShowHorizontalLine = opts && 'checkToShowHorizontalLine' in opts ? opts.checkToShowHorizontalLine : null;
    let drawVerticalLine = opts && 'drawVerticalLine' in opts ? opts.drawVerticalLine : null;
    let verticalInterval = opts && 'verticalInterval' in opts ? opts.verticalInterval : null;
    let getDrawingVerticalLine = opts && 'getDrawingVerticalLine' in opts ? opts.getDrawingVerticalLine : null;
    let checkToShowVerticalLine = opts && 'checkToShowVerticalLine' in opts ? opts.checkToShowVerticalLine : null;
    this[show$7] = (t43 = show, t43 == null ? true : t43);
    this[drawHorizontalLine$] = (t43$ = drawHorizontalLine, t43$ == null ? true : t43$);
    this[horizontalInterval$] = horizontalInterval;
    this[getDrawingHorizontalLine$] = (t43$0 = getDrawingHorizontalLine, t43$0 == null ? C[112] || CT.C112 : t43$0);
    this[checkToShowHorizontalLine$] = (t43$1 = checkToShowHorizontalLine, t43$1 == null ? C[113] || CT.C113 : t43$1);
    this[drawVerticalLine$] = (t43$2 = drawVerticalLine, t43$2 == null ? false : t43$2);
    this[verticalInterval$] = verticalInterval;
    this[getDrawingVerticalLine$] = (t43$3 = getDrawingVerticalLine, t43$3 == null ? C[112] || CT.C112 : t43$3);
    this[checkToShowVerticalLine$] = (t43$4 = checkToShowVerticalLine, t43$4 == null ? C[113] || CT.C113 : t43$4);
    if (horizontalInterval === 0) {
      dart.throw(new core.ArgumentError.new("FlGridData.horizontalInterval couldn't be zero"));
    }
    if (verticalInterval === 0) {
      dart.throw(new core.ArgumentError.new("FlGridData.verticalInterval couldn't be zero"));
    }
  }).prototype = axis_chart_data.FlGridData.prototype;
  dart.addTypeTests(axis_chart_data.FlGridData);
  dart.addTypeCaches(axis_chart_data.FlGridData);
  dart.setGetterSignature(axis_chart_data.FlGridData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlGridData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.FlGridData, I[9]);
  dart.setFieldSignature(axis_chart_data.FlGridData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlGridData.__proto__),
    show: dart.finalFieldType(core.bool),
    drawHorizontalLine: dart.finalFieldType(core.bool),
    horizontalInterval: dart.finalFieldType(dart.nullable(core.double)),
    getDrawingHorizontalLine: dart.finalFieldType(dart.fnType(axis_chart_data.FlLine, [core.double])),
    checkToShowHorizontalLine: dart.finalFieldType(dart.fnType(core.bool, [core.double])),
    drawVerticalLine: dart.finalFieldType(core.bool),
    verticalInterval: dart.finalFieldType(dart.nullable(core.double)),
    getDrawingVerticalLine: dart.finalFieldType(dart.fnType(axis_chart_data.FlLine, [core.double])),
    checkToShowVerticalLine: dart.finalFieldType(dart.fnType(core.bool, [core.double]))
  }));
  var horizontalRangeAnnotations$ = dart.privateName(axis_chart_data, "RangeAnnotations.horizontalRangeAnnotations");
  var verticalRangeAnnotations$ = dart.privateName(axis_chart_data, "RangeAnnotations.verticalRangeAnnotations");
  const Object_EquatableMixin$36$30 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$30.new = function() {
  }).prototype = Object_EquatableMixin$36$30.prototype;
  dart.applyMixin(Object_EquatableMixin$36$30, equatable_mixin.EquatableMixin);
  axis_chart_data.RangeAnnotations = class RangeAnnotations extends Object_EquatableMixin$36$30 {
    get horizontalRangeAnnotations() {
      return this[horizontalRangeAnnotations$];
    }
    set horizontalRangeAnnotations(value) {
      super.horizontalRangeAnnotations = value;
    }
    get verticalRangeAnnotations() {
      return this[verticalRangeAnnotations$];
    }
    set verticalRangeAnnotations(value) {
      super.verticalRangeAnnotations = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 624, 49, "a");
      if (b == null) dart.nullFailed(I[6], 624, 69, "b");
      if (t == null) dart.nullFailed(I[6], 624, 79, "t");
      return new axis_chart_data.RangeAnnotations.new({horizontalRangeAnnotations: lerp.lerpHorizontalRangeAnnotationList(a.horizontalRangeAnnotations, b.horizontalRangeAnnotations, t), verticalRangeAnnotations: lerp.lerpVerticalRangeAnnotationList(a.verticalRangeAnnotations, b.verticalRangeAnnotations, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.horizontalRangeAnnotations, this.verticalRangeAnnotations]);
    }
  };
  (axis_chart_data.RangeAnnotations.new = function(opts) {
    let t43, t43$;
    let horizontalRangeAnnotations = opts && 'horizontalRangeAnnotations' in opts ? opts.horizontalRangeAnnotations : null;
    let verticalRangeAnnotations = opts && 'verticalRangeAnnotations' in opts ? opts.verticalRangeAnnotations : null;
    this[horizontalRangeAnnotations$] = (t43 = horizontalRangeAnnotations, t43 == null ? C[114] || CT.C114 : t43);
    this[verticalRangeAnnotations$] = (t43$ = verticalRangeAnnotations, t43$ == null ? C[115] || CT.C115 : t43$);
    ;
  }).prototype = axis_chart_data.RangeAnnotations.prototype;
  dart.addTypeTests(axis_chart_data.RangeAnnotations);
  dart.addTypeCaches(axis_chart_data.RangeAnnotations);
  dart.setGetterSignature(axis_chart_data.RangeAnnotations, () => ({
    __proto__: dart.getGetters(axis_chart_data.RangeAnnotations.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.RangeAnnotations, I[9]);
  dart.setFieldSignature(axis_chart_data.RangeAnnotations, () => ({
    __proto__: dart.getFields(axis_chart_data.RangeAnnotations.__proto__),
    horizontalRangeAnnotations: dart.finalFieldType(core.List$(axis_chart_data.HorizontalRangeAnnotation)),
    verticalRangeAnnotations: dart.finalFieldType(core.List$(axis_chart_data.VerticalRangeAnnotation))
  }));
  var y1$ = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.y1");
  var y2$ = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.y2");
  var color$5 = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.color");
  const Object_EquatableMixin$36$31 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$31.new = function() {
  }).prototype = Object_EquatableMixin$36$31.prototype;
  dart.applyMixin(Object_EquatableMixin$36$31, equatable_mixin.EquatableMixin);
  axis_chart_data.HorizontalRangeAnnotation = class HorizontalRangeAnnotation extends Object_EquatableMixin$36$31 {
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    get color() {
      return this[color$5];
    }
    set color(value) {
      super.color = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 664, 33, "a");
      if (b == null) dart.nullFailed(I[6], 664, 62, "b");
      if (t == null) dart.nullFailed(I[6], 664, 72, "t");
      return new axis_chart_data.HorizontalRangeAnnotation.new({y1: dart.nullCheck(ui.lerpDouble(a.y1, b.y1, t)), y2: dart.nullCheck(ui.lerpDouble(a.y2, b.y2, t)), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.y1, this.y2, this.color]);
    }
  };
  (axis_chart_data.HorizontalRangeAnnotation.new = function(opts) {
    let t43;
    let y1 = opts && 'y1' in opts ? opts.y1 : null;
    if (y1 == null) dart.nullFailed(I[6], 655, 21, "y1");
    let y2 = opts && 'y2' in opts ? opts.y2 : null;
    if (y2 == null) dart.nullFailed(I[6], 656, 21, "y2");
    let color = opts && 'color' in opts ? opts.color : null;
    this[y1$] = y1;
    this[y2$] = y2;
    this[color$5] = (t43 = color, t43 == null ? colors$.Colors.white : t43);
    ;
  }).prototype = axis_chart_data.HorizontalRangeAnnotation.prototype;
  dart.addTypeTests(axis_chart_data.HorizontalRangeAnnotation);
  dart.addTypeCaches(axis_chart_data.HorizontalRangeAnnotation);
  dart.setGetterSignature(axis_chart_data.HorizontalRangeAnnotation, () => ({
    __proto__: dart.getGetters(axis_chart_data.HorizontalRangeAnnotation.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.HorizontalRangeAnnotation, I[9]);
  dart.setFieldSignature(axis_chart_data.HorizontalRangeAnnotation, () => ({
    __proto__: dart.getFields(axis_chart_data.HorizontalRangeAnnotation.__proto__),
    y1: dart.finalFieldType(core.double),
    y2: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color)
  }));
  var x1$ = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.x1");
  var x2$ = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.x2");
  var color$6 = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.color");
  const Object_EquatableMixin$36$32 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$32.new = function() {
  }).prototype = Object_EquatableMixin$36$32.prototype;
  dart.applyMixin(Object_EquatableMixin$36$32, equatable_mixin.EquatableMixin);
  axis_chart_data.VerticalRangeAnnotation = class VerticalRangeAnnotation extends Object_EquatableMixin$36$32 {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[6], 704, 31, "a");
      if (b == null) dart.nullFailed(I[6], 704, 58, "b");
      if (t == null) dart.nullFailed(I[6], 704, 68, "t");
      return new axis_chart_data.VerticalRangeAnnotation.new({x1: dart.nullCheck(ui.lerpDouble(a.x1, b.x1, t)), x2: dart.nullCheck(ui.lerpDouble(a.x2, b.x2, t)), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.x1, this.x2, this.color]);
    }
  };
  (axis_chart_data.VerticalRangeAnnotation.new = function(opts) {
    let t43;
    let x1 = opts && 'x1' in opts ? opts.x1 : null;
    if (x1 == null) dart.nullFailed(I[6], 695, 21, "x1");
    let x2 = opts && 'x2' in opts ? opts.x2 : null;
    if (x2 == null) dart.nullFailed(I[6], 696, 21, "x2");
    let color = opts && 'color' in opts ? opts.color : null;
    this[x1$] = x1;
    this[x2$] = x2;
    this[color$6] = (t43 = color, t43 == null ? colors$.Colors.white : t43);
    ;
  }).prototype = axis_chart_data.VerticalRangeAnnotation.prototype;
  dart.addTypeTests(axis_chart_data.VerticalRangeAnnotation);
  dart.addTypeCaches(axis_chart_data.VerticalRangeAnnotation);
  dart.setGetterSignature(axis_chart_data.VerticalRangeAnnotation, () => ({
    __proto__: dart.getGetters(axis_chart_data.VerticalRangeAnnotation.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(axis_chart_data.VerticalRangeAnnotation, I[9]);
  dart.setFieldSignature(axis_chart_data.VerticalRangeAnnotation, () => ({
    __proto__: dart.getFields(axis_chart_data.VerticalRangeAnnotation.__proto__),
    x1: dart.finalFieldType(core.double),
    x2: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color)
  }));
  axis_chart_data.defaultCheckToShowTitle = function defaultCheckToShowTitle(minValue, maxValue, sideTitles, appliedInterval, value) {
    if (minValue == null) dart.nullFailed(I[6], 249, 12, "minValue");
    if (maxValue == null) dart.nullFailed(I[6], 249, 29, "maxValue");
    if (sideTitles == null) dart.nullFailed(I[6], 249, 50, "sideTitles");
    if (appliedInterval == null) dart.nullFailed(I[6], 249, 69, "appliedInterval");
    if (value == null) dart.nullFailed(I[6], 249, 93, "value");
    if ((dart.notNull(maxValue) - dart.notNull(minValue))[$modulo](appliedInterval) === 0) {
      return true;
    }
    return value != maxValue;
  };
  axis_chart_data.showAllGrids = function showAllGrids(value) {
    if (value == null) dart.nullFailed(I[6], 519, 26, "value");
    return true;
  };
  axis_chart_data.defaultGridLine = function defaultGridLine(value) {
    if (value == null) dart.nullFailed(I[6], 530, 31, "value");
    return new axis_chart_data.FlLine.new({color: colors$.Colors.grey, strokeWidth: 0.5});
  };
  bar_chart_helper.BarChartHelper = class BarChartHelper extends core.Object {
    static calculateMaxAxisValues(barGroups) {
      if (barGroups == null) dart.nullFailed(I[48], 15, 82, "barGroups");
      if (dart.test(barGroups[$isEmpty])) {
        return new bar_chart_helper.BarChartMinMaxAxisValues.new(0.0, 0.0);
      }
      let listWrapper = list_wrapper['ListExtension|toWrapperClass'](bar_chart_data.BarChartGroupData, barGroups);
      if (dart.test(bar_chart_helper.BarChartHelper._cachedResults[$containsKey](listWrapper))) {
        return dart.nullCheck(bar_chart_helper.BarChartHelper._cachedResults[$_get](listWrapper)).copyWith({readFromCache: true});
      }
      for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
        let barData = barGroups[$_get](i);
        if (dart.test(barData.barRods[$isEmpty])) {
          dart.throw(core.Exception.new("barRods could not be null or empty"));
        }
      }
      let maxY = barGroups[$_get](0).barRods[$_get](0).y;
      let minY = 0.0;
      for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
        let barGroup = barGroups[$_get](i);
        for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
          let rod = barGroup.barRods[$_get](j);
          if (dart.notNull(rod.y) > dart.notNull(maxY)) {
            maxY = rod.y;
          }
          if (dart.test(rod.backDrawRodData.show) && dart.notNull(rod.backDrawRodData.y) > dart.notNull(maxY)) {
            maxY = rod.backDrawRodData.y;
          }
          if (dart.notNull(rod.y) < dart.notNull(minY)) {
            minY = rod.y;
          }
          if (dart.test(rod.backDrawRodData.show) && dart.notNull(rod.backDrawRodData.y) < dart.notNull(minY)) {
            minY = rod.backDrawRodData.y;
          }
        }
      }
      let result = new bar_chart_helper.BarChartMinMaxAxisValues.new(minY, maxY);
      bar_chart_helper.BarChartHelper._cachedResults[$_set](listWrapper, result);
      return result;
    }
  };
  (bar_chart_helper.BarChartHelper.new = function() {
    ;
  }).prototype = bar_chart_helper.BarChartHelper.prototype;
  dart.addTypeTests(bar_chart_helper.BarChartHelper);
  dart.addTypeCaches(bar_chart_helper.BarChartHelper);
  dart.setLibraryUri(bar_chart_helper.BarChartHelper, I[49]);
  dart.defineLazy(bar_chart_helper.BarChartHelper, {
    /*bar_chart_helper.BarChartHelper._cachedResults*/get _cachedResults() {
      return new (T.LinkedMapOfListWrapperOfBarChartGroupData$BarChartMinMaxAxisValues()).new();
    }
  }, false);
  var minY$2 = dart.privateName(bar_chart_helper, "BarChartMinMaxAxisValues.minY");
  var maxY$2 = dart.privateName(bar_chart_helper, "BarChartMinMaxAxisValues.maxY");
  var readFromCache$1 = dart.privateName(bar_chart_helper, "BarChartMinMaxAxisValues.readFromCache");
  const Object_EquatableMixin$36$33 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$33.new = function() {
  }).prototype = Object_EquatableMixin$36$33.prototype;
  dart.applyMixin(Object_EquatableMixin$36$33, equatable_mixin.EquatableMixin);
  bar_chart_helper.BarChartMinMaxAxisValues = class BarChartMinMaxAxisValues extends Object_EquatableMixin$36$33 {
    get minY() {
      return this[minY$2];
    }
    set minY(value) {
      super.minY = value;
    }
    get maxY() {
      return this[maxY$2];
    }
    set maxY(value) {
      super.maxY = value;
    }
    get readFromCache() {
      return this[readFromCache$1];
    }
    set readFromCache(value) {
      super.readFromCache = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.minY, this.maxY, this.readFromCache]);
    }
    copyWith(opts) {
      let t43, t43$, t43$0;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : null;
      return new bar_chart_helper.BarChartMinMaxAxisValues.new((t43 = minY, t43 == null ? this.minY : t43), (t43$ = maxY, t43$ == null ? this.maxY : t43$), {readFromCache: (t43$0 = readFromCache, t43$0 == null ? this.readFromCache : t43$0)});
    }
  };
  (bar_chart_helper.BarChartMinMaxAxisValues.new = function(minY, maxY, opts) {
    if (minY == null) dart.nullFailed(I[48], 70, 33, "minY");
    if (maxY == null) dart.nullFailed(I[48], 70, 44, "maxY");
    let readFromCache = opts && 'readFromCache' in opts ? opts.readFromCache : false;
    if (readFromCache == null) dart.nullFailed(I[48], 70, 56, "readFromCache");
    this[minY$2] = minY;
    this[maxY$2] = maxY;
    this[readFromCache$1] = readFromCache;
    ;
  }).prototype = bar_chart_helper.BarChartMinMaxAxisValues.prototype;
  dart.addTypeTests(bar_chart_helper.BarChartMinMaxAxisValues);
  dart.addTypeCaches(bar_chart_helper.BarChartMinMaxAxisValues);
  dart.setMethodSignature(bar_chart_helper.BarChartMinMaxAxisValues, () => ({
    __proto__: dart.getMethods(bar_chart_helper.BarChartMinMaxAxisValues.__proto__),
    copyWith: dart.fnType(bar_chart_helper.BarChartMinMaxAxisValues, [], {maxY: dart.nullable(core.double), minY: dart.nullable(core.double), readFromCache: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(bar_chart_helper.BarChartMinMaxAxisValues, () => ({
    __proto__: dart.getGetters(bar_chart_helper.BarChartMinMaxAxisValues.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_helper.BarChartMinMaxAxisValues, I[49]);
  dart.setFieldSignature(bar_chart_helper.BarChartMinMaxAxisValues, () => ({
    __proto__: dart.getFields(bar_chart_helper.BarChartMinMaxAxisValues.__proto__),
    minY: dart.finalFieldType(core.double),
    maxY: dart.finalFieldType(core.double),
    readFromCache: dart.finalFieldType(core.bool)
  }));
  var barGroups$ = dart.privateName(bar_chart_data, "BarChartData.barGroups");
  var groupsSpace$ = dart.privateName(bar_chart_data, "BarChartData.groupsSpace");
  var alignment$1 = dart.privateName(bar_chart_data, "BarChartData.alignment");
  var titlesData$1 = dart.privateName(bar_chart_data, "BarChartData.titlesData");
  var barTouchData$ = dart.privateName(bar_chart_data, "BarChartData.barTouchData");
  const AxisChartData_EquatableMixin$36$0 = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36$0.new = function(opts) {
    AxisChartData_EquatableMixin$36$0.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36$0.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartData = class BarChartData extends AxisChartData_EquatableMixin$36$0 {
    get barGroups() {
      return this[barGroups$];
    }
    set barGroups(value) {
      super.barGroups = value;
    }
    get groupsSpace() {
      return this[groupsSpace$];
    }
    set groupsSpace(value) {
      super.groupsSpace = value;
    }
    get alignment() {
      return this[alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get titlesData() {
      return this[titlesData$1];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get barTouchData() {
      return this[barTouchData$];
    }
    set barTouchData(value) {
      super.barTouchData = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6, t43$7, t43$8, t43$9;
      let barGroups = opts && 'barGroups' in opts ? opts.barGroups : null;
      let groupsSpace = opts && 'groupsSpace' in opts ? opts.groupsSpace : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
      let barTouchData = opts && 'barTouchData' in opts ? opts.barTouchData : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new bar_chart_data.BarChartData.new({barGroups: (t43 = barGroups, t43 == null ? this.barGroups : t43), groupsSpace: (t43$ = groupsSpace, t43$ == null ? this.groupsSpace : t43$), alignment: (t43$0 = alignment, t43$0 == null ? this.alignment : t43$0), titlesData: (t43$1 = titlesData, t43$1 == null ? this.titlesData : t43$1), axisTitleData: (t43$2 = axisTitleData, t43$2 == null ? this.axisTitleData : t43$2), rangeAnnotations: (t43$3 = rangeAnnotations, t43$3 == null ? this.rangeAnnotations : t43$3), barTouchData: (t43$4 = barTouchData, t43$4 == null ? this.barTouchData : t43$4), gridData: (t43$5 = gridData, t43$5 == null ? this.gridData : t43$5), borderData: (t43$6 = borderData, t43$6 == null ? this.borderData : t43$6), maxY: (t43$7 = maxY, t43$7 == null ? this.maxY : t43$7), minY: (t43$8 = minY, t43$8 == null ? this.minY : t43$8), backgroundColor: (t43$9 = backgroundColor, t43$9 == null ? this.backgroundColor : t43$9)});
    }
    lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[50], 115, 35, "a");
      if (b == null) dart.nullFailed(I[50], 115, 52, "b");
      if (t == null) dart.nullFailed(I[50], 115, 62, "t");
      if (bar_chart_data.BarChartData.is(a) && bar_chart_data.BarChartData.is(b)) {
        return new bar_chart_data.BarChartData.new({barGroups: lerp.lerpBarChartGroupDataList(a.barGroups, b.barGroups, t), groupsSpace: ui.lerpDouble(a.groupsSpace, b.groupsSpace, t), alignment: b.alignment, titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), rangeAnnotations: axis_chart_data.RangeAnnotations.lerp(a.rangeAnnotations, b.rangeAnnotations, t), barTouchData: b.barTouchData, gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), minY: ui.lerpDouble(a.minY, b.minY, t), backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.barGroups, this.groupsSpace, this.alignment, this.titlesData, this.barTouchData, this.axisTitleData, this.maxY, this.minY, this.gridData, this.borderData, this.rangeAnnotations, this.backgroundColor]);
    }
  };
  (bar_chart_data.BarChartData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6, t44, t43$7, t44$, t43$8;
    let barGroups = opts && 'barGroups' in opts ? opts.barGroups : null;
    let groupsSpace = opts && 'groupsSpace' in opts ? opts.groupsSpace : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let barTouchData = opts && 'barTouchData' in opts ? opts.barTouchData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[barGroups$] = (t43 = barGroups, t43 == null ? C[116] || CT.C116 : t43);
    this[groupsSpace$] = (t43$ = groupsSpace, t43$ == null ? 16.0 : t43$);
    this[alignment$1] = (t43$0 = alignment, t43$0 == null ? bar_chart_data.BarChartAlignment.spaceBetween : t43$0);
    this[titlesData$1] = (t43$1 = titlesData, t43$1 == null ? new axis_chart_data.FlTitlesData.new() : t43$1);
    this[barTouchData$] = (t43$2 = barTouchData, t43$2 == null ? new bar_chart_data.BarTouchData.new() : t43$2);
    bar_chart_data.BarChartData.__proto__.new.call(this, {axisTitleData: (t43$3 = axisTitleData, t43$3 == null ? new axis_chart_data.FlAxisTitleData.new() : t43$3), gridData: (t43$4 = gridData, t43$4 == null ? new axis_chart_data.FlGridData.new({show: false}) : t43$4), borderData: borderData, rangeAnnotations: (t43$5 = rangeAnnotations, t43$5 == null ? new axis_chart_data.RangeAnnotations.new() : t43$5), backgroundColor: backgroundColor, touchData: (t43$6 = barTouchData, t43$6 == null ? new bar_chart_data.BarTouchData.new() : t43$6), minX: 0.0, maxX: 1.0, maxY: (t43$7 = maxY, t43$7 == null ? bar_chart_helper.BarChartHelper.calculateMaxAxisValues((t44 = barGroups, t44 == null ? T.JSArrayOfBarChartGroupData().of([]) : t44)).maxY : t43$7), minY: (t43$8 = minY, t43$8 == null ? bar_chart_helper.BarChartHelper.calculateMaxAxisValues((t44$ = barGroups, t44$ == null ? T.JSArrayOfBarChartGroupData().of([]) : t44$)).minY : t43$8)});
    ;
  }).prototype = bar_chart_data.BarChartData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartData);
  dart.addTypeCaches(bar_chart_data.BarChartData);
  dart.setMethodSignature(bar_chart_data.BarChartData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartData.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarChartData, [], {alignment: dart.nullable(bar_chart_data.BarChartAlignment), axisTitleData: dart.nullable(axis_chart_data.FlAxisTitleData), backgroundColor: dart.nullable(ui.Color), barGroups: dart.nullable(core.List$(bar_chart_data.BarChartGroupData)), barTouchData: dart.nullable(bar_chart_data.BarTouchData), borderData: dart.nullable(base_chart_data.FlBorderData), gridData: dart.nullable(axis_chart_data.FlGridData), groupsSpace: dart.nullable(core.double), maxY: dart.nullable(core.double), minY: dart.nullable(core.double), rangeAnnotations: dart.nullable(axis_chart_data.RangeAnnotations), titlesData: dart.nullable(axis_chart_data.FlTitlesData)}, {}),
    lerp: dart.fnType(bar_chart_data.BarChartData, [base_chart_data.BaseChartData, base_chart_data.BaseChartData, core.double])
  }));
  dart.setLibraryUri(bar_chart_data.BarChartData, I[51]);
  dart.setFieldSignature(bar_chart_data.BarChartData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartData.__proto__),
    barGroups: dart.finalFieldType(core.List$(bar_chart_data.BarChartGroupData)),
    groupsSpace: dart.finalFieldType(core.double),
    alignment: dart.finalFieldType(bar_chart_data.BarChartAlignment),
    titlesData: dart.finalFieldType(axis_chart_data.FlTitlesData),
    barTouchData: dart.finalFieldType(bar_chart_data.BarTouchData)
  }));
  var _name$0 = dart.privateName(bar_chart_data, "_name");
  bar_chart_data.BarChartAlignment = class BarChartAlignment extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (bar_chart_data.BarChartAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[50], 155, 6, "index");
    if (_name == null) dart.nullFailed(I[50], 155, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = bar_chart_data.BarChartAlignment.prototype;
  dart.addTypeTests(bar_chart_data.BarChartAlignment);
  dart.addTypeCaches(bar_chart_data.BarChartAlignment);
  dart.setLibraryUri(bar_chart_data.BarChartAlignment, I[51]);
  dart.setFieldSignature(bar_chart_data.BarChartAlignment, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_chart_data.BarChartAlignment, ['toString']);
  bar_chart_data.BarChartAlignment.start = C[117] || CT.C117;
  bar_chart_data.BarChartAlignment.end = C[118] || CT.C118;
  bar_chart_data.BarChartAlignment.center = C[119] || CT.C119;
  bar_chart_data.BarChartAlignment.spaceEvenly = C[120] || CT.C120;
  bar_chart_data.BarChartAlignment.spaceAround = C[121] || CT.C121;
  bar_chart_data.BarChartAlignment.spaceBetween = C[122] || CT.C122;
  bar_chart_data.BarChartAlignment.values = C[123] || CT.C123;
  var x$1 = dart.privateName(bar_chart_data, "BarChartGroupData.x");
  var barRods$ = dart.privateName(bar_chart_data, "BarChartGroupData.barRods");
  var barsSpace$ = dart.privateName(bar_chart_data, "BarChartGroupData.barsSpace");
  var showingTooltipIndicators$1 = dart.privateName(bar_chart_data, "BarChartGroupData.showingTooltipIndicators");
  const Object_EquatableMixin$36$34 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$34.new = function() {
  }).prototype = Object_EquatableMixin$36$34.prototype;
  dart.applyMixin(Object_EquatableMixin$36$34, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartGroupData = class BarChartGroupData extends Object_EquatableMixin$36$34 {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get barRods() {
      return this[barRods$];
    }
    set barRods(value) {
      super.barRods = value;
    }
    get barsSpace() {
      return this[barsSpace$];
    }
    set barsSpace(value) {
      super.barsSpace = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$1];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    get width() {
      if (dart.test(this.barRods[$isEmpty])) {
        return 0.0;
      }
      let sumWidth = this.barRods[$map](core.double, dart.fn(rodData => {
        if (rodData == null) dart.nullFailed(I[50], 210, 22, "rodData");
        return rodData.width;
      }, T.BarChartRodDataTodouble()))[$reduce](dart.fn((first, second) => {
        if (first == null) dart.nullFailed(I[50], 210, 57, "first");
        if (second == null) dart.nullFailed(I[50], 210, 64, "second");
        return dart.notNull(first) + dart.notNull(second);
      }, T.doubleAnddoubleTodouble()));
      let spaces = (dart.notNull(this.barRods[$length]) - 1) * dart.notNull(this.barsSpace);
      return dart.notNull(sumWidth) + spaces;
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1;
      let x = opts && 'x' in opts ? opts.x : null;
      let barRods = opts && 'barRods' in opts ? opts.barRods : null;
      let barsSpace = opts && 'barsSpace' in opts ? opts.barsSpace : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      return new bar_chart_data.BarChartGroupData.new({x: (t43 = x, t43 == null ? this.x : t43), barRods: (t43$ = barRods, t43$ == null ? this.barRods : t43$), barsSpace: (t43$0 = barsSpace, t43$0 == null ? this.barsSpace : t43$0), showingTooltipIndicators: (t43$1 = showingTooltipIndicators, t43$1 == null ? this.showingTooltipIndicators : t43$1)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[50], 233, 51, "a");
      if (b == null) dart.nullFailed(I[50], 233, 72, "b");
      if (t == null) dart.nullFailed(I[50], 233, 82, "t");
      return new bar_chart_data.BarChartGroupData.new({x: (dart.notNull(a.x) + (dart.notNull(b.x) - dart.notNull(a.x)) * dart.notNull(t))[$round](), barRods: lerp.lerpBarChartRodDataList(a.barRods, b.barRods, t), barsSpace: ui.lerpDouble(a.barsSpace, b.barsSpace, t), showingTooltipIndicators: lerp.lerpIntList(a.showingTooltipIndicators, b.showingTooltipIndicators, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.x, this.barRods, this.barsSpace, this.showingTooltipIndicators]);
    }
  };
  (bar_chart_data.BarChartGroupData.new = function(opts) {
    let t43, t43$, t43$0;
    let x = opts && 'x' in opts ? opts.x : null;
    if (x == null) dart.nullFailed(I[50], 194, 18, "x");
    let barRods = opts && 'barRods' in opts ? opts.barRods : null;
    let barsSpace = opts && 'barsSpace' in opts ? opts.barsSpace : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    this[x$1] = x;
    this[barRods$] = (t43 = barRods, t43 == null ? C[124] || CT.C124 : t43);
    this[barsSpace$] = (t43$ = barsSpace, t43$ == null ? 2.0 : t43$);
    this[showingTooltipIndicators$1] = (t43$0 = showingTooltipIndicators, t43$0 == null ? C[1] || CT.C1 : t43$0);
    ;
  }).prototype = bar_chart_data.BarChartGroupData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartGroupData);
  dart.addTypeCaches(bar_chart_data.BarChartGroupData);
  dart.setMethodSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartGroupData.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarChartGroupData, [], {barRods: dart.nullable(core.List$(bar_chart_data.BarChartRodData)), barsSpace: dart.nullable(core.double), showingTooltipIndicators: dart.nullable(core.List$(core.int)), x: dart.nullable(core.int)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartGroupData.__proto__),
    width: core.double,
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartGroupData, I[51]);
  dart.setFieldSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartGroupData.__proto__),
    x: dart.finalFieldType(core.int),
    barRods: dart.finalFieldType(core.List$(bar_chart_data.BarChartRodData)),
    barsSpace: dart.finalFieldType(core.double),
    showingTooltipIndicators: dart.finalFieldType(core.List$(core.int))
  }));
  var y$1 = dart.privateName(bar_chart_data, "BarChartRodData.y");
  var colors$3 = dart.privateName(bar_chart_data, "BarChartRodData.colors");
  var gradientFrom$2 = dart.privateName(bar_chart_data, "BarChartRodData.gradientFrom");
  var gradientTo$2 = dart.privateName(bar_chart_data, "BarChartRodData.gradientTo");
  var colorStops = dart.privateName(bar_chart_data, "BarChartRodData.colorStops");
  var width$1 = dart.privateName(bar_chart_data, "BarChartRodData.width");
  var borderRadius$ = dart.privateName(bar_chart_data, "BarChartRodData.borderRadius");
  var backDrawRodData$ = dart.privateName(bar_chart_data, "BarChartRodData.backDrawRodData");
  var rodStackItems$ = dart.privateName(bar_chart_data, "BarChartRodData.rodStackItems");
  const Object_EquatableMixin$36$35 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$35.new = function() {
  }).prototype = Object_EquatableMixin$36$35.prototype;
  dart.applyMixin(Object_EquatableMixin$36$35, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartRodData = class BarChartRodData extends Object_EquatableMixin$36$35 {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get colors() {
      return this[colors$3];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$2];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$2];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get colorStops() {
      return this[colorStops];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get backDrawRodData() {
      return this[backDrawRodData$];
    }
    set backDrawRodData(value) {
      super.backDrawRodData = value;
    }
    get rodStackItems() {
      return this[rodStackItems$];
    }
    set rodStackItems(value) {
      super.rodStackItems = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6;
      let y = opts && 'y' in opts ? opts.y : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
      let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
      let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let backDrawRodData = opts && 'backDrawRodData' in opts ? opts.backDrawRodData : null;
      let rodStackItems = opts && 'rodStackItems' in opts ? opts.rodStackItems : null;
      return new bar_chart_data.BarChartRodData.new({y: (t43 = y, t43 == null ? this.y : t43), colors: (t43$ = colors, t43$ == null ? this.colors : t43$), gradientFrom: (t43$0 = gradientFrom, t43$0 == null ? this.gradientFrom : t43$0), gradientTo: (t43$1 = gradientTo, t43$1 == null ? this.gradientTo : t43$1), gradientColorStops: (t43$2 = colorStops, t43$2 == null ? this.colorStops : t43$2), width: (t43$3 = width, t43$3 == null ? this.width : t43$3), borderRadius: (t43$4 = borderRadius, t43$4 == null ? this.borderRadius : t43$4), backDrawRodData: (t43$5 = backDrawRodData, t43$5 == null ? this.backDrawRodData : t43$5), rodStackItems: (t43$6 = rodStackItems, t43$6 == null ? this.rodStackItems : t43$6)});
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[50], 362, 47, "a");
      if (b == null) dart.nullFailed(I[50], 362, 66, "b");
      if (t == null) dart.nullFailed(I[50], 362, 76, "t");
      return new bar_chart_data.BarChartRodData.new({gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), width: ui.lerpDouble(a.width, b.width, t), borderRadius: border_radius.BorderRadius.lerp(a.borderRadius, b.borderRadius, t), y: dart.nullCheck(ui.lerpDouble(a.y, b.y, t)), backDrawRodData: bar_chart_data.BackgroundBarChartRodData.lerp(a.backDrawRodData, b.backDrawRodData, t), rodStackItems: lerp.lerpBarChartRodStackList(a.rodStackItems, b.rodStackItems, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.y, this.width, this.borderRadius, this.backDrawRodData, this.rodStackItems, this.colors, this.gradientFrom, this.gradientTo, this.colorStops]);
    }
  };
  (bar_chart_data.BarChartRodData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4;
    let y = opts && 'y' in opts ? opts.y : null;
    if (y == null) dart.nullFailed(I[50], 316, 21, "y");
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let backDrawRodData = opts && 'backDrawRodData' in opts ? opts.backDrawRodData : null;
    let rodStackItems = opts && 'rodStackItems' in opts ? opts.rodStackItems : null;
    this[y$1] = y;
    this[colors$3] = (t43 = colors, t43 == null ? T.JSArrayOfColor().of([colors$.Colors.blueAccent]) : t43);
    this[gradientFrom$2] = (t43$ = gradientFrom, t43$ == null ? C[125] || CT.C125 : t43$);
    this[gradientTo$2] = (t43$0 = gradientTo, t43$0 == null ? C[126] || CT.C126 : t43$0);
    this[colorStops] = gradientColorStops;
    this[width$1] = (t43$1 = width, t43$1 == null ? 8.0 : t43$1);
    this[borderRadius$] = utils.normalizeBorderRadius(borderRadius, (t43$2 = width, t43$2 == null ? 8.0 : t43$2));
    this[backDrawRodData$] = (t43$3 = backDrawRodData, t43$3 == null ? new bar_chart_data.BackgroundBarChartRodData.new() : t43$3);
    this[rodStackItems$] = (t43$4 = rodStackItems, t43$4 == null ? C[127] || CT.C127 : t43$4);
    ;
  }).prototype = bar_chart_data.BarChartRodData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartRodData);
  dart.addTypeCaches(bar_chart_data.BarChartRodData);
  dart.setMethodSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartRodData.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarChartRodData, [], {backDrawRodData: dart.nullable(bar_chart_data.BackgroundBarChartRodData), borderRadius: dart.nullable(border_radius.BorderRadius), colorStops: dart.nullable(core.List$(core.double)), colors: dart.nullable(core.List$(ui.Color)), gradientFrom: dart.nullable(ui.Offset), gradientTo: dart.nullable(ui.Offset), rodStackItems: dart.nullable(core.List$(bar_chart_data.BarChartRodStackItem)), width: dart.nullable(core.double), y: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartRodData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartRodData, I[51]);
  dart.setFieldSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartRodData.__proto__),
    y: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    gradientFrom: dart.finalFieldType(ui.Offset),
    gradientTo: dart.finalFieldType(ui.Offset),
    colorStops: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    width: dart.finalFieldType(core.double),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadius)),
    backDrawRodData: dart.finalFieldType(bar_chart_data.BackgroundBarChartRodData),
    rodStackItems: dart.finalFieldType(core.List$(bar_chart_data.BarChartRodStackItem))
  }));
  var fromY$ = dart.privateName(bar_chart_data, "BarChartRodStackItem.fromY");
  var toY$ = dart.privateName(bar_chart_data, "BarChartRodStackItem.toY");
  var color$7 = dart.privateName(bar_chart_data, "BarChartRodStackItem.color");
  const Object_EquatableMixin$36$36 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$36.new = function() {
  }).prototype = Object_EquatableMixin$36$36.prototype;
  dart.applyMixin(Object_EquatableMixin$36$36, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartRodStackItem = class BarChartRodStackItem extends Object_EquatableMixin$36$36 {
    get fromY() {
      return this[fromY$];
    }
    set fromY(value) {
      super.fromY = value;
    }
    get toY() {
      return this[toY$];
    }
    set toY(value) {
      super.toY = value;
    }
    get color() {
      return this[color$7];
    }
    set color(value) {
      super.color = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0;
      let fromY = opts && 'fromY' in opts ? opts.fromY : null;
      let toY = opts && 'toY' in opts ? opts.toY : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new bar_chart_data.BarChartRodStackItem.new((t43 = fromY, t43 == null ? this.fromY : t43), (t43$ = toY, t43$ == null ? this.toY : t43$), (t43$0 = color, t43$0 == null ? this.color : t43$0));
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[50], 435, 57, "a");
      if (b == null) dart.nullFailed(I[50], 435, 81, "b");
      if (t == null) dart.nullFailed(I[50], 435, 91, "t");
      return new bar_chart_data.BarChartRodStackItem.new(dart.nullCheck(ui.lerpDouble(a.fromY, b.fromY, t)), dart.nullCheck(ui.lerpDouble(a.toY, b.toY, t)), dart.nullCheck(ui.Color.lerp(a.color, b.color, t)));
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.fromY, this.toY, this.color]);
    }
  };
  (bar_chart_data.BarChartRodStackItem.new = function(fromY, toY, color) {
    if (fromY == null) dart.nullFailed(I[50], 418, 29, "fromY");
    if (toY == null) dart.nullFailed(I[50], 418, 41, "toY");
    if (color == null) dart.nullFailed(I[50], 418, 51, "color");
    this[fromY$] = fromY;
    this[toY$] = toY;
    this[color$7] = color;
    ;
  }).prototype = bar_chart_data.BarChartRodStackItem.prototype;
  dart.addTypeTests(bar_chart_data.BarChartRodStackItem);
  dart.addTypeCaches(bar_chart_data.BarChartRodStackItem);
  dart.setMethodSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartRodStackItem.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarChartRodStackItem, [], {color: dart.nullable(ui.Color), fromY: dart.nullable(core.double), toY: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartRodStackItem.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartRodStackItem, I[51]);
  dart.setFieldSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartRodStackItem.__proto__),
    fromY: dart.finalFieldType(core.double),
    toY: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color)
  }));
  var show$8 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.show");
  var y$2 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.y");
  var colors$4 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.colors");
  var gradientFrom$3 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.gradientFrom");
  var gradientTo$3 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.gradientTo");
  var colorStops$0 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.colorStops");
  const Object_EquatableMixin$36$37 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$37.new = function() {
  }).prototype = Object_EquatableMixin$36$37.prototype;
  dart.applyMixin(Object_EquatableMixin$36$37, equatable_mixin.EquatableMixin);
  bar_chart_data.BackgroundBarChartRodData = class BackgroundBarChartRodData extends Object_EquatableMixin$36$37 {
    get show() {
      return this[show$8];
    }
    set show(value) {
      super.show = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get colors() {
      return this[colors$4];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$3];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$3];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get colorStops() {
      return this[colorStops$0];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[50], 502, 33, "a");
      if (b == null) dart.nullFailed(I[50], 502, 62, "b");
      if (t == null) dart.nullFailed(I[50], 502, 72, "t");
      return new bar_chart_data.BackgroundBarChartRodData.new({y: ui.lerpDouble(a.y, b.y, t), gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), colorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), show: b.show});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.y, this.colors, this.gradientTo, this.gradientFrom, this.colorStops]);
    }
  };
  (bar_chart_data.BackgroundBarChartRodData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2;
    let y = opts && 'y' in opts ? opts.y : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
    this[y$2] = (t43 = y, t43 == null ? 8.0 : t43);
    this[show$8] = (t43$ = show, t43$ == null ? false : t43$);
    this[colors$4] = (t43$0 = colors, t43$0 == null ? T.JSArrayOfColor().of([colors$.Colors.blueGrey]) : t43$0);
    this[gradientFrom$3] = (t43$1 = gradientFrom, t43$1 == null ? C[77] || CT.C77 : t43$1);
    this[gradientTo$3] = (t43$2 = gradientTo, t43$2 == null ? C[78] || CT.C78 : t43$2);
    this[colorStops$0] = colorStops;
    ;
  }).prototype = bar_chart_data.BackgroundBarChartRodData.prototype;
  dart.addTypeTests(bar_chart_data.BackgroundBarChartRodData);
  dart.addTypeCaches(bar_chart_data.BackgroundBarChartRodData);
  dart.setGetterSignature(bar_chart_data.BackgroundBarChartRodData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BackgroundBarChartRodData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BackgroundBarChartRodData, I[51]);
  dart.setFieldSignature(bar_chart_data.BackgroundBarChartRodData, () => ({
    __proto__: dart.getFields(bar_chart_data.BackgroundBarChartRodData.__proto__),
    show: dart.finalFieldType(core.bool),
    y: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    gradientFrom: dart.finalFieldType(ui.Offset),
    gradientTo: dart.finalFieldType(ui.Offset),
    colorStops: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var touchTooltipData$1 = dart.privateName(bar_chart_data, "BarTouchData.touchTooltipData");
  var touchExtraThreshold$ = dart.privateName(bar_chart_data, "BarTouchData.touchExtraThreshold");
  var allowTouchBarBackDraw$ = dart.privateName(bar_chart_data, "BarTouchData.allowTouchBarBackDraw");
  var handleBuiltInTouches$1 = dart.privateName(bar_chart_data, "BarTouchData.handleBuiltInTouches");
  var touchCallback$7 = dart.privateName(bar_chart_data, "BarTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$2 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$2.new = function(enabled) {
    FlTouchData_EquatableMixin$36$2.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$2.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$2, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchData = class BarTouchData extends FlTouchData_EquatableMixin$36$2 {
    get touchTooltipData() {
      return this[touchTooltipData$1];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get touchExtraThreshold() {
      return this[touchExtraThreshold$];
    }
    set touchExtraThreshold(value) {
      super.touchExtraThreshold = value;
    }
    get allowTouchBarBackDraw() {
      return this[allowTouchBarBackDraw$];
    }
    set allowTouchBarBackDraw(value) {
      super.allowTouchBarBackDraw = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$1];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get touchCallback() {
      return this[touchCallback$7];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0, t43$1, t43$2, t43$3;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let touchExtraThreshold = opts && 'touchExtraThreshold' in opts ? opts.touchExtraThreshold : null;
      let allowTouchBarBackDraw = opts && 'allowTouchBarBackDraw' in opts ? opts.allowTouchBarBackDraw : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new bar_chart_data.BarTouchData.new({enabled: (t43 = enabled, t43 == null ? this.enabled : t43), touchTooltipData: (t43$ = touchTooltipData, t43$ == null ? this.touchTooltipData : t43$), touchExtraThreshold: (t43$0 = touchExtraThreshold, t43$0 == null ? this.touchExtraThreshold : t43$0), allowTouchBarBackDraw: (t43$1 = allowTouchBarBackDraw, t43$1 == null ? this.allowTouchBarBackDraw : t43$1), handleBuiltInTouches: (t43$2 = handleBuiltInTouches, t43$2 == null ? this.handleBuiltInTouches : t43$2), touchCallback: (t43$3 = touchCallback, t43$3 == null ? this.touchCallback : t43$3)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.enabled, this.touchTooltipData, this.touchExtraThreshold, this.allowTouchBarBackDraw, this.handleBuiltInTouches, this.touchCallback]);
    }
  };
  (bar_chart_data.BarTouchData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let touchExtraThreshold = opts && 'touchExtraThreshold' in opts ? opts.touchExtraThreshold : null;
    let allowTouchBarBackDraw = opts && 'allowTouchBarBackDraw' in opts ? opts.allowTouchBarBackDraw : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$1] = (t43 = touchTooltipData, t43 == null ? new bar_chart_data.BarTouchTooltipData.new() : t43);
    this[touchExtraThreshold$] = (t43$ = touchExtraThreshold, t43$ == null ? C[128] || CT.C128 : t43$);
    this[allowTouchBarBackDraw$] = (t43$0 = allowTouchBarBackDraw, t43$0 == null ? false : t43$0);
    this[handleBuiltInTouches$1] = (t43$1 = handleBuiltInTouches, t43$1 == null ? true : t43$1);
    this[touchCallback$7] = touchCallback;
    bar_chart_data.BarTouchData.__proto__.new.call(this, (t43$2 = enabled, t43$2 == null ? true : t43$2));
    ;
  }).prototype = bar_chart_data.BarTouchData.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchData);
  dart.addTypeCaches(bar_chart_data.BarTouchData);
  dart.setMethodSignature(bar_chart_data.BarTouchData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarTouchData.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarTouchData, [], {allowTouchBarBackDraw: dart.nullable(core.bool), enabled: dart.nullable(core.bool), handleBuiltInTouches: dart.nullable(core.bool), touchCallback: dart.nullable(dart.fnType(dart.dynamic, [bar_chart_data.BarTouchResponse])), touchExtraThreshold: dart.nullable(edge_insets.EdgeInsets), touchTooltipData: dart.nullable(bar_chart_data.BarTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(bar_chart_data.BarTouchData, I[51]);
  dart.setFieldSignature(bar_chart_data.BarTouchData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(bar_chart_data.BarTouchTooltipData),
    touchExtraThreshold: dart.finalFieldType(edge_insets.EdgeInsets),
    allowTouchBarBackDraw: dart.finalFieldType(core.bool),
    handleBuiltInTouches: dart.finalFieldType(core.bool),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [bar_chart_data.BarTouchResponse])))
  }));
  bar_chart_data.TooltipDirection = class TooltipDirection extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (bar_chart_data.TooltipDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[50], 605, 6, "index");
    if (_name == null) dart.nullFailed(I[50], 605, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = bar_chart_data.TooltipDirection.prototype;
  dart.addTypeTests(bar_chart_data.TooltipDirection);
  dart.addTypeCaches(bar_chart_data.TooltipDirection);
  dart.setLibraryUri(bar_chart_data.TooltipDirection, I[51]);
  dart.setFieldSignature(bar_chart_data.TooltipDirection, () => ({
    __proto__: dart.getFields(bar_chart_data.TooltipDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_chart_data.TooltipDirection, ['toString']);
  bar_chart_data.TooltipDirection.auto = C[129] || CT.C129;
  bar_chart_data.TooltipDirection.top = C[130] || CT.C130;
  bar_chart_data.TooltipDirection.bottom = C[131] || CT.C131;
  bar_chart_data.TooltipDirection.values = C[132] || CT.C132;
  var tooltipBgColor$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipPadding");
  var tooltipMargin$0 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipMargin");
  var maxContentWidth$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.maxContentWidth");
  var getTooltipItem$ = dart.privateName(bar_chart_data, "BarTouchTooltipData.getTooltipItem");
  var fitInsideHorizontally$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.fitInsideVertically");
  var direction$ = dart.privateName(bar_chart_data, "BarTouchTooltipData.direction");
  const Object_EquatableMixin$36$38 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$38.new = function() {
  }).prototype = Object_EquatableMixin$36$38.prototype;
  dart.applyMixin(Object_EquatableMixin$36$38, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchTooltipData = class BarTouchTooltipData extends Object_EquatableMixin$36$38 {
    get tooltipBgColor() {
      return this[tooltipBgColor$1];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$1];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$1];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get tooltipMargin() {
      return this[tooltipMargin$0];
    }
    set tooltipMargin(value) {
      super.tooltipMargin = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$1];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItem() {
      return this[getTooltipItem$];
    }
    set getTooltipItem(value) {
      super.getTooltipItem = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$1];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$1];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.tooltipMargin, this.maxContentWidth, this.getTooltipItem, this.fitInsideHorizontally, this.fitInsideVertically]);
    }
  };
  (bar_chart_data.BarTouchTooltipData.new = function(opts) {
    let t43, t43$, t43$0, t43$1, t43$2, t43$3, t43$4, t43$5, t43$6;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let tooltipMargin = opts && 'tooltipMargin' in opts ? opts.tooltipMargin : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItem = opts && 'getTooltipItem' in opts ? opts.getTooltipItem : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    let direction = opts && 'direction' in opts ? opts.direction : null;
    this[tooltipBgColor$1] = (t43 = tooltipBgColor, t43 == null ? colors$.Colors.white : t43);
    this[tooltipRoundedRadius$1] = (t43$ = tooltipRoundedRadius, t43$ == null ? 4.0 : t43$);
    this[tooltipPadding$1] = (t43$0 = tooltipPadding, t43$0 == null ? C[37] || CT.C37 : t43$0);
    this[tooltipMargin$0] = (t43$1 = tooltipMargin, t43$1 == null ? 16.0 : t43$1);
    this[maxContentWidth$1] = (t43$2 = maxContentWidth, t43$2 == null ? 120.0 : t43$2);
    this[getTooltipItem$] = (t43$3 = getTooltipItem, t43$3 == null ? C[133] || CT.C133 : t43$3);
    this[fitInsideHorizontally$1] = (t43$4 = fitInsideHorizontally, t43$4 == null ? false : t43$4);
    this[fitInsideVertically$1] = (t43$5 = fitInsideVertically, t43$5 == null ? false : t43$5);
    this[direction$] = (t43$6 = direction, t43$6 == null ? bar_chart_data.TooltipDirection.auto : t43$6);
    ;
  }).prototype = bar_chart_data.BarTouchTooltipData.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchTooltipData);
  dart.addTypeCaches(bar_chart_data.BarTouchTooltipData);
  dart.setGetterSignature(bar_chart_data.BarTouchTooltipData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarTouchTooltipData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BarTouchTooltipData, I[51]);
  dart.setFieldSignature(bar_chart_data.BarTouchTooltipData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(ui.Color),
    tooltipRoundedRadius: dart.finalFieldType(core.double),
    tooltipPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    tooltipMargin: dart.finalFieldType(core.double),
    maxContentWidth: dart.finalFieldType(core.double),
    getTooltipItem: dart.finalFieldType(dart.fnType(dart.nullable(bar_chart_data.BarTooltipItem), [bar_chart_data.BarChartGroupData, core.int, bar_chart_data.BarChartRodData, core.int])),
    fitInsideHorizontally: dart.finalFieldType(core.bool),
    fitInsideVertically: dart.finalFieldType(core.bool),
    direction: dart.finalFieldType(bar_chart_data.TooltipDirection)
  }));
  var text$1 = dart.privateName(bar_chart_data, "BarTooltipItem.text");
  var textStyle$2 = dart.privateName(bar_chart_data, "BarTooltipItem.textStyle");
  var textAlign$2 = dart.privateName(bar_chart_data, "BarTooltipItem.textAlign");
  var textDirection$3 = dart.privateName(bar_chart_data, "BarTooltipItem.textDirection");
  var children$1 = dart.privateName(bar_chart_data, "BarTooltipItem.children");
  const Object_EquatableMixin$36$39 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$39.new = function() {
  }).prototype = Object_EquatableMixin$36$39.prototype;
  dart.applyMixin(Object_EquatableMixin$36$39, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTooltipItem = class BarTooltipItem extends Object_EquatableMixin$36$39 {
    get text() {
      return this[text$1];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$2];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textAlign() {
      return this[textAlign$2];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$3];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get children() {
      return this[children$1];
    }
    set children(value) {
      super.children = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.text, this.textStyle, this.textAlign, this.textDirection, this.children]);
    }
  };
  (bar_chart_data.BarTooltipItem.new = function(text, textStyle, opts) {
    if (text == null) dart.nullFailed(I[50], 740, 10, "text");
    if (textStyle == null) dart.nullFailed(I[50], 741, 10, "textStyle");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[106] || CT.C106;
    if (textAlign == null) dart.nullFailed(I[50], 742, 10, "textAlign");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : C[107] || CT.C107;
    if (textDirection == null) dart.nullFailed(I[50], 743, 10, "textDirection");
    let children = opts && 'children' in opts ? opts.children : null;
    this[text$1] = text;
    this[textStyle$2] = textStyle;
    this[textAlign$2] = textAlign;
    this[textDirection$3] = textDirection;
    this[children$1] = children;
    ;
  }).prototype = bar_chart_data.BarTooltipItem.prototype;
  dart.addTypeTests(bar_chart_data.BarTooltipItem);
  dart.addTypeCaches(bar_chart_data.BarTooltipItem);
  dart.setGetterSignature(bar_chart_data.BarTooltipItem, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarTooltipItem.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(bar_chart_data.BarTooltipItem, I[51]);
  dart.setFieldSignature(bar_chart_data.BarTooltipItem, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTooltipItem.__proto__),
    text: dart.finalFieldType(core.String),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textDirection: dart.finalFieldType(ui.TextDirection),
    children: dart.finalFieldType(dart.nullable(core.List$(text_span.TextSpan)))
  }));
  var spot$1 = dart.privateName(bar_chart_data, "BarTouchResponse.spot");
  bar_chart_data.BarTouchResponse = class BarTouchResponse extends base_chart_data.BaseTouchResponse {
    get spot() {
      return this[spot$1];
    }
    set spot(value) {
      super.spot = value;
    }
    copyWith(opts) {
      let t43, t43$, t43$0;
      let spot = opts && 'spot' in opts ? opts.spot : null;
      let touchInput = opts && 'touchInput' in opts ? opts.touchInput : null;
      let clickHappened = opts && 'clickHappened' in opts ? opts.clickHappened : null;
      return new bar_chart_data.BarTouchResponse.new((t43 = spot, t43 == null ? this.spot : t43), (t43$ = touchInput, t43$ == null ? this.touchInput : t43$), (t43$0 = clickHappened, t43$0 == null ? this.clickHappened : t43$0));
    }
  };
  (bar_chart_data.BarTouchResponse.new = function(spot, touchInput, clickHappened) {
    if (touchInput == null) dart.nullFailed(I[50], 775, 18, "touchInput");
    if (clickHappened == null) dart.nullFailed(I[50], 776, 10, "clickHappened");
    this[spot$1] = spot;
    bar_chart_data.BarTouchResponse.__proto__.new.call(this, touchInput, clickHappened);
    ;
  }).prototype = bar_chart_data.BarTouchResponse.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchResponse);
  dart.addTypeCaches(bar_chart_data.BarTouchResponse);
  dart.setMethodSignature(bar_chart_data.BarTouchResponse, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarTouchResponse.__proto__),
    copyWith: dart.fnType(bar_chart_data.BarTouchResponse, [], {clickHappened: dart.nullable(core.bool), spot: dart.nullable(bar_chart_data.BarTouchedSpot), touchInput: dart.nullable(events.PointerEvent)}, {})
  }));
  dart.setLibraryUri(bar_chart_data.BarTouchResponse, I[51]);
  dart.setFieldSignature(bar_chart_data.BarTouchResponse, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchResponse.__proto__),
    spot: dart.finalFieldType(dart.nullable(bar_chart_data.BarTouchedSpot))
  }));
  var touchedBarGroup$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedBarGroup");
  var touchedBarGroupIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedBarGroupIndex");
  var touchedRodData$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedRodData");
  var touchedRodDataIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedRodDataIndex");
  var touchedStackItem$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedStackItem");
  var touchedStackItemIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedStackItemIndex");
  const TouchedSpot_EquatableMixin$36$ = class TouchedSpot_EquatableMixin extends axis_chart_data.TouchedSpot {};
  (TouchedSpot_EquatableMixin$36$.new = function(spot, offset) {
    TouchedSpot_EquatableMixin$36$.__proto__.new.call(this, spot, offset);
  }).prototype = TouchedSpot_EquatableMixin$36$.prototype;
  dart.applyMixin(TouchedSpot_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchedSpot = class BarTouchedSpot extends TouchedSpot_EquatableMixin$36$ {
    get touchedBarGroup() {
      return this[touchedBarGroup$];
    }
    set touchedBarGroup(value) {
      super.touchedBarGroup = value;
    }
    get touchedBarGroupIndex() {
      return this[touchedBarGroupIndex$];
    }
    set touchedBarGroupIndex(value) {
      super.touchedBarGroupIndex = value;
    }
    get touchedRodData() {
      return this[touchedRodData$];
    }
    set touchedRodData(value) {
      super.touchedRodData = value;
    }
    get touchedRodDataIndex() {
      return this[touchedRodDataIndex$];
    }
    set touchedRodDataIndex(value) {
      super.touchedRodDataIndex = value;
    }
    get touchedStackItem() {
      return this[touchedStackItem$];
    }
    set touchedStackItem(value) {
      super.touchedStackItem = value;
    }
    get touchedStackItemIndex() {
      return this[touchedStackItemIndex$];
    }
    set touchedStackItemIndex(value) {
      super.touchedStackItemIndex = value;
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.touchedBarGroup, this.touchedBarGroupIndex, this.touchedRodData, this.touchedRodDataIndex, this.touchedStackItem, this.touchedStackItemIndex, this.spot, this.offset]);
    }
  };
  (bar_chart_data.BarTouchedSpot.new = function(touchedBarGroup, touchedBarGroupIndex, touchedRodData, touchedRodDataIndex, touchedStackItem, touchedStackItemIndex, spot, offset) {
    if (touchedBarGroup == null) dart.nullFailed(I[50], 818, 23, "touchedBarGroup");
    if (touchedBarGroupIndex == null) dart.nullFailed(I[50], 819, 9, "touchedBarGroupIndex");
    if (touchedRodData == null) dart.nullFailed(I[50], 820, 21, "touchedRodData");
    if (touchedRodDataIndex == null) dart.nullFailed(I[50], 821, 9, "touchedRodDataIndex");
    if (touchedStackItemIndex == null) dart.nullFailed(I[50], 823, 9, "touchedStackItemIndex");
    if (spot == null) dart.nullFailed(I[50], 824, 12, "spot");
    if (offset == null) dart.nullFailed(I[50], 825, 12, "offset");
    this[touchedBarGroup$] = touchedBarGroup;
    this[touchedBarGroupIndex$] = touchedBarGroupIndex;
    this[touchedRodData$] = touchedRodData;
    this[touchedRodDataIndex$] = touchedRodDataIndex;
    this[touchedStackItem$] = touchedStackItem;
    this[touchedStackItemIndex$] = touchedStackItemIndex;
    bar_chart_data.BarTouchedSpot.__proto__.new.call(this, spot, offset);
    ;
  }).prototype = bar_chart_data.BarTouchedSpot.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchedSpot);
  dart.addTypeCaches(bar_chart_data.BarTouchedSpot);
  dart.setLibraryUri(bar_chart_data.BarTouchedSpot, I[51]);
  dart.setFieldSignature(bar_chart_data.BarTouchedSpot, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchedSpot.__proto__),
    touchedBarGroup: dart.finalFieldType(bar_chart_data.BarChartGroupData),
    touchedBarGroupIndex: dart.finalFieldType(core.int),
    touchedRodData: dart.finalFieldType(bar_chart_data.BarChartRodData),
    touchedRodDataIndex: dart.finalFieldType(core.int),
    touchedStackItem: dart.finalFieldType(dart.nullable(bar_chart_data.BarChartRodStackItem)),
    touchedStackItemIndex: dart.finalFieldType(core.int)
  }));
  bar_chart_data.BarChartDataTween = class BarChartDataTween extends tween.Tween$(bar_chart_data.BarChartData) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[50], 855, 28, "t");
      return dart.nullCheck(this.begin).lerp(dart.nullCheck(this.begin), dart.nullCheck(this.end), t);
    }
  };
  (bar_chart_data.BarChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    if (begin == null) dart.nullFailed(I[50], 850, 44, "begin");
    let end = opts && 'end' in opts ? opts.end : null;
    if (end == null) dart.nullFailed(I[50], 850, 73, "end");
    bar_chart_data.BarChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = bar_chart_data.BarChartDataTween.prototype;
  dart.addTypeTests(bar_chart_data.BarChartDataTween);
  dart.addTypeCaches(bar_chart_data.BarChartDataTween);
  dart.setLibraryUri(bar_chart_data.BarChartDataTween, I[51]);
  bar_chart_data.defaultBarTooltipItem = function defaultBarTooltipItem(group, groupIndex, rod, rodIndex) {
    if (group == null) dart.nullFailed(I[50], 707, 21, "group");
    if (groupIndex == null) dart.nullFailed(I[50], 708, 7, "groupIndex");
    if (rod == null) dart.nullFailed(I[50], 709, 19, "rod");
    if (rodIndex == null) dart.nullFailed(I[50], 710, 7, "rodIndex");
    let textStyle = C[98] || CT.C98;
    return new bar_chart_data.BarTooltipItem.new(dart.toString(rod.y), textStyle);
  };
  var __BarChartPainter__barPaint = dart.privateName(bar_chart_painter, "_#BarChartPainter#_barPaint");
  var __BarChartPainter__bgTouchTooltipPaint = dart.privateName(bar_chart_painter, "_#BarChartPainter#_bgTouchTooltipPaint");
  var _groupBarsPosition = dart.privateName(bar_chart_painter, "_groupBarsPosition");
  var _barPaint$ = dart.privateName(bar_chart_painter, "_barPaint");
  var _bgTouchTooltipPaint$0 = dart.privateName(bar_chart_painter, "_bgTouchTooltipPaint");
  var _calculateGroupsX = dart.privateName(bar_chart_painter, "_calculateGroupsX");
  var _calculateGroupAndBarsPosition = dart.privateName(bar_chart_painter, "_calculateGroupAndBarsPosition");
  var _drawBars = dart.privateName(bar_chart_painter, "_drawBars");
  var _drawTitles$1 = dart.privateName(bar_chart_painter, "_drawTitles");
  var _drawTouchTooltip$0 = dart.privateName(bar_chart_painter, "_drawTouchTooltip");
  bar_chart_painter.BarChartPainter = class BarChartPainter extends axis_chart_painter.AxisChartPainter$(bar_chart_data.BarChartData) {
    get [_barPaint$]() {
      let t43;
      t43 = this[__BarChartPainter__barPaint];
      return t43 == null ? dart.throw(new _internal.LateError.fieldNI("_barPaint")) : t43;
    }
    set [_barPaint$](t43) {
      if (t43 == null) dart.nullFailed(I[52], 17, 14, "null");
      this[__BarChartPainter__barPaint] = t43;
    }
    get [_bgTouchTooltipPaint$0]() {
      let t44;
      t44 = this[__BarChartPainter__bgTouchTooltipPaint];
      return t44 == null ? dart.throw(new _internal.LateError.fieldNI("_bgTouchTooltipPaint")) : t44;
    }
    set [_bgTouchTooltipPaint$0](t44) {
      if (t44 == null) dart.nullFailed(I[52], 17, 25, "null");
      this[__BarChartPainter__bgTouchTooltipPaint] = t44;
    }
    paint(canvasWrapper, holder) {
      if (canvasWrapper == null) dart.nullFailed(I[52], 39, 28, "canvasWrapper");
      T.PaintHolderOfBarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[52], 39, 69, "holder");
      super.paint(canvasWrapper, holder);
      let data = holder.data;
      let targetData = holder.targetData;
      if (dart.test(data.barGroups[$isEmpty])) {
        return;
      }
      let groupsX = this[_calculateGroupsX](canvasWrapper.size, data.barGroups, data.alignment, holder);
      this[_groupBarsPosition] = this[_calculateGroupAndBarsPosition](canvasWrapper.size, groupsX, data.barGroups);
      this[_drawBars](canvasWrapper, dart.nullCheck(this[_groupBarsPosition]), holder);
      this.drawAxisTitles(canvasWrapper, holder);
      this[_drawTitles$1](canvasWrapper, dart.nullCheck(this[_groupBarsPosition]), holder);
      for (let i = 0; i < dart.notNull(targetData.barGroups[$length]); i = i + 1) {
        let barGroup = targetData.barGroups[$_get](i);
        for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
          if (!dart.test(barGroup.showingTooltipIndicators[$contains](j))) {
            continue;
          }
          let barRod = barGroup.barRods[$_get](j);
          this[_drawTouchTooltip$0](canvasWrapper, dart.nullCheck(this[_groupBarsPosition]), targetData.barTouchData.touchTooltipData, barGroup, i, barRod, j, holder);
        }
      }
    }
    [_calculateGroupsX](viewSize, barGroups, alignment, holder) {
      if (viewSize == null) dart.nullFailed(I[52], 71, 39, "viewSize");
      if (barGroups == null) dart.nullFailed(I[52], 71, 73, "barGroups");
      if (alignment == null) dart.nullFailed(I[52], 72, 25, "alignment");
      if (holder == null) dart.nullFailed(I[52], 72, 62, "holder");
      let data = holder.data;
      let drawSize = this.getChartUsableDrawSize(viewSize, holder);
      let groupsX = T.ListOfdouble().filled(barGroups[$length], 0.0, {growable: false});
      let leftTextsSpace = this.getLeftOffsetDrawSize(holder);
      switch (alignment) {
        case C[117] || CT.C117:
        {
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            if (i == null) dart.nullFailed(I[52], 83, 36, "i");
            if (group == null) dart.nullFailed(I[52], 83, 39, "group");
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX + dart.notNull(group.width) / 2);
            tempX = tempX + dart.notNull(group.width);
          }, T.intAndBarChartGroupDataTovoid()));
          break;
        }
        case C[118] || CT.C118:
        {
          let tempX = 0.0;
          for (let i = dart.notNull(barGroups[$length]) - 1; i >= 0; i = i - 1) {
            let group = barGroups[$_get](i);
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + dart.notNull(drawSize.width) - tempX - dart.notNull(group.width) / 2);
            tempX = tempX + dart.notNull(group.width);
          }
          break;
        }
        case C[119] || CT.C119:
        {
          let sumWidth = barGroups[$map](core.double, dart.fn(group => {
            if (group == null) dart.nullFailed(I[52], 99, 39, "group");
            return group.width;
          }, T.BarChartGroupDataTodouble()))[$reduce](dart.fn((a, b) => {
            if (a == null) dart.nullFailed(I[52], 99, 70, "a");
            if (b == null) dart.nullFailed(I[52], 99, 73, "b");
            return dart.notNull(a) + dart.notNull(b);
          }, T.doubleAnddoubleTodouble()));
          sumWidth = dart.notNull(sumWidth) + dart.notNull(data.groupsSpace) * (dart.notNull(barGroups[$length]) - 1);
          let horizontalMargin = (dart.notNull(drawSize.width) - dart.notNull(sumWidth)) / 2;
          let tempX = 0.0;
          for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
            let group = barGroups[$_get](i);
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + horizontalMargin + tempX + dart.notNull(group.width) / 2);
            let groupSpace = i === dart.notNull(barGroups[$length]) - 1 ? 0 : data.groupsSpace;
            tempX = tempX + (dart.notNull(group.width) + dart.notNull(groupSpace));
          }
          break;
        }
        case C[122] || CT.C122:
        {
          let sumWidth = barGroups[$map](core.double, dart.fn(group => {
            if (group == null) dart.nullFailed(I[52], 114, 41, "group");
            return group.width;
          }, T.BarChartGroupDataTodouble()))[$reduce](dart.fn((a, b) => {
            if (a == null) dart.nullFailed(I[52], 114, 72, "a");
            if (b == null) dart.nullFailed(I[52], 114, 75, "b");
            return dart.notNull(a) + dart.notNull(b);
          }, T.doubleAnddoubleTodouble()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) - 1);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((index, group) => {
            if (index == null) dart.nullFailed(I[52], 119, 36, "index");
            if (group == null) dart.nullFailed(I[52], 119, 43, "group");
            tempX = tempX + dart.notNull(group.width) / 2;
            if (index !== 0) {
              tempX = tempX + eachSpace;
            }
            groupsX[$_set](index, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
          }, T.intAndBarChartGroupDataTovoid()));
          break;
        }
        case C[121] || CT.C121:
        {
          let sumWidth = barGroups[$map](core.double, dart.fn(group => {
            if (group == null) dart.nullFailed(I[52], 130, 41, "group");
            return group.width;
          }, T.BarChartGroupDataTodouble()))[$reduce](dart.fn((a, b) => {
            if (a == null) dart.nullFailed(I[52], 130, 72, "a");
            if (b == null) dart.nullFailed(I[52], 130, 75, "b");
            return dart.notNull(a) + dart.notNull(b);
          }, T.doubleAnddoubleTodouble()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) * 2);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            if (i == null) dart.nullFailed(I[52], 135, 36, "i");
            if (group == null) dart.nullFailed(I[52], 135, 39, "group");
            tempX = tempX + eachSpace;
            tempX = tempX + dart.notNull(group.width) / 2;
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
            tempX = tempX + eachSpace;
          }, T.intAndBarChartGroupDataTovoid()));
          break;
        }
        case C[120] || CT.C120:
        {
          let sumWidth = barGroups[$map](core.double, dart.fn(group => {
            if (group == null) dart.nullFailed(I[52], 145, 41, "group");
            return group.width;
          }, T.BarChartGroupDataTodouble()))[$reduce](dart.fn((a, b) => {
            if (a == null) dart.nullFailed(I[52], 145, 72, "a");
            if (b == null) dart.nullFailed(I[52], 145, 75, "b");
            return dart.notNull(a) + dart.notNull(b);
          }, T.doubleAnddoubleTodouble()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) + 1);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            if (i == null) dart.nullFailed(I[52], 150, 36, "i");
            if (group == null) dart.nullFailed(I[52], 150, 39, "group");
            tempX = tempX + eachSpace;
            tempX = tempX + dart.notNull(group.width) / 2;
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
          }, T.intAndBarChartGroupDataTovoid()));
          break;
        }
      }
      return groupsX;
    }
    [_calculateGroupAndBarsPosition](viewSize, groupsX, barGroups) {
      if (viewSize == null) dart.nullFailed(I[52], 164, 12, "viewSize");
      if (groupsX == null) dart.nullFailed(I[52], 164, 35, "groupsX");
      if (barGroups == null) dart.nullFailed(I[52], 164, 68, "barGroups");
      if (groupsX[$length] != barGroups[$length]) {
        dart.throw(core.Exception.new("inconsistent state groupsX.length != barGroups.length"));
      }
      let groupBarsPosition = T.JSArrayOf_GroupBarsPosition().of([]);
      for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
        let barGroup = barGroups[$_get](i);
        let groupX = groupsX[$_get](i);
        let tempX = 0.0;
        let barsX = T.JSArrayOfdouble().of([]);
        barGroup.barRods[$asMap]()[$forEach](dart.fn((barIndex, barRod) => {
          if (barIndex == null) dart.nullFailed(I[52], 176, 41, "barIndex");
          if (barRod == null) dart.nullFailed(I[52], 176, 51, "barRod");
          let widthHalf = dart.notNull(barRod.width) / 2;
          barsX[$add](dart.notNull(groupX) - dart.notNull(barGroup.width) / 2 + tempX + widthHalf);
          tempX = tempX + (dart.notNull(barRod.width) + dart.notNull(barGroup.barsSpace));
        }, T.intAndBarChartRodDataTovoid()));
        groupBarsPosition[$add](new bar_chart_painter._GroupBarsPosition.new(groupX, barsX));
      }
      return groupBarsPosition;
    }
    [_drawBars](canvasWrapper, groupBarsPosition, holder) {
      let t45;
      if (canvasWrapper == null) dart.nullFailed(I[52], 187, 19, "canvasWrapper");
      if (groupBarsPosition == null) dart.nullFailed(I[52], 188, 30, "groupBarsPosition");
      if (holder == null) dart.nullFailed(I[52], 189, 31, "holder");
      let data = holder.data;
      let viewSize = canvasWrapper.size;
      let drawSize = this.getChartUsableDrawSize(viewSize, holder);
      for (let i = 0; i < dart.notNull(data.barGroups[$length]); i = i + 1) {
        let barGroup = data.barGroups[$_get](i);
        for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
          let barRod = barGroup.barRods[$_get](j);
          let widthHalf = dart.notNull(barRod.width) / 2;
          let borderRadius = (t45 = barRod.borderRadius, t45 == null ? new border_radius.BorderRadius.circular(dart.notNull(barRod.width) / 2) : t45);
          let x = groupBarsPosition[$_get](i).barsX[$_get](j);
          let left = dart.notNull(x) - widthHalf;
          let right = dart.notNull(x) + widthHalf;
          let cornerHeight = math.max(core.double, borderRadius.topLeft.y, borderRadius.topRight.y) + math.max(core.num, borderRadius.bottomLeft.y, borderRadius.bottomRight.y);
          let barRRect = null;
          if (dart.test(barRod.backDrawRodData.show) && barRod.backDrawRodData.y !== 0) {
            if (dart.notNull(barRod.backDrawRodData.y) > 0) {
              let bottom = this.getPixelY(math.max(core.double, data.minY, 0.0), drawSize, holder);
              let top = math.min(core.double, this.getPixelY(barRod.backDrawRodData.y, drawSize, holder), dart.notNull(bottom) - cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            } else {
              let top = this.getPixelY(math.min(core.double, data.maxY, 0.0), drawSize, holder);
              let bottom = math.max(core.double, this.getPixelY(barRod.backDrawRodData.y, drawSize, holder), dart.notNull(top) + cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            }
            if (barRod.backDrawRodData.colors[$length] === 1) {
              this[_barPaint$].color = barRod.backDrawRodData.colors[$_get](0);
              this[_barPaint$].shader = null;
            } else {
              let from = barRod.backDrawRodData.gradientFrom;
              let to = barRod.backDrawRodData.gradientTo;
              this[_barPaint$].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(drawSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(drawSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(drawSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(drawSize.height) * dart.notNull(to.dy)), barRod.backDrawRodData.colors, bar_chart_extensions['BackgroundBarChartRodDataExtension|getSafeColorStops'](barRod.backDrawRodData));
            }
            canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
          }
          if (barRod.y !== 0) {
            if (dart.notNull(barRod.y) > 0) {
              let bottom = this.getPixelY(math.max(core.double, data.minY, 0.0), drawSize, holder);
              let top = math.min(core.double, this.getPixelY(barRod.y, drawSize, holder), dart.notNull(bottom) - cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            } else {
              let top = this.getPixelY(math.min(core.double, data.maxY, 0.0), drawSize, holder);
              let bottom = math.max(core.double, this.getPixelY(barRod.y, drawSize, holder), dart.notNull(top) + cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            }
            if (barRod.colors[$length] === 1) {
              this[_barPaint$].color = barRod.colors[$_get](0);
              this[_barPaint$].shader = null;
            } else {
              let from = barRod.gradientFrom;
              let to = barRod.gradientTo;
              this[_barPaint$].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(drawSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(drawSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize(holder)) + dart.notNull(drawSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(drawSize.height) * dart.notNull(to.dy)), barRod.colors, bar_chart_extensions['BarChartRodDataExtension|getSafeColorStops'](barRod));
            }
            canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
            if (dart.test(barRod.rodStackItems[$isNotEmpty])) {
              for (let i = 0; i < dart.notNull(barRod.rodStackItems[$length]); i = i + 1) {
                let stackItem = barRod.rodStackItems[$_get](i);
                let stackFromY = this.getPixelY(stackItem.fromY, drawSize, holder);
                let stackToY = this.getPixelY(stackItem.toY, drawSize, holder);
                this[_barPaint$].color = stackItem.color;
                canvasWrapper.save();
                canvasWrapper.clipRect(new ui.Rect.fromLTRB(left, stackToY, right, stackFromY));
                canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
                canvasWrapper.restore();
              }
            }
          }
        }
      }
    }
    [_drawTitles$1](canvasWrapper, groupBarsPosition, holder) {
      let t45, t50, t49, t48, t47, t46, t45$, t46$, t45$0, t46$0, t45$1, t46$1, t45$2, t46$2, t45$3, t45$4, t50$, t49$, t48$, t47$, t46$3, t45$5, t46$4, t45$6, t46$5, t45$7, t45$8, t45$9, t46$6, t45$10, t46$7, t45$11;
      if (canvasWrapper == null) dart.nullFailed(I[52], 326, 19, "canvasWrapper");
      if (groupBarsPosition == null) dart.nullFailed(I[52], 327, 30, "groupBarsPosition");
      if (holder == null) dart.nullFailed(I[52], 328, 31, "holder");
      let data = holder.data;
      let targetData = holder.targetData;
      if (!dart.test(targetData.titlesData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let drawSize = this.getChartUsableDrawSize(viewSize, holder);
      let leftTitles = targetData.titlesData.leftTitles;
      let leftInterval = (t45 = leftTitles.interval, t45 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t45);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t45$ = leftTitles, t46 = data.minY, t47 = data.maxY, t48 = leftTitles, t49 = leftInterval, t50 = verticalSeek, t45$.checkToShowTitle(t46, t47, t48, t49, t50)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, drawSize, holder);
            let text = (t45$0 = leftTitles, t46$ = verticalSeek, t45$0.getTitles(t46$));
            let span = new text_span.TextSpan.new({style: (t45$1 = leftTitles, t46$0 = verticalSeek, t45$1.getTextStyles(t46$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: leftTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = targetData.titlesData.topTitles;
      if (dart.test(topTitles.showTitles)) {
        for (let index = 0; index < dart.notNull(groupBarsPosition[$length]); index = index + 1) {
          let groupBarPos = groupBarsPosition[$_get](index);
          let xValue = data.barGroups[$_get](index).x[$toDouble]();
          let text = (t45$2 = topTitles, t46$1 = xValue, t45$2.getTitles(t46$1));
          let span = new text_span.TextSpan.new({style: (t45$3 = topTitles, t46$2 = xValue, t45$3.getTextStyles(t46$2)), text: text});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: topTitles.textDirection, textScaleFactor: holder.textScale});
          tp.layout();
          let x = groupBarPos.groupX;
          x = dart.notNull(x) - dart.notNull(tp.width) / 2;
          canvasWrapper.save();
          canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, 0 + dart.notNull(tp.height) / 2);
          canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
          canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(0 + dart.notNull(tp.height) / 2));
          x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
          canvasWrapper.drawText(tp, new ui.Offset.new(x, 0));
          canvasWrapper.restore();
        }
      }
      let rightTitles = targetData.titlesData.rightTitles;
      let rightInterval = (t45$4 = rightTitles.interval, t45$4 == null ? utils.getEfficientInterval(viewSize.height, data.verticalDiff) : t45$4);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(data.maxY)) {
          if (dart.test((t45$5 = rightTitles, t46$3 = data.minY, t47$ = data.maxY, t48$ = rightTitles, t49$ = rightInterval, t50$ = verticalSeek, t45$5.checkToShowTitle(t46$3, t47$, t48$, t49$, t50$)))) {
            let x = dart.notNull(drawSize.width) + dart.notNull(this.getLeftOffsetDrawSize(holder));
            let y = this.getPixelY(verticalSeek, drawSize, holder);
            let text = (t45$6 = rightTitles, t46$4 = verticalSeek, t45$6.getTitles(t46$4));
            let span = new text_span.TextSpan.new({style: (t45$7 = rightTitles, t46$5 = verticalSeek, t45$7.getTextStyles(t46$5)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: rightTitles.textDirection, textScaleFactor: holder.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace(holder)});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && data.maxY != verticalSeek) {
            verticalSeek = data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = targetData.titlesData.bottomTitles;
      if (dart.test(bottomTitles.showTitles)) {
        let interval = (t45$9 = (t45$8 = bottomTitles.interval, t45$8 == null ? null : t45$8[$toInt]()), t45$9 == null ? 1 : t45$9);
        for (let index = 0; index < dart.notNull(groupBarsPosition[$length]); index = index + dart.notNull(interval)) {
          let groupBarPos = groupBarsPosition[$_get](index);
          let xValue = data.barGroups[$_get](index).x[$toDouble]();
          let text = (t45$10 = bottomTitles, t46$6 = xValue, t45$10.getTitles(t46$6));
          let span = new text_span.TextSpan.new({style: (t45$11 = bottomTitles, t46$7 = xValue, t45$11.getTextStyles(t46$7)), text: text});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: bottomTitles.textDirection, textScaleFactor: holder.textScale});
          tp.layout();
          let x = groupBarPos.groupX;
          let y = dart.notNull(drawSize.height) + dart.notNull(this.getTopOffsetDrawSize(holder)) + dart.notNull(bottomTitles.margin);
          x = dart.notNull(x) - dart.notNull(tp.width) / 2;
          canvasWrapper.save();
          canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
          canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
          canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
          x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
          canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
          canvasWrapper.restore();
        }
      }
    }
    [_drawTouchTooltip$0](canvasWrapper, groupPositions, tooltipData, showOnBarGroup, barGroupIndex, showOnRodData, barRodIndex, holder) {
      let t49, t48, t47, t46, t45;
      if (canvasWrapper == null) dart.nullFailed(I[52], 479, 19, "canvasWrapper");
      if (groupPositions == null) dart.nullFailed(I[52], 480, 30, "groupPositions");
      if (tooltipData == null) dart.nullFailed(I[52], 481, 25, "tooltipData");
      if (showOnBarGroup == null) dart.nullFailed(I[52], 482, 23, "showOnBarGroup");
      if (barGroupIndex == null) dart.nullFailed(I[52], 483, 9, "barGroupIndex");
      if (showOnRodData == null) dart.nullFailed(I[52], 484, 21, "showOnRodData");
      if (barRodIndex == null) dart.nullFailed(I[52], 485, 9, "barRodIndex");
      if (holder == null) dart.nullFailed(I[52], 486, 31, "holder");
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize, holder);
      let tooltipItem = (t45 = tooltipData, t46 = showOnBarGroup, t47 = barGroupIndex, t48 = showOnRodData, t49 = barRodIndex, t45.getTooltipItem(t46, t47, t48, t49));
      if (tooltipItem == null) {
        return;
      }
      let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text, children: tooltipItem.children});
      let tp = new text_painter.TextPainter.new({text: span, textAlign: tooltipItem.textAlign, textDirection: tooltipItem.textDirection, textScaleFactor: holder.textScale});
      tp.layout({maxWidth: tooltipData.maxContentWidth});
      let drawingTextPainter = tp;
      let textWidth = drawingTextPainter.width;
      let textHeight = dart.notNull(drawingTextPainter.height) + 4;
      let barOffset = new ui.Offset.new(groupPositions[$_get](barGroupIndex).barsX[$_get](barRodIndex), this.getPixelY(showOnRodData.y, chartUsableSize, holder));
      let tooltipWidth = dart.notNull(textWidth) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = textHeight + dart.notNull(tooltipData.tooltipPadding.vertical);
      let zeroY = this.getPixelY(0.0, chartUsableSize, holder);
      let barTopY = math.min(core.double, zeroY, barOffset.dy);
      let barBottomY = math.max(core.double, zeroY, barOffset.dy);
      let drawTooltipOnTop = tooltipData.direction == bar_chart_data.TooltipDirection.top || tooltipData.direction == bar_chart_data.TooltipDirection.auto && dart.notNull(showOnRodData.y) > 0;
      let tooltipTop = drawTooltipOnTop ? barTopY - tooltipHeight - dart.notNull(tooltipData.tooltipMargin) : barBottomY + dart.notNull(tooltipData.tooltipMargin);
      let rect = new ui.Rect.fromLTWH(dart.notNull(barOffset.dx) - tooltipWidth / 2, tooltipTop, tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint$0].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint$0]);
      let top = tooltipData.tooltipPadding.top;
      let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(tp.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(top));
      canvasWrapper.drawText(tp, drawOffset);
    }
    getExtraNeededHorizontalSpace(holder) {
      T.PaintHolderOfBarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[52], 620, 66, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededHorizontalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let leftSide = data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace(holder) {
      T.PaintHolderOfBarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[52], 643, 64, "holder");
      let data = holder.data;
      let sum = super.getExtraNeededVerticalSpace(holder);
      if (dart.test(data.titlesData.show)) {
        let bottomSide = data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
        let topSide = data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize(holder) {
      T.PaintHolderOfBarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[52], 664, 58, "holder");
      let data = holder.data;
      let sum = super.getLeftOffsetDrawSize(holder);
      let leftTitles = data.titlesData.leftTitles;
      if (dart.test(data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize(holder) {
      T.PaintHolderOfBarChartData().as(holder);
      if (holder == null) dart.nullFailed(I[52], 680, 57, "holder");
      let data = holder.data;
      let sum = super.getTopOffsetDrawSize(holder);
      let topTitles = data.titlesData.topTitles;
      if (dart.test(data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, viewSize, holder) {
      if (touchInput == null) dart.nullFailed(I[52], 700, 18, "touchInput");
      if (viewSize == null) dart.nullFailed(I[52], 701, 10, "viewSize");
      if (holder == null) dart.nullFailed(I[52], 702, 31, "holder");
      let data = holder.data;
      let targetData = holder.targetData;
      let touchedPoint = touchInput.localPosition;
      if (this[_groupBarsPosition] == null) {
        let groupsX = this[_calculateGroupsX](viewSize, data.barGroups, data.alignment, holder);
        this[_groupBarsPosition] = this[_calculateGroupAndBarsPosition](viewSize, groupsX, data.barGroups);
      }
      let chartViewSize = this.getChartUsableDrawSize(viewSize, holder);
      for (let i = 0; i < dart.notNull(dart.nullCheck(this[_groupBarsPosition])[$length]); i = i + 1) {
        let groupBarPos = dart.nullCheck(this[_groupBarsPosition])[$_get](i);
        for (let j = 0; j < dart.notNull(groupBarPos.barsX[$length]); j = j + 1) {
          let barX = groupBarPos.barsX[$_get](j);
          let barWidth = targetData.barGroups[$_get](i).barRods[$_get](j).width;
          let halfBarWidth = dart.notNull(barWidth) / 2;
          let barTopY = null;
          let barBotY = null;
          let isPositive = dart.notNull(targetData.barGroups[$_get](i).barRods[$_get](j).y) > 0;
          if (isPositive) {
            barTopY = this.getPixelY(targetData.barGroups[$_get](i).barRods[$_get](j).y, chartViewSize, holder);
            barBotY = this.getPixelY(0.0, chartViewSize, holder);
          } else {
            barTopY = this.getPixelY(0.0, chartViewSize, holder);
            barBotY = this.getPixelY(targetData.barGroups[$_get](i).barRods[$_get](j).y, chartViewSize, holder);
          }
          let backDrawBarY = this.getPixelY(targetData.barGroups[$_get](i).barRods[$_get](j).backDrawRodData.y, chartViewSize, holder);
          let touchExtraThreshold = targetData.barTouchData.touchExtraThreshold;
          let isXInTouchBounds = dart.notNull(touchedPoint.dx) <= dart.notNull(barX) + halfBarWidth + dart.notNull(touchExtraThreshold.right) && dart.notNull(touchedPoint.dx) >= dart.notNull(barX) - halfBarWidth - dart.notNull(touchExtraThreshold.left);
          let isYInBarBounds = dart.notNull(touchedPoint.dy) <= dart.notNull(barBotY) + dart.notNull(touchExtraThreshold.bottom) && dart.notNull(touchedPoint.dy) >= dart.notNull(barTopY) - dart.notNull(touchExtraThreshold.top);
          let isYInBarBackDrawBounds = null;
          if (isPositive) {
            isYInBarBackDrawBounds = dart.notNull(touchedPoint.dy) <= dart.notNull(barBotY) + dart.notNull(touchExtraThreshold.bottom) && dart.notNull(touchedPoint.dy) >= dart.notNull(backDrawBarY) - dart.notNull(touchExtraThreshold.top);
          } else {
            isYInBarBackDrawBounds = dart.notNull(touchedPoint.dy) >= dart.notNull(barTopY) - dart.notNull(touchExtraThreshold.top) && dart.notNull(touchedPoint.dy) <= dart.notNull(backDrawBarY) + dart.notNull(touchExtraThreshold.bottom);
          }
          let isYInTouchBounds = dart.test(targetData.barTouchData.allowTouchBarBackDraw) && dart.test(isYInBarBackDrawBounds) || isYInBarBounds;
          if (isXInTouchBounds && isYInTouchBounds) {
            let nearestGroup = targetData.barGroups[$_get](i);
            let nearestBarRod = nearestGroup.barRods[$_get](j);
            let nearestSpot = new axis_chart_data.FlSpot.new(nearestGroup.x[$toDouble](), nearestBarRod.y);
            let nearestSpotPos = new ui.Offset.new(barX, this.getPixelY(nearestSpot.y, chartViewSize, holder));
            let touchedStackIndex = -1;
            let touchedStack = null;
            for (let stackIndex = 0; stackIndex < dart.notNull(nearestBarRod.rodStackItems[$length]); stackIndex = stackIndex + 1) {
              let stackItem = nearestBarRod.rodStackItems[$_get](stackIndex);
              let fromPixel = this.getPixelY(stackItem.fromY, chartViewSize, holder);
              let toPixel = this.getPixelY(stackItem.toY, chartViewSize, holder);
              if (dart.notNull(touchedPoint.dy) <= dart.notNull(fromPixel) && dart.notNull(touchedPoint.dy) >= dart.notNull(toPixel)) {
                touchedStackIndex = stackIndex;
                touchedStack = stackItem;
                break;
              }
            }
            return new bar_chart_data.BarTouchedSpot.new(nearestGroup, i, nearestBarRod, j, touchedStack, touchedStackIndex, nearestSpot, nearestSpotPos);
          }
        }
      }
      return null;
    }
  };
  (bar_chart_painter.BarChartPainter.new = function() {
    let t43, t43$;
    this[__BarChartPainter__barPaint] = null;
    this[__BarChartPainter__bgTouchTooltipPaint] = null;
    this[_groupBarsPosition] = null;
    bar_chart_painter.BarChartPainter.__proto__.new.call(this);
    this[_barPaint$] = (t43 = ui.Paint.new(), (() => {
      t43.style = ui.PaintingStyle.fill;
      return t43;
    })());
    this[_bgTouchTooltipPaint$0] = (t43$ = ui.Paint.new(), (() => {
      t43$.style = ui.PaintingStyle.fill;
      t43$.color = colors$.Colors.white;
      return t43$;
    })());
  }).prototype = bar_chart_painter.BarChartPainter.prototype;
  dart.addTypeTests(bar_chart_painter.BarChartPainter);
  dart.addTypeCaches(bar_chart_painter.BarChartPainter);
  dart.setMethodSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getMethods(bar_chart_painter.BarChartPainter.__proto__),
    [_calculateGroupsX]: dart.fnType(core.List$(core.double), [ui.Size, core.List$(bar_chart_data.BarChartGroupData), bar_chart_data.BarChartAlignment, base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)]),
    [_calculateGroupAndBarsPosition]: dart.fnType(core.List$(bar_chart_painter._GroupBarsPosition), [ui.Size, core.List$(core.double), core.List$(bar_chart_data.BarChartGroupData)]),
    [_drawBars]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, core.List$(bar_chart_painter._GroupBarsPosition), base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)]),
    [_drawTitles$1]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, core.List$(bar_chart_painter._GroupBarsPosition), base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)]),
    [_drawTouchTooltip$0]: dart.fnType(dart.void, [canvas_wrapper.CanvasWrapper, core.List$(bar_chart_painter._GroupBarsPosition), bar_chart_data.BarTouchTooltipData, bar_chart_data.BarChartGroupData, core.int, bar_chart_data.BarChartRodData, core.int, base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)]),
    handleTouch: dart.fnType(dart.nullable(bar_chart_data.BarTouchedSpot), [events.PointerEvent, ui.Size, base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)])
  }));
  dart.setGetterSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getGetters(bar_chart_painter.BarChartPainter.__proto__),
    [_barPaint$]: ui.Paint,
    [_bgTouchTooltipPaint$0]: ui.Paint
  }));
  dart.setSetterSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getSetters(bar_chart_painter.BarChartPainter.__proto__),
    [_barPaint$]: ui.Paint,
    [_bgTouchTooltipPaint$0]: ui.Paint
  }));
  dart.setLibraryUri(bar_chart_painter.BarChartPainter, I[53]);
  dart.setFieldSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getFields(bar_chart_painter.BarChartPainter.__proto__),
    [__BarChartPainter__barPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [__BarChartPainter__bgTouchTooltipPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [_groupBarsPosition]: dart.fieldType(dart.nullable(core.List$(bar_chart_painter._GroupBarsPosition)))
  }));
  bar_chart_painter._GroupBarsPosition = class _GroupBarsPosition extends core.Object {};
  (bar_chart_painter._GroupBarsPosition.new = function(groupX, barsX) {
    if (groupX == null) dart.nullFailed(I[52], 791, 27, "groupX");
    if (barsX == null) dart.nullFailed(I[52], 791, 40, "barsX");
    this.groupX = groupX;
    this.barsX = barsX;
    ;
  }).prototype = bar_chart_painter._GroupBarsPosition.prototype;
  dart.addTypeTests(bar_chart_painter._GroupBarsPosition);
  dart.addTypeCaches(bar_chart_painter._GroupBarsPosition);
  dart.setLibraryUri(bar_chart_painter._GroupBarsPosition, I[53]);
  dart.setFieldSignature(bar_chart_painter._GroupBarsPosition, () => ({
    __proto__: dart.getFields(bar_chart_painter._GroupBarsPosition.__proto__),
    groupX: dart.finalFieldType(core.double),
    barsX: dart.finalFieldType(core.List$(core.double))
  }));
  var show$9 = dart.privateName(base_chart_data, "FlBorderData.show");
  var border$ = dart.privateName(base_chart_data, "FlBorderData.border");
  const Object_EquatableMixin$36$40 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$40.new = function() {
  }).prototype = Object_EquatableMixin$36$40.prototype;
  dart.applyMixin(Object_EquatableMixin$36$40, equatable_mixin.EquatableMixin);
  base_chart_data.FlBorderData = class FlBorderData extends Object_EquatableMixin$36$40 {
    get show() {
      return this[show$9];
    }
    set show(value) {
      super.show = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      this[border$] = value;
    }
    static lerp(a, b, t) {
      if (a == null) dart.nullFailed(I[7], 55, 41, "a");
      if (b == null) dart.nullFailed(I[7], 55, 57, "b");
      if (t == null) dart.nullFailed(I[7], 55, 67, "t");
      return new base_chart_data.FlBorderData.new({show: b.show, border: box_border.Border.lerp(a.border, b.border, t)});
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.show, this.border]);
    }
  };
  (base_chart_data.FlBorderData.new = function(opts) {
    let t45, t45$;
    let show = opts && 'show' in opts ? opts.show : null;
    let border = opts && 'border' in opts ? opts.border : null;
    this[show$9] = (t45 = show, t45 == null ? true : t45);
    this[border$] = (t45$ = border, t45$ == null ? box_border.Border.all({color: colors$.Colors.black, width: 1.0, style: borders.BorderStyle.solid}) : t45$);
    ;
  }).prototype = base_chart_data.FlBorderData.prototype;
  dart.addTypeTests(base_chart_data.FlBorderData);
  dart.addTypeCaches(base_chart_data.FlBorderData);
  dart.setGetterSignature(base_chart_data.FlBorderData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlBorderData.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(base_chart_data.FlBorderData, I[8]);
  dart.setFieldSignature(base_chart_data.FlBorderData, () => ({
    __proto__: dart.getFields(base_chart_data.FlBorderData.__proto__),
    show: dart.finalFieldType(core.bool),
    border: dart.fieldType(box_border.Border)
  }));
  var top$ = dart.privateName(base_chart_data, "FlClipData.top");
  var bottom$ = dart.privateName(base_chart_data, "FlClipData.bottom");
  var left$ = dart.privateName(base_chart_data, "FlClipData.left");
  var right$ = dart.privateName(base_chart_data, "FlClipData.right");
  const Object_EquatableMixin$36$41 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$41.new = function() {
  }).prototype = Object_EquatableMixin$36$41.prototype;
  dart.applyMixin(Object_EquatableMixin$36$41, equatable_mixin.EquatableMixin);
  base_chart_data.FlClipData = class FlClipData extends Object_EquatableMixin$36$41 {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get any() {
      return dart.test(this.top) || dart.test(this.bottom) || dart.test(this.left) || dart.test(this.right);
    }
    get props() {
      return T.JSArrayOfObjectN().of([this.top, this.bottom, this.left, this.right]);
    }
  };
  (base_chart_data.FlClipData.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : null;
    if (top == null) dart.nullFailed(I[7], 98, 19, "top");
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    if (bottom == null) dart.nullFailed(I[7], 99, 19, "bottom");
    let left = opts && 'left' in opts ? opts.left : null;
    if (left == null) dart.nullFailed(I[7], 100, 19, "left");
    let right = opts && 'right' in opts ? opts.right : null;
    if (right == null) dart.nullFailed(I[7], 101, 19, "right");
    this[top$] = top;
    this[bottom$] = bottom;
    this[left$] = left;
    this[right$] = right;
    ;
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.all = function() {
    base_chart_data.FlClipData.new.call(this, {top: true, bottom: true, left: true, right: true});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.vertical = function() {
    base_chart_data.FlClipData.new.call(this, {top: true, bottom: true, left: false, right: false});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.horizontal = function() {
    base_chart_data.FlClipData.new.call(this, {top: false, bottom: false, left: true, right: true});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.none = function() {
    base_chart_data.FlClipData.new.call(this, {top: false, bottom: false, left: false, right: false});
  }).prototype = base_chart_data.FlClipData.prototype;
  dart.addTypeTests(base_chart_data.FlClipData);
  dart.addTypeCaches(base_chart_data.FlClipData);
  dart.setGetterSignature(base_chart_data.FlClipData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlClipData.__proto__),
    any: core.bool,
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(base_chart_data.FlClipData, I[8]);
  dart.setFieldSignature(base_chart_data.FlClipData, () => ({
    __proto__: dart.getFields(base_chart_data.FlClipData.__proto__),
    top: dart.finalFieldType(core.bool),
    bottom: dart.finalFieldType(core.bool),
    left: dart.finalFieldType(core.bool),
    right: dart.finalFieldType(core.bool)
  }));
  base_chart_data.defaultGetTitle = function defaultGetTitle(value) {
    if (value == null) dart.nullFailed(I[7], 130, 31, "value");
    return utils.formatNumber(value);
  };
  base_chart_data.defaultGetTitleTextStyle = function defaultGetTitleTextStyle(value) {
    if (value == null) dart.nullFailed(I[7], 141, 43, "value");
    return C[108] || CT.C108;
  };
  var canvas$ = dart.privateName(canvas_wrapper, "CanvasWrapper.canvas");
  var size$1 = dart.privateName(canvas_wrapper, "CanvasWrapper.size");
  canvas_wrapper.CanvasWrapper = class CanvasWrapper extends core.Object {
    get canvas() {
      return this[canvas$];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    drawRRect(rrect, paint) {
      if (rrect == null) dart.nullFailed(I[54], 20, 24, "rrect");
      if (paint == null) dart.nullFailed(I[54], 20, 37, "paint");
      return this.canvas.drawRRect(rrect, paint);
    }
    save() {
      return this.canvas.save();
    }
    restore() {
      return this.canvas.restore();
    }
    clipRect(rect, opts) {
      if (rect == null) dart.nullFailed(I[54], 29, 22, "rect");
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : C[134] || CT.C134;
      if (clipOp == null) dart.nullFailed(I[54], 29, 36, "clipOp");
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (doAntiAlias == null) dart.nullFailed(I[54], 29, 68, "doAntiAlias");
      return this.canvas.clipRect(rect, {clipOp: clipOp, doAntiAlias: doAntiAlias});
    }
    translate(dx, dy) {
      if (dx == null) dart.nullFailed(I[54], 33, 25, "dx");
      if (dy == null) dart.nullFailed(I[54], 33, 36, "dy");
      return this.canvas.translate(dx, dy);
    }
    rotate(radius) {
      if (radius == null) dart.nullFailed(I[54], 36, 22, "radius");
      return this.canvas.rotate(radius);
    }
    drawPath(path, paint) {
      if (path == null) dart.nullFailed(I[54], 39, 22, "path");
      if (paint == null) dart.nullFailed(I[54], 39, 34, "paint");
      return this.canvas.drawPath(path, paint);
    }
    saveLayer(bounds, paint) {
      if (bounds == null) dart.nullFailed(I[54], 42, 23, "bounds");
      if (paint == null) dart.nullFailed(I[54], 42, 37, "paint");
      return this.canvas.saveLayer(bounds, paint);
    }
    drawPicture(picture) {
      if (picture == null) dart.nullFailed(I[54], 45, 28, "picture");
      return this.canvas.drawPicture(picture);
    }
    drawImage(image, offset, paint) {
      if (image == null) dart.nullFailed(I[54], 48, 24, "image");
      if (offset == null) dart.nullFailed(I[54], 48, 38, "offset");
      if (paint == null) dart.nullFailed(I[54], 48, 52, "paint");
      return this.canvas.drawImage(image, offset, paint);
    }
    drawRect(rect, paint) {
      if (rect == null) dart.nullFailed(I[54], 51, 22, "rect");
      if (paint == null) dart.nullFailed(I[54], 51, 34, "paint");
      return this.canvas.drawRect(rect, paint);
    }
    drawLine(p1, p2, paint) {
      if (p1 == null) dart.nullFailed(I[54], 54, 24, "p1");
      if (p2 == null) dart.nullFailed(I[54], 54, 35, "p2");
      if (paint == null) dart.nullFailed(I[54], 54, 45, "paint");
      return this.canvas.drawLine(p1, p2, paint);
    }
    drawCircle(center, radius, paint) {
      if (center == null) dart.nullFailed(I[54], 57, 26, "center");
      if (radius == null) dart.nullFailed(I[54], 57, 41, "radius");
      if (paint == null) dart.nullFailed(I[54], 57, 55, "paint");
      return this.canvas.drawCircle(center, radius, paint);
    }
    drawArc(rect, startAngle, sweepAngle, useCenter, paint) {
      if (rect == null) dart.nullFailed(I[54], 61, 21, "rect");
      if (startAngle == null) dart.nullFailed(I[54], 61, 34, "startAngle");
      if (sweepAngle == null) dart.nullFailed(I[54], 61, 53, "sweepAngle");
      if (useCenter == null) dart.nullFailed(I[54], 61, 70, "useCenter");
      if (paint == null) dart.nullFailed(I[54], 61, 87, "paint");
      return this.canvas.drawArc(rect, startAngle, sweepAngle, useCenter, paint);
    }
    drawText(tp, offset) {
      if (tp == null) dart.nullFailed(I[54], 67, 29, "tp");
      if (offset == null) dart.nullFailed(I[54], 67, 40, "offset");
      return tp.paint(this.canvas, offset);
    }
    drawDot(painter, spot, offset) {
      if (painter == null) dart.nullFailed(I[54], 73, 29, "painter");
      if (spot == null) dart.nullFailed(I[54], 73, 45, "spot");
      if (offset == null) dart.nullFailed(I[54], 73, 58, "offset");
      painter.draw(this.canvas, spot, offset);
    }
  };
  (canvas_wrapper.CanvasWrapper.new = function(canvas, size) {
    if (canvas == null) dart.nullFailed(I[54], 15, 10, "canvas");
    if (size == null) dart.nullFailed(I[54], 16, 10, "size");
    this[canvas$] = canvas;
    this[size$1] = size;
    ;
  }).prototype = canvas_wrapper.CanvasWrapper.prototype;
  dart.addTypeTests(canvas_wrapper.CanvasWrapper);
  dart.addTypeCaches(canvas_wrapper.CanvasWrapper);
  dart.setMethodSignature(canvas_wrapper.CanvasWrapper, () => ({
    __proto__: dart.getMethods(canvas_wrapper.CanvasWrapper.__proto__),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    clipRect: dart.fnType(dart.void, [ui.Rect], {clipOp: ui.ClipOp, doAntiAlias: core.bool}, {}),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool, ui.Paint]),
    drawText: dart.fnType(dart.void, [text_painter.TextPainter, ui.Offset]),
    drawDot: dart.fnType(dart.void, [line_chart_data.FlDotPainter, axis_chart_data.FlSpot, ui.Offset])
  }));
  dart.setLibraryUri(canvas_wrapper.CanvasWrapper, I[55]);
  dart.setFieldSignature(canvas_wrapper.CanvasWrapper, () => ({
    __proto__: dart.getFields(canvas_wrapper.CanvasWrapper.__proto__),
    canvas: dart.finalFieldType(ui.Canvas),
    size: dart.finalFieldType(ui.Size)
  }));
  var data$7 = dart.privateName(base_chart_painter, "PaintHolder.data");
  var targetData$3 = dart.privateName(base_chart_painter, "PaintHolder.targetData");
  var textScale$ = dart.privateName(base_chart_painter, "PaintHolder.textScale");
  const _is_PaintHolder_default = Symbol('_is_PaintHolder_default');
  base_chart_painter.PaintHolder$ = dart.generic(Data => {
    class PaintHolder extends core.Object {
      get data() {
        return this[data$7];
      }
      set data(value) {
        super.data = value;
      }
      get targetData() {
        return this[targetData$3];
      }
      set targetData(value) {
        super.targetData = value;
      }
      get textScale() {
        return this[textScale$];
      }
      set textScale(value) {
        super.textScale = value;
      }
    }
    (PaintHolder.new = function(data, targetData, textScale) {
      if (data == null) dart.nullFailed(I[2], 121, 20, "data");
      if (targetData == null) dart.nullFailed(I[2], 121, 31, "targetData");
      if (textScale == null) dart.nullFailed(I[2], 121, 48, "textScale");
      this[data$7] = data;
      this[targetData$3] = targetData;
      this[textScale$] = textScale;
      ;
    }).prototype = PaintHolder.prototype;
    dart.addTypeTests(PaintHolder);
    PaintHolder.prototype[_is_PaintHolder_default] = true;
    dart.addTypeCaches(PaintHolder);
    dart.setLibraryUri(PaintHolder, I[3]);
    dart.setFieldSignature(PaintHolder, () => ({
      __proto__: dart.getFields(PaintHolder.__proto__),
      data: dart.finalFieldType(Data),
      targetData: dart.finalFieldType(Data),
      textScale: dart.finalFieldType(core.double)
    }));
    return PaintHolder;
  });
  base_chart_painter.PaintHolder = base_chart_painter.PaintHolder$();
  dart.addTypeTests(base_chart_painter.PaintHolder, _is_PaintHolder_default);
  var data$8 = dart.privateName(bar_chart_renderer, "BarChartLeaf.data");
  var targetData$4 = dart.privateName(bar_chart_renderer, "BarChartLeaf.targetData");
  var touchCallback$8 = dart.privateName(bar_chart_renderer, "BarChartLeaf.touchCallback");
  bar_chart_renderer.BarChartLeaf = class BarChartLeaf extends framework.LeafRenderObjectWidget {
    get data() {
      return this[data$8];
    }
    set data(value) {
      super.data = value;
    }
    get targetData() {
      return this[targetData$4];
    }
    set targetData(value) {
      super.targetData = value;
    }
    get touchCallback() {
      return this[touchCallback$8];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[56], 21, 50, "context");
      return new bar_chart_renderer.RenderBarChart.new(this.data, this.targetData, media_query.MediaQuery.of(context).textScaleFactor, this.touchCallback);
    }
    updateRenderObject(context, renderObject) {
      let t45;
      if (context == null) dart.nullFailed(I[56], 25, 40, "context");
      bar_chart_renderer.RenderBarChart.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[56], 25, 64, "renderObject");
      t45 = renderObject;
      (() => {
        t45.data = this.data;
        t45.targetData = this.targetData;
        t45.textScale = media_query.MediaQuery.of(context).textScaleFactor;
        t45.touchCallback = this.touchCallback;
        return t45;
      })();
    }
  };
  (bar_chart_renderer.BarChartLeaf.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[56], 13, 47, "data");
    let targetData = opts && 'targetData' in opts ? opts.targetData : null;
    if (targetData == null) dart.nullFailed(I[56], 13, 67, "targetData");
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$8] = data;
    this[targetData$4] = targetData;
    this[touchCallback$8] = touchCallback;
    bar_chart_renderer.BarChartLeaf.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = bar_chart_renderer.BarChartLeaf.prototype;
  dart.addTypeTests(bar_chart_renderer.BarChartLeaf);
  dart.addTypeCaches(bar_chart_renderer.BarChartLeaf);
  dart.setMethodSignature(bar_chart_renderer.BarChartLeaf, () => ({
    __proto__: dart.getMethods(bar_chart_renderer.BarChartLeaf.__proto__),
    createRenderObject: dart.fnType(bar_chart_renderer.RenderBarChart, [framework.BuildContext])
  }));
  dart.setLibraryUri(bar_chart_renderer.BarChartLeaf, I[57]);
  dart.setFieldSignature(bar_chart_renderer.BarChartLeaf, () => ({
    __proto__: dart.getFields(bar_chart_renderer.BarChartLeaf.__proto__),
    data: dart.finalFieldType(bar_chart_data.BarChartData),
    targetData: dart.finalFieldType(bar_chart_data.BarChartData),
    touchCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [bar_chart_data.BarTouchResponse])))
  }));
  var _painter$2 = dart.privateName(bar_chart_renderer, "_painter");
  var _lastTouchedSpot$1 = dart.privateName(bar_chart_renderer, "_lastTouchedSpot");
  var _data$2 = dart.privateName(bar_chart_renderer, "_data");
  var _targetData$2 = dart.privateName(bar_chart_renderer, "_targetData");
  var _textScale$2 = dart.privateName(bar_chart_renderer, "_textScale");
  var _touchCallback$2 = dart.privateName(bar_chart_renderer, "_touchCallback");
  bar_chart_renderer.RenderBarChart = class RenderBarChart extends box.RenderBox {
    get data() {
      return this[_data$2];
    }
    set data(value) {
      if (value == null) dart.nullFailed(I[56], 45, 25, "value");
      if (dart.equals(this[_data$2], value)) return;
      this[_data$2] = value;
      this.markNeedsPaint();
    }
    get targetData() {
      return this[_targetData$2];
    }
    set targetData(value) {
      if (value == null) dart.nullFailed(I[56], 53, 31, "value");
      if (dart.equals(this[_targetData$2], value)) return;
      this[_targetData$2] = value;
      this.markNeedsPaint();
    }
    get textScale() {
      return this[_textScale$2];
    }
    set textScale(value) {
      if (value == null) dart.nullFailed(I[56], 61, 24, "value");
      if (this[_textScale$2] == value) return;
      this[_textScale$2] = value;
      this.markNeedsPaint();
    }
    set touchCallback(value) {
      this[_touchCallback$2] = value;
    }
    get paintHolder() {
      return new (T.PaintHolderOfBarChartData()).new(this.data, this.targetData, this.textScale);
    }
    performLayout() {
      this.size = this.computeDryLayout(this.constraints);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[56], 86, 40, "constraints");
      return new ui.Size.new(constraints.maxWidth, constraints.maxHeight);
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[56], 91, 30, "context");
      if (offset == null) dart.nullFailed(I[56], 91, 46, "offset");
      let canvas = context.canvas;
      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      this[_painter$2].paint(new canvas_wrapper.CanvasWrapper.new(canvas, this.size), this.paintHolder);
      canvas.restore();
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[56], 100, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      let t45, t45$;
      if (event == null) dart.nullFailed(I[56], 103, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[56], 103, 66, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[56], 104, 12, "debugHandleEvent(event, entry)");
      if (this[_touchCallback$2] == null) {
        return;
      }
      let response = new bar_chart_data.BarTouchResponse.new(null, event, false);
      let touchedSpot = this[_painter$2].handleTouch(event, this.size, this.paintHolder);
      if (touchedSpot == null) {
        t45 = this[_touchCallback$2];
        t45 == null ? null : t45(response);
        return;
      }
      response = response.copyWith({spot: touchedSpot});
      if (events.PointerDownEvent.is(event)) {
        this[_lastTouchedSpot$1] = touchedSpot;
      } else if (events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_lastTouchedSpot$1], touchedSpot)) {
          response = response.copyWith({clickHappened: true});
        }
        this[_lastTouchedSpot$1] = null;
      }
      t45$ = this[_touchCallback$2];
      t45$ == null ? null : t45$(response);
    }
  };
  (bar_chart_renderer.RenderBarChart.new = function(data, targetData, textScale, touchCallback) {
    if (data == null) dart.nullFailed(I[56], 37, 20, "data");
    if (targetData == null) dart.nullFailed(I[56], 37, 39, "targetData");
    if (textScale == null) dart.nullFailed(I[56], 37, 58, "textScale");
    this[_painter$2] = new bar_chart_painter.BarChartPainter.new();
    this[_lastTouchedSpot$1] = null;
    this[_data$2] = data;
    this[_targetData$2] = targetData;
    this[_textScale$2] = textScale;
    this[_touchCallback$2] = touchCallback;
    bar_chart_renderer.RenderBarChart.__proto__.new.call(this);
    ;
  }).prototype = bar_chart_renderer.RenderBarChart.prototype;
  dart.addTypeTests(bar_chart_renderer.RenderBarChart);
  dart.addTypeCaches(bar_chart_renderer.RenderBarChart);
  dart.setGetterSignature(bar_chart_renderer.RenderBarChart, () => ({
    __proto__: dart.getGetters(bar_chart_renderer.RenderBarChart.__proto__),
    data: bar_chart_data.BarChartData,
    targetData: bar_chart_data.BarChartData,
    textScale: core.double,
    paintHolder: base_chart_painter.PaintHolder$(bar_chart_data.BarChartData)
  }));
  dart.setSetterSignature(bar_chart_renderer.RenderBarChart, () => ({
    __proto__: dart.getSetters(bar_chart_renderer.RenderBarChart.__proto__),
    data: bar_chart_data.BarChartData,
    targetData: bar_chart_data.BarChartData,
    textScale: core.double,
    touchCallback: dart.nullable(dart.fnType(dart.void, [bar_chart_data.BarTouchResponse]))
  }));
  dart.setLibraryUri(bar_chart_renderer.RenderBarChart, I[57]);
  dart.setFieldSignature(bar_chart_renderer.RenderBarChart, () => ({
    __proto__: dart.getFields(bar_chart_renderer.RenderBarChart.__proto__),
    [_data$2]: dart.fieldType(bar_chart_data.BarChartData),
    [_targetData$2]: dart.fieldType(bar_chart_data.BarChartData),
    [_textScale$2]: dart.fieldType(core.double),
    [_touchCallback$2]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [bar_chart_data.BarTouchResponse]))),
    [_painter$2]: dart.finalFieldType(bar_chart_painter.BarChartPainter),
    [_lastTouchedSpot$1]: dart.fieldType(dart.nullable(bar_chart_data.BarTouchedSpot))
  }));
  var data$9 = dart.privateName(bar_chart, "BarChart.data");
  bar_chart.BarChart = class BarChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$9];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new bar_chart._BarChartState.new();
    }
  };
  (bar_chart.BarChart.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[58], 17, 10, "data");
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    if (swapAnimationDuration == null) dart.nullFailed(I[58], 18, 14, "swapAnimationDuration");
    let swapAnimationCurve = opts && 'swapAnimationCurve' in opts ? opts.swapAnimationCurve : C[3] || CT.C3;
    if (swapAnimationCurve == null) dart.nullFailed(I[58], 19, 11, "swapAnimationCurve");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$9] = data;
    bar_chart.BarChart.__proto__.new.call(this, {duration: swapAnimationDuration, curve: swapAnimationCurve, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = bar_chart.BarChart.prototype;
  dart.addTypeTests(bar_chart.BarChart);
  dart.addTypeCaches(bar_chart.BarChart);
  dart.setMethodSignature(bar_chart.BarChart, () => ({
    __proto__: dart.getMethods(bar_chart.BarChart.__proto__),
    createState: dart.fnType(bar_chart._BarChartState, [])
  }));
  dart.setLibraryUri(bar_chart.BarChart, I[59]);
  dart.setFieldSignature(bar_chart.BarChart, () => ({
    __proto__: dart.getFields(bar_chart.BarChart.__proto__),
    data: dart.finalFieldType(bar_chart_data.BarChartData)
  }));
  var _barChartDataTween = dart.privateName(bar_chart, "_barChartDataTween");
  var _showingTouchedTooltips$ = dart.privateName(bar_chart, "_showingTouchedTooltips");
  var _getData$1 = dart.privateName(bar_chart, "_getData");
  var _withTouchedIndicators$0 = dart.privateName(bar_chart, "_withTouchedIndicators");
  var _handleBuiltInTouch$0 = dart.privateName(bar_chart, "_handleBuiltInTouch");
  bar_chart._BarChartState = class _BarChartState extends implicit_animations.AnimatedWidgetBaseState$(bar_chart.BarChart) {
    build(context) {
      if (context == null) dart.nullFailed(I[58], 35, 29, "context");
      let showingData = this[_getData$1]();
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(details => {
          if (details == null) dart.nullFailed(I[58], 42, 26, "details");
        }, T.LongPressStartDetailsTovoid()), child: new bar_chart_renderer.BarChartLeaf.new({data: this[_withTouchedIndicators$0](dart.nullCheck(this[_barChartDataTween]).evaluate(this.animation)), targetData: this[_withTouchedIndicators$0](showingData), touchCallback: dart.bind(this, _handleBuiltInTouch$0), $creationLocationd_0dea112b090073317d4: C[135] || CT.C135}), $creationLocationd_0dea112b090073317d4: C[140] || CT.C140});
    }
    [_withTouchedIndicators$0](barChartData) {
      if (barChartData == null) dart.nullFailed(I[58], 51, 52, "barChartData");
      if (!dart.test(barChartData.barTouchData.enabled) || !dart.test(barChartData.barTouchData.handleBuiltInTouches)) {
        return barChartData;
      }
      let newGroups = T.JSArrayOfBarChartGroupData().of([]);
      for (let i = 0; i < dart.notNull(barChartData.barGroups[$length]); i = i + 1) {
        let group = barChartData.barGroups[$_get](i);
        newGroups[$add](group.copyWith({showingTooltipIndicators: this[_showingTouchedTooltips$][$_get](i)}));
      }
      return barChartData.copyWith({barGroups: newGroups});
    }
    [_getData$1]() {
      let barTouchData = this.widget.data.barTouchData;
      if (dart.test(barTouchData.enabled) && dart.test(barTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({barTouchData: this.widget.data.barTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch$0)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch$0](touchResponse) {
      let t45;
      if (touchResponse == null) dart.nullFailed(I[58], 82, 45, "touchResponse");
      t45 = this.widget.data.barTouchData.touchCallback;
      t45 == null ? null : t45(touchResponse);
      if (events.PointerDownEvent.is(touchResponse.touchInput) || events.PointerMoveEvent.is(touchResponse.touchInput) || events.PointerHoverEvent.is(touchResponse.touchInput)) {
        this.setState(dart.fn(() => {
          let spot = touchResponse.spot;
          if (spot == null) {
            this[_showingTouchedTooltips$][$clear]();
            return;
          }
          let groupIndex = spot.touchedBarGroupIndex;
          let rodIndex = spot.touchedRodDataIndex;
          this[_showingTouchedTooltips$][$clear]();
          this[_showingTouchedTooltips$][$_set](groupIndex, T.JSArrayOfint().of([rodIndex]));
        }, T.VoidTovoid()));
      } else {
        this.setState(dart.fn(() => {
          this[_showingTouchedTooltips$][$clear]();
        }, T.VoidTovoid()));
      }
    }
    forEachTween(visitor) {
      if (visitor == null) dart.nullFailed(I[58], 108, 21, "visitor");
      this[_barChartDataTween] = bar_chart_data.BarChartDataTween.as(visitor(this[_barChartDataTween], this.widget.data, dart.fn(value => new bar_chart_data.BarChartDataTween.new({begin: bar_chart_data.BarChartData.as(value), end: this.widget.data}), T.dynamicToBarChartDataTween())));
    }
  };
  (bar_chart._BarChartState.new = function() {
    this[_barChartDataTween] = null;
    this[_showingTouchedTooltips$] = new (T.IdentityMapOfint$ListOfint()).new();
    bar_chart._BarChartState.__proto__.new.call(this);
    ;
  }).prototype = bar_chart._BarChartState.prototype;
  dart.addTypeTests(bar_chart._BarChartState);
  dart.addTypeCaches(bar_chart._BarChartState);
  dart.setMethodSignature(bar_chart._BarChartState, () => ({
    __proto__: dart.getMethods(bar_chart._BarChartState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_withTouchedIndicators$0]: dart.fnType(bar_chart_data.BarChartData, [bar_chart_data.BarChartData]),
    [_getData$1]: dart.fnType(bar_chart_data.BarChartData, []),
    [_handleBuiltInTouch$0]: dart.fnType(dart.void, [bar_chart_data.BarTouchResponse]),
    forEachTween: dart.fnType(dart.void, [dart.fnType(dart.nullable(tween.Tween), [dart.nullable(tween.Tween), dart.dynamic, dart.fnType(tween.Tween, [dart.dynamic])])])
  }));
  dart.setLibraryUri(bar_chart._BarChartState, I[59]);
  dart.setFieldSignature(bar_chart._BarChartState, () => ({
    __proto__: dart.getFields(bar_chart._BarChartState.__proto__),
    [_barChartDataTween]: dart.fieldType(dart.nullable(bar_chart_data.BarChartDataTween)),
    [_showingTouchedTooltips$]: dart.finalFieldType(core.Map$(core.int, core.List$(core.int)))
  }));
  dart.trackLibraries("packages/fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart", {
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart": scatter_chart_painter,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_renderer.dart": scatter_chart_renderer,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart.dart": scatter_chart,
    "package:fl_chart/src/chart/radar_chart/radar_chart_painter.dart": radar_chart_painter,
    "package:fl_chart/src/chart/radar_chart/radar_chart_renderer.dart": radar_chart_renderer,
    "package:fl_chart/src/chart/radar_chart/radar_chart.dart": radar_chart,
    "package:fl_chart/src/chart/pie_chart/pie_chart_data.dart": pie_chart_data,
    "package:fl_chart/src/chart/pie_chart/pie_chart_painter.dart": pie_chart_painter,
    "package:fl_chart/src/chart/pie_chart/pie_chart_renderer.dart": pie_chart_renderer,
    "package:fl_chart/src/chart/pie_chart/pie_chart.dart": pie_chart,
    "package:fl_chart/src/chart/bar_chart/bar_chart_extensions.dart": bar_chart_extensions,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_helper.dart": scatter_chart_helper,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_data.dart": scatter_chart_data,
    "package:fl_chart/src/chart/radar_chart/radar_extension.dart": radar_extension,
    "package:fl_chart/src/chart/radar_chart/radar_chart_data.dart": radar_chart_data,
    "package:fl_chart/src/utils/lerp.dart": lerp,
    "package:fl_chart/src/chart/line_chart/line_chart_renderer.dart": line_chart_renderer,
    "package:fl_chart/src/chart/line_chart/line_chart.dart": line_chart,
    "package:fl_chart/src/chart/line_chart/line_chart_data.dart": line_chart_data,
    "package:fl_chart/src/chart/line_chart/line_chart_helper.dart": line_chart_helper,
    "package:fl_chart/src/extensions/canvas_extension.dart": canvas_extension,
    "package:fl_chart/src/chart/line_chart/line_chart_painter.dart": line_chart_painter,
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_painter.dart": axis_chart_painter,
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_data.dart": axis_chart_data,
    "package:fl_chart/src/chart/bar_chart/bar_chart_helper.dart": bar_chart_helper,
    "package:fl_chart/src/chart/bar_chart/bar_chart_data.dart": bar_chart_data,
    "package:fl_chart/src/chart/bar_chart/bar_chart_painter.dart": bar_chart_painter,
    "package:fl_chart/src/chart/base/base_chart/base_chart_data.dart": base_chart_data,
    "package:fl_chart/src/utils/canvas_wrapper.dart": canvas_wrapper,
    "package:fl_chart/src/chart/base/base_chart/base_chart_painter.dart": base_chart_painter,
    "package:fl_chart/src/chart/bar_chart/bar_chart_renderer.dart": bar_chart_renderer,
    "package:fl_chart/src/chart/bar_chart/bar_chart.dart": bar_chart,
    "package:fl_chart/fl_chart.dart": fl_chart
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../base/base_chart/base_chart_painter.dart","../base/axis_chart/axis_chart_painter.dart","../base/base_chart/base_chart_data.dart","../base/axis_chart/axis_chart_data.dart","scatter_chart_data.dart","scatter_chart_painter.dart","scatter_chart_renderer.dart","scatter_chart.dart","../radar_chart/radar_chart_data.dart","../radar_chart/radar_chart_painter.dart","../radar_chart/radar_chart_renderer.dart","../radar_chart/radar_chart.dart","../pie_chart/pie_chart_data.dart","../pie_chart/pie_chart_painter.dart","../pie_chart/pie_chart_renderer.dart","../pie_chart/pie_chart.dart","../bar_chart/bar_chart_extensions.dart","scatter_chart_helper.dart","../radar_chart/radar_extension.dart","../../utils/lerp.dart","../line_chart/line_chart_renderer.dart","../line_chart/line_chart.dart","../line_chart/line_chart_data.dart","../line_chart/line_chart_helper.dart","../../extensions/canvas_extension.dart","../line_chart/line_chart_painter.dart","../bar_chart/bar_chart_helper.dart","../bar_chart/bar_chart_data.dart","../bar_chart/bar_chart_painter.dart","../../utils/canvas_wrapper.dart","../bar_chart/bar_chart_renderer.dart","../bar_chart/bar_chart.dart"],"names":[],"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","file":"../../../../../../../../../packages/fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart.lib.js"}');
  // Exports:
  return {
    src__chart__scatter_chart__scatter_chart_painter: scatter_chart_painter,
    src__chart__scatter_chart__scatter_chart_renderer: scatter_chart_renderer,
    src__chart__scatter_chart__scatter_chart: scatter_chart,
    src__chart__radar_chart__radar_chart_painter: radar_chart_painter,
    src__chart__radar_chart__radar_chart_renderer: radar_chart_renderer,
    src__chart__radar_chart__radar_chart: radar_chart,
    src__chart__pie_chart__pie_chart_data: pie_chart_data,
    src__chart__pie_chart__pie_chart_painter: pie_chart_painter,
    src__chart__pie_chart__pie_chart_renderer: pie_chart_renderer,
    src__chart__pie_chart__pie_chart: pie_chart,
    src__chart__bar_chart__bar_chart_extensions: bar_chart_extensions,
    src__chart__scatter_chart__scatter_chart_helper: scatter_chart_helper,
    src__chart__scatter_chart__scatter_chart_data: scatter_chart_data,
    src__chart__radar_chart__radar_extension: radar_extension,
    src__chart__radar_chart__radar_chart_data: radar_chart_data,
    src__utils__lerp: lerp,
    src__chart__line_chart__line_chart_renderer: line_chart_renderer,
    src__chart__line_chart__line_chart: line_chart,
    src__chart__line_chart__line_chart_data: line_chart_data,
    src__chart__line_chart__line_chart_helper: line_chart_helper,
    src__extensions__canvas_extension: canvas_extension,
    src__chart__line_chart__line_chart_painter: line_chart_painter,
    src__chart__base__axis_chart__axis_chart_painter: axis_chart_painter,
    src__chart__base__axis_chart__axis_chart_data: axis_chart_data,
    src__chart__bar_chart__bar_chart_helper: bar_chart_helper,
    src__chart__bar_chart__bar_chart_data: bar_chart_data,
    src__chart__bar_chart__bar_chart_painter: bar_chart_painter,
    src__chart__base__base_chart__base_chart_data: base_chart_data,
    src__utils__canvas_wrapper: canvas_wrapper,
    src__chart__base__base_chart__base_chart_painter: base_chart_painter,
    src__chart__bar_chart__bar_chart_renderer: bar_chart_renderer,
    src__chart__bar_chart__bar_chart: bar_chart,
    fl_chart: fl_chart
  };
}));

//# sourceMappingURL=scatter_chart_painter.dart.lib.js.map
